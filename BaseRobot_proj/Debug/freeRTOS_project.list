
freeRTOS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a634  0800a634  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a63c  0800a63c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047c0  20000160  0800a7a4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004920  0800a7a4  00024920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001929d  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373b  00000000  00000000  0003942d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b07c  00000000  00000000  0003f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ce0  00000000  00000000  0005a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0aa2  00000000  00000000  00070e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001118d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000588c  00000000  00000000  00111928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4e0 	.word	0x0800a4e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800a4e0 	.word	0x0800a4e0

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__gedf2>:
 80007ac:	f04f 3cff 	mov.w	ip, #4294967295
 80007b0:	e006      	b.n	80007c0 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__ledf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	e002      	b.n	80007c0 <__cmpdf2+0x4>
 80007ba:	bf00      	nop

080007bc <__cmpdf2>:
 80007bc:	f04f 0c01 	mov.w	ip, #1
 80007c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007d6:	d01b      	beq.n	8000810 <__cmpdf2+0x54>
 80007d8:	b001      	add	sp, #4
 80007da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007de:	bf0c      	ite	eq
 80007e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007e4:	ea91 0f03 	teqne	r1, r3
 80007e8:	bf02      	ittt	eq
 80007ea:	ea90 0f02 	teqeq	r0, r2
 80007ee:	2000      	moveq	r0, #0
 80007f0:	4770      	bxeq	lr
 80007f2:	f110 0f00 	cmn.w	r0, #0
 80007f6:	ea91 0f03 	teq	r1, r3
 80007fa:	bf58      	it	pl
 80007fc:	4299      	cmppl	r1, r3
 80007fe:	bf08      	it	eq
 8000800:	4290      	cmpeq	r0, r2
 8000802:	bf2c      	ite	cs
 8000804:	17d8      	asrcs	r0, r3, #31
 8000806:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800080a:	f040 0001 	orr.w	r0, r0, #1
 800080e:	4770      	bx	lr
 8000810:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d102      	bne.n	8000820 <__cmpdf2+0x64>
 800081a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800081e:	d107      	bne.n	8000830 <__cmpdf2+0x74>
 8000820:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d1d6      	bne.n	80007d8 <__cmpdf2+0x1c>
 800082a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800082e:	d0d3      	beq.n	80007d8 <__cmpdf2+0x1c>
 8000830:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop

08000838 <__aeabi_cdrcmple>:
 8000838:	4684      	mov	ip, r0
 800083a:	4610      	mov	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	468c      	mov	ip, r1
 8000840:	4619      	mov	r1, r3
 8000842:	4663      	mov	r3, ip
 8000844:	e000      	b.n	8000848 <__aeabi_cdcmpeq>
 8000846:	bf00      	nop

08000848 <__aeabi_cdcmpeq>:
 8000848:	b501      	push	{r0, lr}
 800084a:	f7ff ffb7 	bl	80007bc <__cmpdf2>
 800084e:	2800      	cmp	r0, #0
 8000850:	bf48      	it	mi
 8000852:	f110 0f00 	cmnmi.w	r0, #0
 8000856:	bd01      	pop	{r0, pc}

08000858 <__aeabi_dcmpeq>:
 8000858:	f84d ed08 	str.w	lr, [sp, #-8]!
 800085c:	f7ff fff4 	bl	8000848 <__aeabi_cdcmpeq>
 8000860:	bf0c      	ite	eq
 8000862:	2001      	moveq	r0, #1
 8000864:	2000      	movne	r0, #0
 8000866:	f85d fb08 	ldr.w	pc, [sp], #8
 800086a:	bf00      	nop

0800086c <__aeabi_dcmplt>:
 800086c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000870:	f7ff ffea 	bl	8000848 <__aeabi_cdcmpeq>
 8000874:	bf34      	ite	cc
 8000876:	2001      	movcc	r0, #1
 8000878:	2000      	movcs	r0, #0
 800087a:	f85d fb08 	ldr.w	pc, [sp], #8
 800087e:	bf00      	nop

08000880 <__aeabi_dcmple>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff ffe0 	bl	8000848 <__aeabi_cdcmpeq>
 8000888:	bf94      	ite	ls
 800088a:	2001      	movls	r0, #1
 800088c:	2000      	movhi	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmpge>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffce 	bl	8000838 <__aeabi_cdrcmple>
 800089c:	bf94      	ite	ls
 800089e:	2001      	movls	r0, #1
 80008a0:	2000      	movhi	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmpgt>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffc4 	bl	8000838 <__aeabi_cdrcmple>
 80008b0:	bf34      	ite	cc
 80008b2:	2001      	movcc	r0, #1
 80008b4:	2000      	movcs	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_d2iz>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008c4:	d215      	bcs.n	80008f2 <__aeabi_d2iz+0x36>
 80008c6:	d511      	bpl.n	80008ec <__aeabi_d2iz+0x30>
 80008c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008d0:	d912      	bls.n	80008f8 <__aeabi_d2iz+0x3c>
 80008d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008e2:	fa23 f002 	lsr.w	r0, r3, r2
 80008e6:	bf18      	it	ne
 80008e8:	4240      	negne	r0, r0
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008f6:	d105      	bne.n	8000904 <__aeabi_d2iz+0x48>
 80008f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008fc:	bf08      	it	eq
 80008fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000902:	4770      	bx	lr
 8000904:	f04f 0000 	mov.w	r0, #0
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b974 	b.w	8000cac <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	4604      	mov	r4, r0
 80009e4:	468e      	mov	lr, r1
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d14d      	bne.n	8000a86 <__udivmoddi4+0xaa>
 80009ea:	428a      	cmp	r2, r1
 80009ec:	4694      	mov	ip, r2
 80009ee:	d969      	bls.n	8000ac4 <__udivmoddi4+0xe8>
 80009f0:	fab2 f282 	clz	r2, r2
 80009f4:	b152      	cbz	r2, 8000a0c <__udivmoddi4+0x30>
 80009f6:	fa01 f302 	lsl.w	r3, r1, r2
 80009fa:	f1c2 0120 	rsb	r1, r2, #32
 80009fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000a02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a06:	ea41 0e03 	orr.w	lr, r1, r3
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a10:	0c21      	lsrs	r1, r4, #16
 8000a12:	fbbe f6f8 	udiv	r6, lr, r8
 8000a16:	fa1f f78c 	uxth.w	r7, ip
 8000a1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a22:	fb06 f107 	mul.w	r1, r6, r7
 8000a26:	4299      	cmp	r1, r3
 8000a28:	d90a      	bls.n	8000a40 <__udivmoddi4+0x64>
 8000a2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a32:	f080 811f 	bcs.w	8000c74 <__udivmoddi4+0x298>
 8000a36:	4299      	cmp	r1, r3
 8000a38:	f240 811c 	bls.w	8000c74 <__udivmoddi4+0x298>
 8000a3c:	3e02      	subs	r6, #2
 8000a3e:	4463      	add	r3, ip
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a48:	fb08 3310 	mls	r3, r8, r0, r3
 8000a4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a50:	fb00 f707 	mul.w	r7, r0, r7
 8000a54:	42a7      	cmp	r7, r4
 8000a56:	d90a      	bls.n	8000a6e <__udivmoddi4+0x92>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a60:	f080 810a 	bcs.w	8000c78 <__udivmoddi4+0x29c>
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	f240 8107 	bls.w	8000c78 <__udivmoddi4+0x29c>
 8000a6a:	4464      	add	r4, ip
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a72:	1be4      	subs	r4, r4, r7
 8000a74:	2600      	movs	r6, #0
 8000a76:	b11d      	cbz	r5, 8000a80 <__udivmoddi4+0xa4>
 8000a78:	40d4      	lsrs	r4, r2
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d909      	bls.n	8000a9e <__udivmoddi4+0xc2>
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	f000 80ef 	beq.w	8000c6e <__udivmoddi4+0x292>
 8000a90:	2600      	movs	r6, #0
 8000a92:	e9c5 0100 	strd	r0, r1, [r5]
 8000a96:	4630      	mov	r0, r6
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	fab3 f683 	clz	r6, r3
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d14a      	bne.n	8000b3c <__udivmoddi4+0x160>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xd4>
 8000aaa:	4282      	cmp	r2, r0
 8000aac:	f200 80f9 	bhi.w	8000ca2 <__udivmoddi4+0x2c6>
 8000ab0:	1a84      	subs	r4, r0, r2
 8000ab2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	469e      	mov	lr, r3
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d0e0      	beq.n	8000a80 <__udivmoddi4+0xa4>
 8000abe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ac2:	e7dd      	b.n	8000a80 <__udivmoddi4+0xa4>
 8000ac4:	b902      	cbnz	r2, 8000ac8 <__udivmoddi4+0xec>
 8000ac6:	deff      	udf	#255	; 0xff
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	f040 8092 	bne.w	8000bf6 <__udivmoddi4+0x21a>
 8000ad2:	eba1 010c 	sub.w	r1, r1, ip
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2601      	movs	r6, #1
 8000ae0:	0c20      	lsrs	r0, r4, #16
 8000ae2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ae6:	fb07 1113 	mls	r1, r7, r3, r1
 8000aea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aee:	fb0e f003 	mul.w	r0, lr, r3
 8000af2:	4288      	cmp	r0, r1
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x12c>
 8000af6:	eb1c 0101 	adds.w	r1, ip, r1
 8000afa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x12a>
 8000b00:	4288      	cmp	r0, r1
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2c0>
 8000b06:	4643      	mov	r3, r8
 8000b08:	1a09      	subs	r1, r1, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b10:	fb07 1110 	mls	r1, r7, r0, r1
 8000b14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x156>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x154>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2ca>
 8000b30:	4608      	mov	r0, r1
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b3a:	e79c      	b.n	8000a76 <__udivmoddi4+0x9a>
 8000b3c:	f1c6 0720 	rsb	r7, r6, #32
 8000b40:	40b3      	lsls	r3, r6
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b52:	431c      	orrs	r4, r3
 8000b54:	40f9      	lsrs	r1, r7
 8000b56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b62:	0c20      	lsrs	r0, r4, #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fb09 1118 	mls	r1, r9, r8, r1
 8000b6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b70:	fb08 f00e 	mul.w	r0, r8, lr
 8000b74:	4288      	cmp	r0, r1
 8000b76:	fa02 f206 	lsl.w	r2, r2, r6
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b8>
 8000b7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2bc>
 8000b88:	4288      	cmp	r0, r1
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2bc>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1a09      	subs	r1, r1, r0
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	458e      	cmp	lr, r1
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1e2>
 8000bac:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2b4>
 8000bb6:	458e      	cmp	lr, r1
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2b4>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4461      	add	r1, ip
 8000bbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bc6:	eba1 010e 	sub.w	r1, r1, lr
 8000bca:	42a1      	cmp	r1, r4
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46a6      	mov	lr, r4
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x2a4>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x2a0>
 8000bd4:	b15d      	cbz	r5, 8000bee <__udivmoddi4+0x212>
 8000bd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bda:	eb61 010e 	sbc.w	r1, r1, lr
 8000bde:	fa01 f707 	lsl.w	r7, r1, r7
 8000be2:	fa22 f306 	lsr.w	r3, r2, r6
 8000be6:	40f1      	lsrs	r1, r6
 8000be8:	431f      	orrs	r7, r3
 8000bea:	e9c5 7100 	strd	r7, r1, [r5]
 8000bee:	2600      	movs	r6, #0
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	40d8      	lsrs	r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	fa21 f303 	lsr.w	r3, r1, r3
 8000c04:	4091      	lsls	r1, r2
 8000c06:	4301      	orrs	r1, r0
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c14:	fb07 3610 	mls	r6, r7, r0, r3
 8000c18:	0c0b      	lsrs	r3, r1, #16
 8000c1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c22:	429e      	cmp	r6, r3
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x260>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b8>
 8000c34:	429e      	cmp	r6, r3
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b8>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	b289      	uxth	r1, r1
 8000c40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c44:	fb07 3316 	mls	r3, r7, r6, r3
 8000c48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x28a>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2b0>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2b0>
 8000c62:	3e02      	subs	r6, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	1ac9      	subs	r1, r1, r3
 8000c68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0x104>
 8000c6e:	462e      	mov	r6, r5
 8000c70:	4628      	mov	r0, r5
 8000c72:	e705      	b.n	8000a80 <__udivmoddi4+0xa4>
 8000c74:	4606      	mov	r6, r0
 8000c76:	e6e3      	b.n	8000a40 <__udivmoddi4+0x64>
 8000c78:	4618      	mov	r0, r3
 8000c7a:	e6f8      	b.n	8000a6e <__udivmoddi4+0x92>
 8000c7c:	454b      	cmp	r3, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f8>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c88:	3801      	subs	r0, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f8>
 8000c8c:	4646      	mov	r6, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x28a>
 8000c90:	4620      	mov	r0, r4
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1e2>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x260>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b8>
 8000c9c:	3b02      	subs	r3, #2
 8000c9e:	4461      	add	r1, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x12c>
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	e709      	b.n	8000aba <__udivmoddi4+0xde>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x156>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <vApplicationGetIdleTaskMemory+0x2c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <vApplicationGetIdleTaskMemory+0x30>)
 8000cc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000017c 	.word	0x2000017c
 8000ce0:	20000230 	.word	0x20000230

08000ce4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <vApplicationGetTimerTaskMemory+0x30>)
 8000cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d02:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	20000430 	.word	0x20000430
 8000d14:	200004e4 	.word	0x200004e4

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b098      	sub	sp, #96	; 0x60
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	X = 0;
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <main+0x190>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
	Y = 0;
 8000d24:	4b61      	ldr	r3, [pc, #388]	; (8000eac <main+0x194>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

	X_ant = 0;
 8000d2a:	4b61      	ldr	r3, [pc, #388]	; (8000eb0 <main+0x198>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
	Y_ant = 0;
 8000d30:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <main+0x19c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
	Vx = 0;
 8000d36:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <main+0x1a0>)
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
	Vy = 0;
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <main+0x1a4>)
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
	Vz = 0;
 8000d46:	4b5e      	ldr	r3, [pc, #376]	; (8000ec0 <main+0x1a8>)
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]

	speed = 5;
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <main+0x1ac>)
 8000d50:	4a5d      	ldr	r2, [pc, #372]	; (8000ec8 <main+0x1b0>)
 8000d52:	601a      	str	r2, [r3, #0]

	S1 = 0;
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <main+0x1b4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
	S2 = 0;
 8000d5a:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <main+0x1b8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
	S3 = 0;
 8000d60:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <main+0x1bc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	S4 = 0;
 8000d66:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <main+0x1c0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

	counter = 0;
 8000d6c:	4b5b      	ldr	r3, [pc, #364]	; (8000edc <main+0x1c4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]

	distance_1 = 0;
 8000d72:	4b5b      	ldr	r3, [pc, #364]	; (8000ee0 <main+0x1c8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
	distance_2 = 0;
 8000d78:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <main+0x1cc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
	distance_3 = 0;
 8000d7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ee8 <main+0x1d0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
	distance_4 = 0;
 8000d84:	4b59      	ldr	r3, [pc, #356]	; (8000eec <main+0x1d4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f002 fb11 	bl	80033b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f8c3 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 f9ff 	bl	8001194 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d96:	f000 f97b 	bl	8001090 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d9a:	f000 f9a7 	bl	80010ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d9e:	f000 f9cf 	bl	8001140 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000da2:	f000 f923 	bl	8000fec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /*Init TOF sensors (Change Address, Dist range)*/
   initSensorsVL53L0X(); //  Initialize Time-Of-Flight Sensors
 8000da6:	f000 fc9d 	bl	80016e4 <initSensorsVL53L0X>

   /*Get voltage value of the VBAT*/
   vbat_value = ReadADClevel();
 8000daa:	f000 fcbf 	bl	800172c <ReadADClevel>
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
 8000db2:	4b4f      	ldr	r3, [pc, #316]	; (8000ef0 <main+0x1d8>)
 8000db4:	edc3 7a00 	vstr	s15, [r3]

   /*Set Device State depending of VBAT value*/
   if(IS_VAL_INRANGE(vbat_value, MAX_VBAT, MIN_VBAT)){ //Correct value
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <main+0x1d8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc9d 	bl	80006fc <__aeabi_f2d>
 8000dc2:	a335      	add	r3, pc, #212	; (adr r3, 8000e98 <main+0x180>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fd5a 	bl	8000880 <__aeabi_dcmple>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d017      	beq.n	8000e02 <main+0xea>
 8000dd2:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <main+0x1d8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc90 	bl	80006fc <__aeabi_f2d>
 8000ddc:	a330      	add	r3, pc, #192	; (adr r3, 8000ea0 <main+0x188>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	f7ff fd57 	bl	8000894 <__aeabi_dcmpge>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00a      	beq.n	8000e02 <main+0xea>
 	  enterMovingState();
 8000dec:	f000 fd3e 	bl	800186c <enterMovingState>
 	  setMicrostepping(HALF_STEP);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fd77 	bl	80018e4 <setMicrostepping>
 	  HAL_UART_Receive_IT(&huart1, &RxByte_uart1, 1);
 8000df6:	2201      	movs	r2, #1
 8000df8:	493e      	ldr	r1, [pc, #248]	; (8000ef4 <main+0x1dc>)
 8000dfa:	483f      	ldr	r0, [pc, #252]	; (8000ef8 <main+0x1e0>)
 8000dfc:	f005 f8d7 	bl	8005fae <HAL_UART_Receive_IT>
 8000e00:	e001      	b.n	8000e06 <main+0xee>
   }else{
	   enterStopState();
 8000e02:	f000 fd15 	bl	8001830 <enterStopState>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of timerMutex */
  osMutexDef(timerMutex);
 8000e06:	2300      	movs	r3, #0
 8000e08:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  timerMutexHandle = osMutexCreate(osMutex(timerMutex));
 8000e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 f8e3 	bl	8006fde <osMutexCreate>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a38      	ldr	r2, [pc, #224]	; (8000efc <main+0x1e4>)
 8000e1c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MotorControl */
  osThreadDef(MotorControl, MotorMotionControl, osPriorityAboveNormal, 0, 128);
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <main+0x1e8>)
 8000e20:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000e24:	461d      	mov	r5, r3
 8000e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorControlHandle = osThreadCreate(osThread(MotorControl), NULL);
 8000e32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f006 f870 	bl	8006f1e <osThreadCreate>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <main+0x1ec>)
 8000e42:	6013      	str	r3, [r2, #0]

  /* definition and creation of TOFcontrol */
  osThreadDef(TOFcontrol, GetTOFDistance, osPriorityIdle, 0, 128);
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <main+0x1f0>)
 8000e46:	f107 0420 	add.w	r4, r7, #32
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TOFcontrolHandle = osThreadCreate(osThread(TOFcontrol), NULL);
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 f85d 	bl	8006f1e <osThreadCreate>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <main+0x1f4>)
 8000e68:	6013      	str	r3, [r2, #0]

  /* definition and creation of LifterControl */
  osThreadDef(LifterControl, LifterMotionControl, osPriorityIdle, 0, 128);
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <main+0x1f8>)
 8000e6c:	1d3c      	adds	r4, r7, #4
 8000e6e:	461d      	mov	r5, r3
 8000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LifterControlHandle = osThreadCreate(osThread(LifterControl), NULL);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 f84c 	bl	8006f1e <osThreadCreate>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <main+0x1fc>)
 8000e8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e8c:	f006 f840 	bl	8006f10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <main+0x178>
 8000e92:	bf00      	nop
 8000e94:	f3af 8000 	nop.w
 8000e98:	9999999a 	.word	0x9999999a
 8000e9c:	40059999 	.word	0x40059999
 8000ea0:	9999999a 	.word	0x9999999a
 8000ea4:	40019999 	.word	0x40019999
 8000ea8:	20000a2c 	.word	0x20000a2c
 8000eac:	20000a30 	.word	0x20000a30
 8000eb0:	20000a34 	.word	0x20000a34
 8000eb4:	20000a38 	.word	0x20000a38
 8000eb8:	20000a20 	.word	0x20000a20
 8000ebc:	20000a24 	.word	0x20000a24
 8000ec0:	20000a28 	.word	0x20000a28
 8000ec4:	20000a1c 	.word	0x20000a1c
 8000ec8:	40a00000 	.word	0x40a00000
 8000ecc:	20000a3c 	.word	0x20000a3c
 8000ed0:	20000a40 	.word	0x20000a40
 8000ed4:	20000a44 	.word	0x20000a44
 8000ed8:	20000a48 	.word	0x20000a48
 8000edc:	20000a5c 	.word	0x20000a5c
 8000ee0:	20000a4c 	.word	0x20000a4c
 8000ee4:	20000a50 	.word	0x20000a50
 8000ee8:	20000a54 	.word	0x20000a54
 8000eec:	20000a58 	.word	0x20000a58
 8000ef0:	20000a64 	.word	0x20000a64
 8000ef4:	20000a18 	.word	0x20000a18
 8000ef8:	20000980 	.word	0x20000980
 8000efc:	20000a14 	.word	0x20000a14
 8000f00:	0800a524 	.word	0x0800a524
 8000f04:	20000a08 	.word	0x20000a08
 8000f08:	0800a540 	.word	0x0800a540
 8000f0c:	20000a0c 	.word	0x20000a0c
 8000f10:	0800a55c 	.word	0x0800a55c
 8000f14:	20000a10 	.word	0x20000a10

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	; 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f008 fed7 	bl	8009cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <SystemClock_Config+0xcc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <SystemClock_Config+0xcc>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <SystemClock_Config+0xcc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f90:	2354      	movs	r3, #84	; 0x54
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 facd 	bl	8005540 <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fac:	f000 ffec 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 fd2f 	bl	8005a30 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fd8:	f000 ffd6 	bl	8001f88 <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	; 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_ADC1_Init+0x98>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_ADC1_Init+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC1_Init+0x98>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_ADC1_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_ADC1_Init+0x98>)
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_ADC1_Init+0xa0>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_ADC1_Init+0x98>)
 800103a:	2201      	movs	r2, #1
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_ADC1_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_ADC1_Init+0x98>)
 800104e:	f002 fa45 	bl	80034dc <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 ff96 	bl	8001f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800105c:	2301      	movs	r3, #1
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_ADC1_Init+0x98>)
 800106e:	f002 fbf9 	bl	8003864 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 ff86 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200008e4 	.word	0x200008e4
 8001088:	40012000 	.word	0x40012000
 800108c:	0f000001 	.word	0x0f000001

08001090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x50>)
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_I2C1_Init+0x54>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C1_Init+0x50>)
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x58>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_I2C1_Init+0x50>)
 80010ce:	f003 f973 	bl	80043b8 <HAL_I2C_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 ff56 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000092c 	.word	0x2000092c
 80010e4:	40005400 	.word	0x40005400
 80010e8:	000186a0 	.word	0x000186a0

080010ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART1_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 80010f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART1_UART_Init+0x4c>)
 8001124:	f004 fe64 	bl	8005df0 <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 ff2b 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000980 	.word	0x20000980
 800113c:	40011000 	.word	0x40011000

08001140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f004 fe3a 	bl	8005df0 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 ff01 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200009c4 	.word	0x200009c4
 8001190:	40004400 	.word	0x40004400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a3b      	ldr	r2, [pc, #236]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x144>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENA_2_Pin|ENA_1_Pin|ENA_4_Pin|ENA_3_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001204:	4835      	ldr	r0, [pc, #212]	; (80012dc <MX_GPIO_Init+0x148>)
 8001206:	f003 f88b 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_3_Pin|DIR_2_Pin|STEP_2_Pin|M2_Pin
 800120a:	2200      	movs	r2, #0
 800120c:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8001210:	4832      	ldr	r0, [pc, #200]	; (80012dc <MX_GPIO_Init+0x148>)
 8001212:	f003 f885 	bl	8004320 <HAL_GPIO_WritePin>
                          |M1_Pin|M0_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_4_Pin|STEP_4_Pin|DIR_3_Pin|DIR_5_Pin
 8001216:	2200      	movs	r2, #0
 8001218:	f641 0170 	movw	r1, #6256	; 0x1870
 800121c:	4830      	ldr	r0, [pc, #192]	; (80012e0 <MX_GPIO_Init+0x14c>)
 800121e:	f003 f87f 	bl	8004320 <HAL_GPIO_WritePin>
                          |STEP_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|STEP_1_Pin|XSHUT_1_Pin|XSHUT_2_Pin
 8001222:	2200      	movs	r2, #0
 8001224:	f24f 0103 	movw	r1, #61443	; 0xf003
 8001228:	482e      	ldr	r0, [pc, #184]	; (80012e4 <MX_GPIO_Init+0x150>)
 800122a:	f003 f879 	bl	8004320 <HAL_GPIO_WritePin>
                          |XSHUT_3_Pin|XSHUT_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|ENA_5_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001234:	482a      	ldr	r0, [pc, #168]	; (80012e0 <MX_GPIO_Init+0x14c>)
 8001236:	f003 f873 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENA_2_Pin ENA_1_Pin STEP_3_Pin DIR_2_Pin
                           STEP_2_Pin M2_Pin M1_Pin M0_Pin
                           LED2_Pin ENA_4_Pin ENA_3_Pin */
  GPIO_InitStruct.Pin = ENA_2_Pin|ENA_1_Pin|STEP_3_Pin|DIR_2_Pin
 800123a:	f646 73f2 	movw	r3, #28658	; 0x6ff2
 800123e:	60fb      	str	r3, [r7, #12]
                          |STEP_2_Pin|M2_Pin|M1_Pin|M0_Pin
                          |LED2_Pin|ENA_4_Pin|ENA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	4822      	ldr	r0, [pc, #136]	; (80012dc <MX_GPIO_Init+0x148>)
 8001254:	f002 fec8 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin;
 8001258:	230c      	movs	r3, #12
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800125c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4619      	mov	r1, r3
 800126c:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0x148>)
 800126e:	f002 febb 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_4_Pin STEP_4_Pin DIR_3_Pin LED1_Pin
                           DIR_5_Pin STEP_5_Pin ENA_5_Pin */
  GPIO_InitStruct.Pin = DIR_4_Pin|STEP_4_Pin|DIR_3_Pin|LED1_Pin
 8001272:	f649 1370 	movw	r3, #39280	; 0x9970
 8001276:	60fb      	str	r3, [r7, #12]
                          |DIR_5_Pin|STEP_5_Pin|ENA_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	4815      	ldr	r0, [pc, #84]	; (80012e0 <MX_GPIO_Init+0x14c>)
 800128c:	f002 feac 	bl	8003fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin STEP_1_Pin XSHUT_1_Pin XSHUT_2_Pin
                           XSHUT_3_Pin XSHUT_4_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|STEP_1_Pin|XSHUT_1_Pin|XSHUT_2_Pin
 8001290:	f24f 0303 	movw	r3, #61443	; 0xf003
 8001294:	60fb      	str	r3, [r7, #12]
                          |XSHUT_3_Pin|XSHUT_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_GPIO_Init+0x150>)
 80012aa:	f002 fe9d 	bl	8003fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	2008      	movs	r0, #8
 80012b4:	f002 fdcf 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012b8:	2008      	movs	r0, #8
 80012ba:	f002 fde8 	bl	8003e8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2105      	movs	r1, #5
 80012c2:	2009      	movs	r0, #9
 80012c4:	f002 fdc7 	bl	8003e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012c8:	2009      	movs	r0, #9
 80012ca:	f002 fde0 	bl	8003e8e <HAL_NVIC_EnableIRQ>

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400

080012e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1){
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a92      	ldr	r2, [pc, #584]	; (8001540 <HAL_UART_RxCpltCallback+0x258>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	f040 8152 	bne.w	80015a0 <HAL_UART_RxCpltCallback+0x2b8>
		if(GET_DEVICE_STATE() == MOVING_STATE){
 80012fc:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_UART_RxCpltCallback+0x25c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	f040 8102 	bne.w	800150a <HAL_UART_RxCpltCallback+0x222>

			if(RxByte_uart1 == START_MOVE_RIGHT){
 8001306:	4b90      	ldr	r3, [pc, #576]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d103      	bne.n	8001316 <HAL_UART_RxCpltCallback+0x2e>
				Vz = 0.1;
 800130e:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_UART_RxCpltCallback+0x264>)
 8001310:	4a8f      	ldr	r2, [pc, #572]	; (8001550 <HAL_UART_RxCpltCallback+0x268>)
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e13f      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>

			}else if(RxByte_uart1 == START_MOVE_LEFT){
 8001316:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d103      	bne.n	8001326 <HAL_UART_RxCpltCallback+0x3e>
				Vz = -0.1;
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_UART_RxCpltCallback+0x264>)
 8001320:	4a8c      	ldr	r2, [pc, #560]	; (8001554 <HAL_UART_RxCpltCallback+0x26c>)
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e137      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>

			}else if((RxByte_uart1 == END_MOVE_RIGHT) || (RxByte_uart1 == END_MOVE_LEFT)){
 8001326:	4b88      	ldr	r3, [pc, #544]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d003      	beq.n	8001336 <HAL_UART_RxCpltCallback+0x4e>
 800132e:	4b86      	ldr	r3, [pc, #536]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b04      	cmp	r3, #4
 8001334:	d104      	bne.n	8001340 <HAL_UART_RxCpltCallback+0x58>
				Vz = 0;
 8001336:	4b85      	ldr	r3, [pc, #532]	; (800154c <HAL_UART_RxCpltCallback+0x264>)
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e12a      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>

			}else if(IS_VAL_INRANGE(RxByte_uart1, MAX_XVALUE, MIN_XVALUE)){
 8001340:	4b81      	ldr	r3, [pc, #516]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b96      	cmp	r3, #150	; 0x96
 8001346:	d83b      	bhi.n	80013c0 <HAL_UART_RxCpltCallback+0xd8>
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b31      	cmp	r3, #49	; 0x31
 800134e:	d937      	bls.n	80013c0 <HAL_UART_RxCpltCallback+0xd8>
				Y = CALC_X_VALUE(RxByte_uart1); //x, y inverted
 8001350:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3b64      	subs	r3, #100	; 0x64
 8001356:	4a80      	ldr	r2, [pc, #512]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 8001358:	6013      	str	r3, [r2, #0]
				if(Y > 0){
 800135a:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	dd14      	ble.n	800138c <HAL_UART_RxCpltCallback+0xa4>
					if(block_left){
 8001362:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_UART_RxCpltCallback+0x274>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_UART_RxCpltCallback+0x96>
//						Y_ant = Y;
						Y = 0;
 800136a:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001376:	487a      	ldr	r0, [pc, #488]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 8001378:	f002 ffd2 	bl	8004320 <HAL_GPIO_WritePin>
				if(Y > 0){
 800137c:	e0dd      	b.n	800153a <HAL_UART_RxCpltCallback+0x252>
					}else{
//						Y = Y_ant;
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001384:	4876      	ldr	r0, [pc, #472]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 8001386:	f002 ffcb 	bl	8004320 <HAL_GPIO_WritePin>
				if(Y > 0){
 800138a:	e0d6      	b.n	800153a <HAL_UART_RxCpltCallback+0x252>
					}
				}else if(Y < 0){
 800138c:	4b72      	ldr	r3, [pc, #456]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f280 80d2 	bge.w	800153a <HAL_UART_RxCpltCallback+0x252>
					if(block_right){
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_UART_RxCpltCallback+0x27c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_UART_RxCpltCallback+0xca>
//						Y_ant = Y;
						Y = 0;
 800139e:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013aa:	486d      	ldr	r0, [pc, #436]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 80013ac:	f002 ffb8 	bl	8004320 <HAL_GPIO_WritePin>
				if(Y > 0){
 80013b0:	e0c3      	b.n	800153a <HAL_UART_RxCpltCallback+0x252>
					}else{
//						Y = Y_ant;
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b8:	4869      	ldr	r0, [pc, #420]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 80013ba:	f002 ffb1 	bl	8004320 <HAL_GPIO_WritePin>
				if(Y > 0){
 80013be:	e0bc      	b.n	800153a <HAL_UART_RxCpltCallback+0x252>
					}
				}

			}else if(IS_VAL_INRANGE(RxByte_uart1, MAX_YVALUE, MIN_YVALUE)){
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2bfb      	cmp	r3, #251	; 0xfb
 80013c6:	d83b      	bhi.n	8001440 <HAL_UART_RxCpltCallback+0x158>
 80013c8:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b96      	cmp	r3, #150	; 0x96
 80013ce:	d937      	bls.n	8001440 <HAL_UART_RxCpltCallback+0x158>
				X = CALC_Y_VALUE(RxByte_uart1);
 80013d0:	4b5d      	ldr	r3, [pc, #372]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3bc9      	subs	r3, #201	; 0xc9
 80013d6:	4a64      	ldr	r2, [pc, #400]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 80013d8:	6013      	str	r3, [r2, #0]
				if(X > 0){
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dd14      	ble.n	800140c <HAL_UART_RxCpltCallback+0x124>
					if(block_forward){
 80013e2:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_UART_RxCpltCallback+0x284>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_UART_RxCpltCallback+0x116>
//						X_ant = X;
						X = 0;
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	485a      	ldr	r0, [pc, #360]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 80013f8:	f002 ff92 	bl	8004320 <HAL_GPIO_WritePin>
				if(X > 0){
 80013fc:	e0ca      	b.n	8001594 <HAL_UART_RxCpltCallback+0x2ac>
					}else{
//						X = X_ant;
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	4856      	ldr	r0, [pc, #344]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 8001406:	f002 ff8b 	bl	8004320 <HAL_GPIO_WritePin>
				if(X > 0){
 800140a:	e0c3      	b.n	8001594 <HAL_UART_RxCpltCallback+0x2ac>
					}
				}else if(X < 0){
 800140c:	4b56      	ldr	r3, [pc, #344]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f280 80bf 	bge.w	8001594 <HAL_UART_RxCpltCallback+0x2ac>
					if(block_backward){
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_UART_RxCpltCallback+0x288>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_UART_RxCpltCallback+0x14a>
//						X_ant = X;
						X = 0;
 800141e:	4b52      	ldr	r3, [pc, #328]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142a:	484d      	ldr	r0, [pc, #308]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 800142c:	f002 ff78 	bl	8004320 <HAL_GPIO_WritePin>
				if(X > 0){
 8001430:	e0b0      	b.n	8001594 <HAL_UART_RxCpltCallback+0x2ac>
					}else{
//						X = X_ant;
						HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001438:	4849      	ldr	r0, [pc, #292]	; (8001560 <HAL_UART_RxCpltCallback+0x278>)
 800143a:	f002 ff71 	bl	8004320 <HAL_GPIO_WritePin>
				if(X > 0){
 800143e:	e0a9      	b.n	8001594 <HAL_UART_RxCpltCallback+0x2ac>
					}
				}

			}else if(IS_VAL_INRANGE(RxByte_uart1, MAX_SPEED, MIN_SPEED)){
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b13      	cmp	r3, #19
 8001446:	d80e      	bhi.n	8001466 <HAL_UART_RxCpltCallback+0x17e>
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d90a      	bls.n	8001466 <HAL_UART_RxCpltCallback+0x17e>
				speed = CALC_SPEED(RxByte_uart1);
 8001450:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3b09      	subs	r3, #9
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_UART_RxCpltCallback+0x28c>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
 8001464:	e097      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>

			}else if(RxByte_uart1 == START_UP){
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b05      	cmp	r3, #5
 800146c:	d111      	bne.n	8001492 <HAL_UART_RxCpltCallback+0x1aa>
				if(first_up_flag){
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_UART_RxCpltCallback+0x290>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_UART_RxCpltCallback+0x198>
					enableLifterMotor();
 8001476:	f000 f9c3 	bl	8001800 <enableLifterMotor>
					first_up_flag = 0;
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <HAL_UART_RxCpltCallback+0x290>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
				}
				if(!block_up_flag){
 8001480:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_UART_RxCpltCallback+0x294>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 8086 	bne.w	8001596 <HAL_UART_RxCpltCallback+0x2ae>
					SET_LIFTER_MOTOR_DIR(UP_DIR);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_UART_RxCpltCallback+0x298>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e081      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
				}

			}else if(RxByte_uart1 == START_DOWN){
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d110      	bne.n	80014bc <HAL_UART_RxCpltCallback+0x1d4>
				if(first_down_flag){
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_UART_RxCpltCallback+0x29c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <HAL_UART_RxCpltCallback+0x1c4>
					enableLifterMotor();
 80014a2:	f000 f9ad 	bl	8001800 <enableLifterMotor>
					first_down_flag = 0;
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_UART_RxCpltCallback+0x29c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
				}
				if(!block_down_flag){
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_UART_RxCpltCallback+0x2a0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d170      	bne.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
					SET_LIFTER_MOTOR_DIR(DOWN_DIR);
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_UART_RxCpltCallback+0x298>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e06c      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
				}

			}else if((RxByte_uart1 == END_UP) || (RxByte_uart1 == END_DOWN)){
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b06      	cmp	r3, #6
 80014c2:	d003      	beq.n	80014cc <HAL_UART_RxCpltCallback+0x1e4>
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d10c      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0x1fe>
				disableLifterMotor();
 80014cc:	f000 f9a4 	bl	8001818 <disableLifterMotor>
				first_down_flag = first_up_flag = 1;
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_UART_RxCpltCallback+0x290>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_UART_RxCpltCallback+0x290>)
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_UART_RxCpltCallback+0x29c>)
 80014dc:	701a      	strb	r2, [r3, #0]
				SET_LIFTER_MOTOR_DIR(STOP_DIR);
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_UART_RxCpltCallback+0x298>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e057      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>

			}else if(RxByte_uart1 == RELEASE){
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_UART_RxCpltCallback+0x260>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b09      	cmp	r3, #9
 80014ec:	d102      	bne.n	80014f4 <HAL_UART_RxCpltCallback+0x20c>
				enterPacketState();
 80014ee:	f000 f9d9 	bl	80018a4 <enterPacketState>
 80014f2:	e050      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
			}
			else{
				X = 0;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
				Y = 0;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
				speed = 0;
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_UART_RxCpltCallback+0x28c>)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e045      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
			}
		}else{
			X = Y = 0;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_UART_RxCpltCallback+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_UART_RxCpltCallback+0x280>)
 8001516:	6013      	str	r3, [r2, #0]
			Vx = Vy = Vz = 0.00;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_UART_RxCpltCallback+0x264>)
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_UART_RxCpltCallback+0x264>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_UART_RxCpltCallback+0x2a4>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_UART_RxCpltCallback+0x2a4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <HAL_UART_RxCpltCallback+0x2a8>)
 800152e:	6013      	str	r3, [r2, #0]
			speed = 0;
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_UART_RxCpltCallback+0x28c>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e02d      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
				if(Y > 0){
 800153a:	bf00      	nop
 800153c:	e02b      	b.n	8001596 <HAL_UART_RxCpltCallback+0x2ae>
 800153e:	bf00      	nop
 8001540:	40011000 	.word	0x40011000
 8001544:	20000a60 	.word	0x20000a60
 8001548:	20000a18 	.word	0x20000a18
 800154c:	20000a28 	.word	0x20000a28
 8001550:	3dcccccd 	.word	0x3dcccccd
 8001554:	bdcccccd 	.word	0xbdcccccd
 8001558:	20000a30 	.word	0x20000a30
 800155c:	20000a6b 	.word	0x20000a6b
 8001560:	40020000 	.word	0x40020000
 8001564:	20000a6a 	.word	0x20000a6a
 8001568:	20000a2c 	.word	0x20000a2c
 800156c:	20000a6c 	.word	0x20000a6c
 8001570:	20000a6d 	.word	0x20000a6d
 8001574:	20000a1c 	.word	0x20000a1c
 8001578:	20000001 	.word	0x20000001
 800157c:	20000a68 	.word	0x20000a68
 8001580:	20000000 	.word	0x20000000
 8001584:	20000002 	.word	0x20000002
 8001588:	20000a69 	.word	0x20000a69
 800158c:	20000a24 	.word	0x20000a24
 8001590:	20000a20 	.word	0x20000a20
				if(X > 0){
 8001594:	bf00      	nop
		}
		HAL_UART_Receive_IT(huart, &RxByte_uart1, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <HAL_UART_RxCpltCallback+0x2e0>)
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f004 fd07 	bl	8005fae <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_UART_RxCpltCallback+0x2e4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d109      	bne.n	80015be <HAL_UART_RxCpltCallback+0x2d6>
		if(GET_DEVICE_STATE() == PACKET_STATE){
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_UART_RxCpltCallback+0x2e8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d105      	bne.n	80015be <HAL_UART_RxCpltCallback+0x2d6>
			if(RxByte_uart2 == 'F'){
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_UART_RxCpltCallback+0x2ec>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b46      	cmp	r3, #70	; 0x46
 80015b8:	d101      	bne.n	80015be <HAL_UART_RxCpltCallback+0x2d6>
				enterMovingState();
 80015ba:	f000 f957 	bl	800186c <enterMovingState>
			}
		}

	}

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000a18 	.word	0x20000a18
 80015cc:	40004400 	.word	0x40004400
 80015d0:	20000a60 	.word	0x20000a60
 80015d4:	20000a19 	.word	0x20000a19

080015d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SWITCH1_Pin){
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d111      	bne.n	800160c <HAL_GPIO_EXTI_Callback+0x34>
		if(HAL_GPIO_ReadPin(SWITCH1_GPIO_Port, SWITCH1_Pin) == GPIO_PIN_SET){ //Rising edge
 80015e8:	2104      	movs	r1, #4
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <HAL_GPIO_EXTI_Callback+0x64>)
 80015ec:	f002 fe80 	bl	80042f0 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d106      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x2c>
			SET_LIFTER_MOTOR_DIR(STOP_DIR);
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_GPIO_EXTI_Callback+0x68>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
			block_up_flag = 1;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_GPIO_EXTI_Callback+0x6c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
		}


	}

}
 8001602:	e017      	b.n	8001634 <HAL_GPIO_EXTI_Callback+0x5c>
			block_up_flag = 0;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	e013      	b.n	8001634 <HAL_GPIO_EXTI_Callback+0x5c>
	}else if(GPIO_Pin == SWITCH2_Pin){
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d110      	bne.n	8001634 <HAL_GPIO_EXTI_Callback+0x5c>
		if(HAL_GPIO_ReadPin(SWITCH2_GPIO_Port, SWITCH2_Pin)){  //Rising edge
 8001612:	2108      	movs	r1, #8
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <HAL_GPIO_EXTI_Callback+0x64>)
 8001616:	f002 fe6b 	bl	80042f0 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_EXTI_Callback+0x56>
			SET_LIFTER_MOTOR_DIR(STOP_DIR);
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_GPIO_EXTI_Callback+0x68>)
 8001622:	2202      	movs	r2, #2
 8001624:	701a      	strb	r2, [r3, #0]
			block_down_flag = 1;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_GPIO_EXTI_Callback+0x70>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_EXTI_Callback+0x5c>
			block_down_flag = 0;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_GPIO_EXTI_Callback+0x70>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020800 	.word	0x40020800
 8001640:	20000000 	.word	0x20000000
 8001644:	20000a68 	.word	0x20000a68
 8001648:	20000a69 	.word	0x20000a69

0800164c <GetAbsValue>:


int GetAbsValue(int num){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(num < 0){
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	da02      	bge.n	8001660 <GetAbsValue+0x14>
		num = -num;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	425b      	negs	r3, r3
 800165e:	607b      	str	r3, [r7, #4]
	}
	return num;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <configTOF>:

HAL_StatusTypeDef configTOF(GPIO_TypeDef* XshutPort, uint16_t XshutPin, uint8_t tofAddr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef Status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(XshutPort, XshutPin, GPIO_PIN_SET);
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	2201      	movs	r2, #1
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f002 fe48 	bl	8004320 <HAL_GPIO_WritePin>
//  Status = HAL_I2C_IsDeviceReady(&hi2c1, I2C_ADDR_INIT, 1, HAL_MAX_DELAY);
////  if(Status != HAL_OK){
////    return Status;
////  }

  SetDevAddr(tofAddr, I2C_ADDR_INIT);
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2152      	movs	r1, #82	; 0x52
 8001694:	4618      	mov	r0, r3
 8001696:	f001 f811 	bl	80026bc <SetDevAddr>

  Status = HAL_I2C_IsDeviceReady(&hi2c1, tofAddr, 1, 1000);
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	b299      	uxth	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	2201      	movs	r2, #1
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <configTOF+0x70>)
 80016a6:	f003 faef 	bl	8004c88 <HAL_I2C_IsDeviceReady>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
  if(Status != HAL_OK){
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <configTOF+0x48>
  	  return Status;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	e00e      	b.n	80016d6 <configTOF+0x66>
  }

  if(!tofInit(2,tofAddr)){
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2002      	movs	r0, #2
 80016be:	f000 fea9 	bl	8002414 <tofInit>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <configTOF+0x5c>
	  return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e004      	b.n	80016d6 <configTOF+0x66>
  }

  HAL_Delay(500);
 80016cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d0:	f001 fee0 	bl	8003494 <HAL_Delay>
  return Status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000092c 	.word	0x2000092c

080016e4 <initSensorsVL53L0X>:

static void initSensorsVL53L0X(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, XSHUT_1_Pin|XSHUT_2_Pin|XSHUT_3_Pin|XSHUT_4_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <initSensorsVL53L0X+0x44>)
 80016f0:	f002 fe16 	bl	8004320 <HAL_GPIO_WritePin>

	  configTOF(XSHUT_1_GPIO_Port, XSHUT_1_Pin, I2C_ADDR_TOF1);
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <initSensorsVL53L0X+0x44>)
 80016fc:	f7ff ffb8 	bl	8001670 <configTOF>
	  configTOF(XSHUT_2_GPIO_Port, XSHUT_2_Pin, I2C_ADDR_TOF2);
 8001700:	2250      	movs	r2, #80	; 0x50
 8001702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <initSensorsVL53L0X+0x44>)
 8001708:	f7ff ffb2 	bl	8001670 <configTOF>
	  configTOF(XSHUT_3_GPIO_Port, XSHUT_3_Pin, I2C_ADDR_TOF3);
 800170c:	2260      	movs	r2, #96	; 0x60
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <initSensorsVL53L0X+0x44>)
 8001714:	f7ff ffac 	bl	8001670 <configTOF>
	  configTOF(XSHUT_4_GPIO_Port, XSHUT_4_Pin, I2C_ADDR_TOF4);
 8001718:	2270      	movs	r2, #112	; 0x70
 800171a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171e:	4802      	ldr	r0, [pc, #8]	; (8001728 <initSensorsVL53L0X+0x44>)
 8001720:	f7ff ffa6 	bl	8001670 <configTOF>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40020400 	.word	0x40020400

0800172c <ReadADClevel>:

static float ReadADClevel(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

	uint32_t adc_value = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <ReadADClevel+0x50>)
 8001738:	f001 ff14 	bl	8003564 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <ReadADClevel+0x50>)
 8001742:	f001 fff6 	bl	8003732 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <ReadADClevel+0x50>)
 8001748:	f002 f87e 	bl	8003848 <HAL_ADC_GetValue>
 800174c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <ReadADClevel+0x50>)
 8001750:	f001 ffbc 	bl	80036cc <HAL_ADC_Stop>

	return (adc_value * 3.3f) / 4096.0f;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001780 <ReadADClevel+0x54>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001784 <ReadADClevel+0x58>
 800176a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176e:	eef0 7a66 	vmov.f32	s15, s13

}
 8001772:	eeb0 0a67 	vmov.f32	s0, s15
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200008e4 	.word	0x200008e4
 8001780:	40533333 	.word	0x40533333
 8001784:	45800000 	.word	0x45800000

08001788 <enableMovingMotors>:
//	osMutexRelease(timer_mutexHandle);
//	return timer_value;
//
//}

static void enableMovingMotors(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENA_1_GPIO_Port, ENA_1_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <enableMovingMotors+0x38>)
 8001794:	f002 fdc4 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA_2_GPIO_Port, ENA_2_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179e:	4808      	ldr	r0, [pc, #32]	; (80017c0 <enableMovingMotors+0x38>)
 80017a0:	f002 fdbe 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA_3_GPIO_Port, ENA_3_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <enableMovingMotors+0x38>)
 80017ac:	f002 fdb8 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA_4_GPIO_Port, ENA_4_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	4802      	ldr	r0, [pc, #8]	; (80017c0 <enableMovingMotors+0x38>)
 80017b8:	f002 fdb2 	bl	8004320 <HAL_GPIO_WritePin>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40020800 	.word	0x40020800

080017c4 <disableMovingMotors>:

static void disableMovingMotors(void){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENA_1_GPIO_Port, ENA_1_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <disableMovingMotors+0x38>)
 80017d0:	f002 fda6 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA_2_GPIO_Port, ENA_2_Pin, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <disableMovingMotors+0x38>)
 80017dc:	f002 fda0 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA_3_GPIO_Port, ENA_3_Pin, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <disableMovingMotors+0x38>)
 80017e8:	f002 fd9a 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENA_4_GPIO_Port, ENA_4_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f2:	4802      	ldr	r0, [pc, #8]	; (80017fc <disableMovingMotors+0x38>)
 80017f4:	f002 fd94 	bl	8004320 <HAL_GPIO_WritePin>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40020800 	.word	0x40020800

08001800 <enableLifterMotor>:

static void enableLifterMotor(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENA_5_GPIO_Port, ENA_5_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <enableLifterMotor+0x14>)
 800180c:	f002 fd88 	bl	8004320 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020000 	.word	0x40020000

08001818 <disableLifterMotor>:

static void disableLifterMotor(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENA_5_GPIO_Port, ENA_5_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001822:	4802      	ldr	r0, [pc, #8]	; (800182c <disableLifterMotor+0x14>)
 8001824:	f002 fd7c 	bl	8004320 <HAL_GPIO_WritePin>

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40020000 	.word	0x40020000

08001830 <enterStopState>:
static void enterStopState(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	SET_DEVICE_STATE(STOP_STATE);
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <enterStopState+0x30>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	disableMovingMotors();
 800183a:	f7ff ffc3 	bl	80017c4 <disableMovingMotors>
	disableLifterMotor();
 800183e:	f7ff ffeb 	bl	8001818 <disableLifterMotor>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	4806      	ldr	r0, [pc, #24]	; (8001864 <enterStopState+0x34>)
 800184a:	f002 fd69 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <enterStopState+0x38>)
 8001856:	f002 fd63 	bl	8004320 <HAL_GPIO_WritePin>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000a60 	.word	0x20000a60
 8001864:	40020000 	.word	0x40020000
 8001868:	40020800 	.word	0x40020800

0800186c <enterMovingState>:

static void enterMovingState(void){
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	SET_DEVICE_STATE(MOVING_STATE);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <enterMovingState+0x2c>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
	enableMovingMotors();
 8001876:	f7ff ff87 	bl	8001788 <enableMovingMotors>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <enterMovingState+0x30>)
 8001882:	f002 fd4d 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <enterMovingState+0x34>)
 800188e:	f002 fd47 	bl	8004320 <HAL_GPIO_WritePin>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000a60 	.word	0x20000a60
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020800 	.word	0x40020800

080018a4 <enterPacketState>:

static void enterPacketState(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

	SET_DEVICE_STATE(PACKET_STATE);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <enterPacketState+0x34>)
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
	disableMovingMotors();
 80018ae:	f7ff ff89 	bl	80017c4 <disableMovingMotors>
	disableLifterMotor();
 80018b2:	f7ff ffb1 	bl	8001818 <disableLifterMotor>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <enterPacketState+0x38>)
 80018be:	f002 fd2f 	bl	8004320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <enterPacketState+0x3c>)
 80018ca:	f002 fd29 	bl	8004320 <HAL_GPIO_WritePin>
	SendReleaseMessage();
 80018ce:	f000 f851 	bl	8001974 <SendReleaseMessage>

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000a60 	.word	0x20000a60
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800

080018e4 <setMicrostepping>:

static void setMicrostepping(microstepping_t steps){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]

	//Reset microstepping value : FULL_STEP (all MX_pins initialized in reset state)
	switch (steps) {
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d837      	bhi.n	8001966 <setMicrostepping+0x82>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <setMicrostepping+0x18>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	08001911 	.word	0x08001911
 8001900:	0800191f 	.word	0x0800191f
 8001904:	0800192b 	.word	0x0800192b
 8001908:	08001943 	.word	0x08001943
 800190c:	0800194f 	.word	0x0800194f
		case HALF_STEP:
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	4816      	ldr	r0, [pc, #88]	; (8001970 <setMicrostepping+0x8c>)
 8001918:	f002 fd02 	bl	8004320 <HAL_GPIO_WritePin>
			break;
 800191c:	e024      	b.n	8001968 <setMicrostepping+0x84>
		case MICROSTEPPING_1_4:
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	4813      	ldr	r0, [pc, #76]	; (8001970 <setMicrostepping+0x8c>)
 8001924:	f002 fcfc 	bl	8004320 <HAL_GPIO_WritePin>
			break;
 8001928:	e01e      	b.n	8001968 <setMicrostepping+0x84>
		case MICROSTEPPING_8:
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <setMicrostepping+0x8c>)
 8001930:	f002 fcf6 	bl	8004320 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <setMicrostepping+0x8c>)
 800193c:	f002 fcf0 	bl	8004320 <HAL_GPIO_WritePin>
			break;
 8001940:	e012      	b.n	8001968 <setMicrostepping+0x84>
		case MICROSTEPPING_16:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <setMicrostepping+0x8c>)
 8001948:	f002 fcea 	bl	8004320 <HAL_GPIO_WritePin>
			break;
 800194c:	e00c      	b.n	8001968 <setMicrostepping+0x84>
		case MICROSTEPPING_32:
			HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2140      	movs	r1, #64	; 0x40
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <setMicrostepping+0x8c>)
 8001954:	f002 fce4 	bl	8004320 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	4804      	ldr	r0, [pc, #16]	; (8001970 <setMicrostepping+0x8c>)
 8001960:	f002 fcde 	bl	8004320 <HAL_GPIO_WritePin>
			break;
 8001964:	e000      	b.n	8001968 <setMicrostepping+0x84>
		default:
			break;
 8001966:	bf00      	nop
	}
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020800 	.word	0x40020800

08001974 <SendReleaseMessage>:

static void SendReleaseMessage(void){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
	uint8_t mssg = 'R';
 800197a:	2352      	movs	r3, #82	; 0x52
 800197c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &mssg, sizeof(mssg), HAL_MAX_DELAY);
 800197e:	1df9      	adds	r1, r7, #7
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	2201      	movs	r2, #1
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <SendReleaseMessage+0x2c>)
 8001988:	f004 fa7f 	bl	8005e8a <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &RxByte_uart2, 1);
 800198c:	2201      	movs	r2, #1
 800198e:	4905      	ldr	r1, [pc, #20]	; (80019a4 <SendReleaseMessage+0x30>)
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <SendReleaseMessage+0x2c>)
 8001992:	f004 fb0c 	bl	8005fae <HAL_UART_Receive_IT>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200009c4 	.word	0x200009c4
 80019a4:	20000a19 	.word	0x20000a19

080019a8 <MotorMotionControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorMotionControl */
void MotorMotionControl(void const * argument)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(GET_DEVICE_STATE() == MOVING_STATE){
 80019b0:	4bd1      	ldr	r3, [pc, #836]	; (8001cf8 <MotorMotionControl+0x350>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8253 	bne.w	8001e60 <MotorMotionControl+0x4b8>

		  Vx = CALC_VEL(X,speed);
 80019ba:	4bd0      	ldr	r3, [pc, #832]	; (8001cfc <MotorMotionControl+0x354>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019c8:	4bcd      	ldr	r3, [pc, #820]	; (8001d00 <MotorMotionControl+0x358>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fe8e 	bl	80006fc <__aeabi_f2d>
 80019e0:	a3bd      	add	r3, pc, #756	; (adr r3, 8001cd8 <MotorMotionControl+0x330>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fbfb 	bl	80001e0 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	a3bb      	add	r3, pc, #748	; (adr r3, 8001ce0 <MotorMotionControl+0x338>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fbf2 	bl	80001e0 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7fe ff82 	bl	800090c <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4abe      	ldr	r2, [pc, #760]	; (8001d04 <MotorMotionControl+0x35c>)
 8001a0c:	6013      	str	r3, [r2, #0]
		  Vy = CALC_VEL(Y,speed);
 8001a0e:	4bbb      	ldr	r3, [pc, #748]	; (8001cfc <MotorMotionControl+0x354>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a1c:	4bba      	ldr	r3, [pc, #744]	; (8001d08 <MotorMotionControl+0x360>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	ee17 0a90 	vmov	r0, s15
 8001a30:	f7fe fe64 	bl	80006fc <__aeabi_f2d>
 8001a34:	a3a8      	add	r3, pc, #672	; (adr r3, 8001cd8 <MotorMotionControl+0x330>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fbd1 	bl	80001e0 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	a3a6      	add	r3, pc, #664	; (adr r3, 8001ce0 <MotorMotionControl+0x338>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fbc8 	bl	80001e0 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7fe ff58 	bl	800090c <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4aab      	ldr	r2, [pc, #684]	; (8001d0c <MotorMotionControl+0x364>)
 8001a60:	6013      	str	r3, [r2, #0]

		  S1 += ((1/0.030) * ((-length-width)*((10*speed)*Vz) + (Vx) - (Vy)) * (200./(12*PI)));
 8001a62:	4bab      	ldr	r3, [pc, #684]	; (8001d10 <MotorMotionControl+0x368>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fe36 	bl	80006d8 <__aeabi_i2d>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	460d      	mov	r5, r1
 8001a70:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8001d14 <MotorMotionControl+0x36c>
 8001a74:	eef1 7a67 	vneg.f32	s15, s15
 8001a78:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001d14 <MotorMotionControl+0x36c>
 8001a7c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a80:	4b9e      	ldr	r3, [pc, #632]	; (8001cfc <MotorMotionControl+0x354>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a8e:	4ba2      	ldr	r3, [pc, #648]	; (8001d18 <MotorMotionControl+0x370>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9c:	4b99      	ldr	r3, [pc, #612]	; (8001d04 <MotorMotionControl+0x35c>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa6:	4b99      	ldr	r3, [pc, #612]	; (8001d0c <MotorMotionControl+0x364>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab0:	ee17 0a90 	vmov	r0, s15
 8001ab4:	f7fe fe22 	bl	80006fc <__aeabi_f2d>
 8001ab8:	a38b      	add	r3, pc, #556	; (adr r3, 8001ce8 <MotorMotionControl+0x340>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fb8f 	bl	80001e0 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	a389      	add	r3, pc, #548	; (adr r3, 8001cf0 <MotorMotionControl+0x348>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4620      	mov	r0, r4
 8001ada:	4629      	mov	r1, r5
 8001adc:	f7fe fcb0 	bl	8000440 <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7fe fee8 	bl	80008bc <__aeabi_d2iz>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a88      	ldr	r2, [pc, #544]	; (8001d10 <MotorMotionControl+0x368>)
 8001af0:	6013      	str	r3, [r2, #0]
		  S2 += ((1/0.030) * ((+length+width)*((10*speed)*Vz) + (Vx) + (Vy)) * (200./(12*PI)));
 8001af2:	4b8a      	ldr	r3, [pc, #552]	; (8001d1c <MotorMotionControl+0x374>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fdee 	bl	80006d8 <__aeabi_i2d>
 8001afc:	4604      	mov	r4, r0
 8001afe:	460d      	mov	r5, r1
 8001b00:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001d14 <MotorMotionControl+0x36c>
 8001b04:	eddf 7a83 	vldr	s15, [pc, #524]	; 8001d14 <MotorMotionControl+0x36c>
 8001b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <MotorMotionControl+0x354>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b1a:	4b7f      	ldr	r3, [pc, #508]	; (8001d18 <MotorMotionControl+0x370>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b28:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <MotorMotionControl+0x35c>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <MotorMotionControl+0x364>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fddc 	bl	80006fc <__aeabi_f2d>
 8001b44:	a368      	add	r3, pc, #416	; (adr r3, 8001ce8 <MotorMotionControl+0x340>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fb49 	bl	80001e0 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	a366      	add	r3, pc, #408	; (adr r3, 8001cf0 <MotorMotionControl+0x348>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fb40 	bl	80001e0 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4629      	mov	r1, r5
 8001b68:	f7fe fc6a 	bl	8000440 <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe fea2 	bl	80008bc <__aeabi_d2iz>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a68      	ldr	r2, [pc, #416]	; (8001d1c <MotorMotionControl+0x374>)
 8001b7c:	6013      	str	r3, [r2, #0]
		  S3 += ((1/0.030) * ((+length+width)*((10*speed)*Vz) + (Vx) - (Vy)) * (200./(12*PI)));
 8001b7e:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <MotorMotionControl+0x378>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fda8 	bl	80006d8 <__aeabi_i2d>
 8001b88:	4604      	mov	r4, r0
 8001b8a:	460d      	mov	r5, r1
 8001b8c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001d14 <MotorMotionControl+0x36c>
 8001b90:	eddf 7a60 	vldr	s15, [pc, #384]	; 8001d14 <MotorMotionControl+0x36c>
 8001b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b98:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <MotorMotionControl+0x354>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ba2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ba6:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <MotorMotionControl+0x370>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <MotorMotionControl+0x35c>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bbe:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <MotorMotionControl+0x364>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc8:	ee17 0a90 	vmov	r0, s15
 8001bcc:	f7fe fd96 	bl	80006fc <__aeabi_f2d>
 8001bd0:	a345      	add	r3, pc, #276	; (adr r3, 8001ce8 <MotorMotionControl+0x340>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fb03 	bl	80001e0 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a343      	add	r3, pc, #268	; (adr r3, 8001cf0 <MotorMotionControl+0x348>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fafa 	bl	80001e0 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fc24 	bl	8000440 <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7fe fe5c 	bl	80008bc <__aeabi_d2iz>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a46      	ldr	r2, [pc, #280]	; (8001d20 <MotorMotionControl+0x378>)
 8001c08:	6013      	str	r3, [r2, #0]
		  S4 += ((1/0.030) * ((-length-width)*((10*speed)*Vz) + (Vx) + (Vy)) * (200./(12*PI)));
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <MotorMotionControl+0x37c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fd62 	bl	80006d8 <__aeabi_i2d>
 8001c14:	4604      	mov	r4, r0
 8001c16:	460d      	mov	r5, r1
 8001c18:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001d14 <MotorMotionControl+0x36c>
 8001c1c:	eef1 7a67 	vneg.f32	s15, s15
 8001c20:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001d14 <MotorMotionControl+0x36c>
 8001c24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <MotorMotionControl+0x354>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <MotorMotionControl+0x370>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <MotorMotionControl+0x35c>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <MotorMotionControl+0x364>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	ee17 0a90 	vmov	r0, s15
 8001c5c:	f7fe fd4e 	bl	80006fc <__aeabi_f2d>
 8001c60:	a321      	add	r3, pc, #132	; (adr r3, 8001ce8 <MotorMotionControl+0x340>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fabb 	bl	80001e0 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	a31f      	add	r3, pc, #124	; (adr r3, 8001cf0 <MotorMotionControl+0x348>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fab2 	bl	80001e0 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fbdc 	bl	8000440 <__adddf3>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe fe14 	bl	80008bc <__aeabi_d2iz>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <MotorMotionControl+0x37c>)
 8001c98:	6013      	str	r3, [r2, #0]

		  if(GetAbsValue(S1) >= NUM_STEPS){
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MotorMotionControl+0x368>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fcd4 	bl	800164c <GetAbsValue>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001caa:	db4a      	blt.n	8001d42 <MotorMotionControl+0x39a>
			HAL_GPIO_WritePin(STEP_1_GPIO_Port, STEP_1_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2102      	movs	r1, #2
 8001cb0:	481d      	ldr	r0, [pc, #116]	; (8001d28 <MotorMotionControl+0x380>)
 8001cb2:	f002 fb35 	bl	8004320 <HAL_GPIO_WritePin>
			if(S1 < 0){
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MotorMotionControl+0x368>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da36      	bge.n	8001d2c <MotorMotionControl+0x384>
			  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4819      	ldr	r0, [pc, #100]	; (8001d28 <MotorMotionControl+0x380>)
 8001cc4:	f002 fb2c 	bl	8004320 <HAL_GPIO_WritePin>
			  S1 += NUM_STEPS;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MotorMotionControl+0x368>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <MotorMotionControl+0x368>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e035      	b.n	8001d42 <MotorMotionControl+0x39a>
 8001cd6:	bf00      	nop
 8001cd8:	47ae147b 	.word	0x47ae147b
 8001cdc:	3fa47ae1 	.word	0x3fa47ae1
 8001ce0:	1c71c71c 	.word	0x1c71c71c
 8001ce4:	3f9c71c7 	.word	0x3f9c71c7
 8001ce8:	aaaaaaab 	.word	0xaaaaaaab
 8001cec:	4040aaaa 	.word	0x4040aaaa
 8001cf0:	49bff96a 	.word	0x49bff96a
 8001cf4:	4015387e 	.word	0x4015387e
 8001cf8:	20000a60 	.word	0x20000a60
 8001cfc:	20000a1c 	.word	0x20000a1c
 8001d00:	20000a2c 	.word	0x20000a2c
 8001d04:	20000a20 	.word	0x20000a20
 8001d08:	20000a30 	.word	0x20000a30
 8001d0c:	20000a24 	.word	0x20000a24
 8001d10:	20000a3c 	.word	0x20000a3c
 8001d14:	3e333333 	.word	0x3e333333
 8001d18:	20000a28 	.word	0x20000a28
 8001d1c:	20000a40 	.word	0x20000a40
 8001d20:	20000a44 	.word	0x20000a44
 8001d24:	20000a48 	.word	0x20000a48
 8001d28:	40020400 	.word	0x40020400
		  }else{
			  HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2101      	movs	r1, #1
 8001d30:	484d      	ldr	r0, [pc, #308]	; (8001e68 <MotorMotionControl+0x4c0>)
 8001d32:	f002 faf5 	bl	8004320 <HAL_GPIO_WritePin>
			  S1 -=  NUM_STEPS;
 8001d36:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <MotorMotionControl+0x4c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d3e:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <MotorMotionControl+0x4c4>)
 8001d40:	6013      	str	r3, [r2, #0]
		  }
		  }
		  if(GetAbsValue(S2) >= NUM_STEPS){
 8001d42:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <MotorMotionControl+0x4c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc80 	bl	800164c <GetAbsValue>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d52:	db1f      	blt.n	8001d94 <MotorMotionControl+0x3ec>
			HAL_GPIO_WritePin(STEP_2_GPIO_Port, STEP_2_Pin, GPIO_PIN_SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2120      	movs	r1, #32
 8001d58:	4846      	ldr	r0, [pc, #280]	; (8001e74 <MotorMotionControl+0x4cc>)
 8001d5a:	f002 fae1 	bl	8004320 <HAL_GPIO_WritePin>
			if(S2 < 0){
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <MotorMotionControl+0x4c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da0b      	bge.n	8001d7e <MotorMotionControl+0x3d6>
			  HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	2110      	movs	r1, #16
 8001d6a:	4842      	ldr	r0, [pc, #264]	; (8001e74 <MotorMotionControl+0x4cc>)
 8001d6c:	f002 fad8 	bl	8004320 <HAL_GPIO_WritePin>
			  S2 += NUM_STEPS;
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <MotorMotionControl+0x4c8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d78:	4a3d      	ldr	r2, [pc, #244]	; (8001e70 <MotorMotionControl+0x4c8>)
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	e00a      	b.n	8001d94 <MotorMotionControl+0x3ec>
		  }else{
			  HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2110      	movs	r1, #16
 8001d82:	483c      	ldr	r0, [pc, #240]	; (8001e74 <MotorMotionControl+0x4cc>)
 8001d84:	f002 facc 	bl	8004320 <HAL_GPIO_WritePin>
			  S2 -=  NUM_STEPS;
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <MotorMotionControl+0x4c8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d90:	4a37      	ldr	r2, [pc, #220]	; (8001e70 <MotorMotionControl+0x4c8>)
 8001d92:	6013      	str	r3, [r2, #0]
		  }
		  }
		  if(GetAbsValue(S3) >= NUM_STEPS){
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <MotorMotionControl+0x4d0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fc57 	bl	800164c <GetAbsValue>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da4:	db1f      	blt.n	8001de6 <MotorMotionControl+0x43e>
			HAL_GPIO_WritePin(STEP_3_GPIO_Port, STEP_3_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2102      	movs	r1, #2
 8001daa:	4832      	ldr	r0, [pc, #200]	; (8001e74 <MotorMotionControl+0x4cc>)
 8001dac:	f002 fab8 	bl	8004320 <HAL_GPIO_WritePin>
			if(S3 < 0){
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <MotorMotionControl+0x4d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da0b      	bge.n	8001dd0 <MotorMotionControl+0x428>
			  HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	482f      	ldr	r0, [pc, #188]	; (8001e7c <MotorMotionControl+0x4d4>)
 8001dbe:	f002 faaf 	bl	8004320 <HAL_GPIO_WritePin>
			  S3 += NUM_STEPS;
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <MotorMotionControl+0x4d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001dca:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <MotorMotionControl+0x4d0>)
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00a      	b.n	8001de6 <MotorMotionControl+0x43e>
		  }else{
			  HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2140      	movs	r1, #64	; 0x40
 8001dd4:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MotorMotionControl+0x4d4>)
 8001dd6:	f002 faa3 	bl	8004320 <HAL_GPIO_WritePin>
			  S3 -=  NUM_STEPS;
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <MotorMotionControl+0x4d0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001de2:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <MotorMotionControl+0x4d0>)
 8001de4:	6013      	str	r3, [r2, #0]
		  }
		  }
		  if(GetAbsValue(S4) >= NUM_STEPS){
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <MotorMotionControl+0x4d8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fc2e 	bl	800164c <GetAbsValue>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df6:	db1f      	blt.n	8001e38 <MotorMotionControl+0x490>
			HAL_GPIO_WritePin(STEP_4_GPIO_Port, STEP_4_Pin, GPIO_PIN_SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	481f      	ldr	r0, [pc, #124]	; (8001e7c <MotorMotionControl+0x4d4>)
 8001dfe:	f002 fa8f 	bl	8004320 <HAL_GPIO_WritePin>
			if(S4 < 0){
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <MotorMotionControl+0x4d8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da0b      	bge.n	8001e22 <MotorMotionControl+0x47a>
			  HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	481b      	ldr	r0, [pc, #108]	; (8001e7c <MotorMotionControl+0x4d4>)
 8001e10:	f002 fa86 	bl	8004320 <HAL_GPIO_WritePin>
			  S4 += NUM_STEPS;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MotorMotionControl+0x4d8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001e1c:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MotorMotionControl+0x4d8>)
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e00a      	b.n	8001e38 <MotorMotionControl+0x490>
			}else{
			  HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	2110      	movs	r1, #16
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <MotorMotionControl+0x4d4>)
 8001e28:	f002 fa7a 	bl	8004320 <HAL_GPIO_WritePin>
			  S4 -=  NUM_STEPS;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MotorMotionControl+0x4d8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MotorMotionControl+0x4d8>)
 8001e36:	6013      	str	r3, [r2, #0]
			}
		  }

		  HAL_GPIO_WritePin(STEP_1_GPIO_Port, STEP_1_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <MotorMotionControl+0x4c0>)
 8001e3e:	f002 fa6f 	bl	8004320 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(STEP_2_GPIO_Port, STEP_2_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2120      	movs	r1, #32
 8001e46:	480b      	ldr	r0, [pc, #44]	; (8001e74 <MotorMotionControl+0x4cc>)
 8001e48:	f002 fa6a 	bl	8004320 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(STEP_3_GPIO_Port, STEP_3_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <MotorMotionControl+0x4cc>)
 8001e52:	f002 fa65 	bl	8004320 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(STEP_4_GPIO_Port, STEP_4_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2120      	movs	r1, #32
 8001e5a:	4808      	ldr	r0, [pc, #32]	; (8001e7c <MotorMotionControl+0x4d4>)
 8001e5c:	f002 fa60 	bl	8004320 <HAL_GPIO_WritePin>
	  }
	  osDelay(1);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f005 f8a8 	bl	8006fb6 <osDelay>
	  if(GET_DEVICE_STATE() == MOVING_STATE){
 8001e66:	e5a3      	b.n	80019b0 <MotorMotionControl+0x8>
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	20000a3c 	.word	0x20000a3c
 8001e70:	20000a40 	.word	0x20000a40
 8001e74:	40020800 	.word	0x40020800
 8001e78:	20000a44 	.word	0x20000a44
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	20000a48 	.word	0x20000a48

08001e84 <GetTOFDistance>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetTOFDistance */
void GetTOFDistance(void const * argument)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetTOFDistance */
  /* Infinite loop */
  for(;;)
  {
	  if(GET_DEVICE_STATE() == MOVING_STATE){
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <GetTOFDistance+0x98>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d13f      	bne.n	8001f14 <GetTOFDistance+0x90>
		  distance_1 = tofReadDistance(I2C_ADDR_TOF1);
 8001e94:	2040      	movs	r0, #64	; 0x40
 8001e96:	f001 fa07 	bl	80032a8 <tofReadDistance>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <GetTOFDistance+0x9c>)
 8001e9e:	6013      	str	r3, [r2, #0]
		  distance_2 = tofReadDistance(I2C_ADDR_TOF2);
 8001ea0:	2050      	movs	r0, #80	; 0x50
 8001ea2:	f001 fa01 	bl	80032a8 <tofReadDistance>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <GetTOFDistance+0xa0>)
 8001eaa:	6013      	str	r3, [r2, #0]
		  distance_3 = tofReadDistance(I2C_ADDR_TOF3);
 8001eac:	2060      	movs	r0, #96	; 0x60
 8001eae:	f001 f9fb 	bl	80032a8 <tofReadDistance>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <GetTOFDistance+0xa4>)
 8001eb6:	6013      	str	r3, [r2, #0]
		  distance_4 = tofReadDistance(I2C_ADDR_TOF4);
 8001eb8:	2070      	movs	r0, #112	; 0x70
 8001eba:	f001 f9f5 	bl	80032a8 <tofReadDistance>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <GetTOFDistance+0xa8>)
 8001ec2:	6013      	str	r3, [r2, #0]

		  block_left = (distance_1 < MIN_DISTANCE_mm) ? 1 : 0;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <GetTOFDistance+0x9c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2bc7      	cmp	r3, #199	; 0xc7
 8001eca:	bfd4      	ite	le
 8001ecc:	2301      	movle	r3, #1
 8001ece:	2300      	movgt	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <GetTOFDistance+0xac>)
 8001ed6:	701a      	strb	r2, [r3, #0]
		  block_right = (distance_2 < MIN_DISTANCE_mm) ? 1 : 0;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <GetTOFDistance+0xa0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2bc7      	cmp	r3, #199	; 0xc7
 8001ede:	bfd4      	ite	le
 8001ee0:	2301      	movle	r3, #1
 8001ee2:	2300      	movgt	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <GetTOFDistance+0xb0>)
 8001eea:	701a      	strb	r2, [r3, #0]
		  block_backward = (distance_3 < MIN_DISTANCE_mm) ? 1 : 0;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <GetTOFDistance+0xa4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2bc7      	cmp	r3, #199	; 0xc7
 8001ef2:	bfd4      	ite	le
 8001ef4:	2301      	movle	r3, #1
 8001ef6:	2300      	movgt	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <GetTOFDistance+0xb4>)
 8001efe:	701a      	strb	r2, [r3, #0]
		  block_forward = (distance_4 < MIN_DISTANCE_mm) ? 1 : 0;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <GetTOFDistance+0xa8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2bc7      	cmp	r3, #199	; 0xc7
 8001f06:	bfd4      	ite	le
 8001f08:	2301      	movle	r3, #1
 8001f0a:	2300      	movgt	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <GetTOFDistance+0xb8>)
 8001f12:	701a      	strb	r2, [r3, #0]

	  }
	  osDelay(250);
 8001f14:	20fa      	movs	r0, #250	; 0xfa
 8001f16:	f005 f84e 	bl	8006fb6 <osDelay>
	  if(GET_DEVICE_STATE() == MOVING_STATE){
 8001f1a:	e7b7      	b.n	8001e8c <GetTOFDistance+0x8>
 8001f1c:	20000a60 	.word	0x20000a60
 8001f20:	20000a4c 	.word	0x20000a4c
 8001f24:	20000a50 	.word	0x20000a50
 8001f28:	20000a54 	.word	0x20000a54
 8001f2c:	20000a58 	.word	0x20000a58
 8001f30:	20000a6b 	.word	0x20000a6b
 8001f34:	20000a6a 	.word	0x20000a6a
 8001f38:	20000a6d 	.word	0x20000a6d
 8001f3c:	20000a6c 	.word	0x20000a6c

08001f40 <LifterMotionControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LifterMotionControl */
void LifterMotionControl(void const * argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LifterMotionControl */
  /* Infinite loop */
  for(;;)
  {
	  if(GET_DEVICE_STATE() == MOVING_STATE){
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <LifterMotionControl+0x3c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d110      	bne.n	8001f72 <LifterMotionControl+0x32>
		  if(GET_LIFTER_MOTOR_DIR() != STOP_DIR){
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <LifterMotionControl+0x40>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d00c      	beq.n	8001f72 <LifterMotionControl+0x32>
			  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GET_LIFTER_MOTOR_DIR());
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <LifterMotionControl+0x40>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f62:	4808      	ldr	r0, [pc, #32]	; (8001f84 <LifterMotionControl+0x44>)
 8001f64:	f002 f9dc 	bl	8004320 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(STEP_5_GPIO_Port, STEP_5_Pin);
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <LifterMotionControl+0x44>)
 8001f6e:	f002 f9f0 	bl	8004352 <HAL_GPIO_TogglePin>
		  }
	  }
	  osDelay(1);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f005 f81f 	bl	8006fb6 <osDelay>
	  if(GET_DEVICE_STATE() == MOVING_STATE){
 8001f78:	e7e6      	b.n	8001f48 <LifterMotionControl+0x8>
 8001f7a:	bf00      	nop
 8001f7c:	20000a60 	.word	0x20000a60
 8001f80:	20000000 	.word	0x20000000
 8001f84:	40020000 	.word	0x40020000

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x8>
	...

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_MspInit+0x54>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f001 ff3c 	bl	8003e56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_ADC_MspInit+0x7c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d127      	bne.n	800205e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_ADC_MspInit+0x80>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_ADC_MspInit+0x80>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LEVEL_VBAT_Pin;
 8002046:	2302      	movs	r3, #2
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204a:	2303      	movs	r3, #3
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEVEL_VBAT_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_ADC_MspInit+0x84>)
 800205a:	f001 ffc5 	bl	8003fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40012000 	.word	0x40012000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_I2C_MspInit+0x84>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12b      	bne.n	80020ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_I2C_MspInit+0x88>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b2:	23c0      	movs	r3, #192	; 0xc0
 80020b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b6:	2312      	movs	r3, #18
 80020b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c2:	2304      	movs	r3, #4
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <HAL_I2C_MspInit+0x8c>)
 80020ce:	f001 ff8b 	bl	8003fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_I2C_MspInit+0x88>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40005400 	.word	0x40005400
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400

08002104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3a      	ldr	r2, [pc, #232]	; (800220c <HAL_UART_MspInit+0x108>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d135      	bne.n	8002192 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_UART_MspInit+0x10c>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_UART_MspInit+0x10c>)
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_UART_MspInit+0x10c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <HAL_UART_MspInit+0x10c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a31      	ldr	r2, [pc, #196]	; (8002210 <HAL_UART_MspInit+0x10c>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <HAL_UART_MspInit+0x10c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002170:	2307      	movs	r3, #7
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4826      	ldr	r0, [pc, #152]	; (8002214 <HAL_UART_MspInit+0x110>)
 800217c:	f001 ff34 	bl	8003fe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2105      	movs	r1, #5
 8002184:	2025      	movs	r0, #37	; 0x25
 8002186:	f001 fe66 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800218a:	2025      	movs	r0, #37	; 0x25
 800218c:	f001 fe7f 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002190:	e038      	b.n	8002204 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_UART_MspInit+0x114>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d133      	bne.n	8002204 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_UART_MspInit+0x10c>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_UART_MspInit+0x10c>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_UART_MspInit+0x10c>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_UART_MspInit+0x10c>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_UART_MspInit+0x10c>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6313      	str	r3, [r2, #48]	; 0x30
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_UART_MspInit+0x10c>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021d4:	230c      	movs	r3, #12
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021e4:	2307      	movs	r3, #7
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <HAL_UART_MspInit+0x110>)
 80021f0:	f001 fefa 	bl	8003fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2105      	movs	r1, #5
 80021f8:	2026      	movs	r0, #38	; 0x26
 80021fa:	f001 fe2c 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021fe:	2026      	movs	r0, #38	; 0x26
 8002200:	f001 fe45 	bl	8003e8e <HAL_NVIC_EnableIRQ>
}
 8002204:	bf00      	nop
 8002206:	3730      	adds	r7, #48	; 0x30
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40011000 	.word	0x40011000
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000
 8002218:	40004400 	.word	0x40004400

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f001 f902 	bl	8003454 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002250:	f006 fb32 	bl	80088b8 <xTaskGetSchedulerState>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800225a:	f007 f925 	bl	80094a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}

08002262 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH1_Pin);
 8002266:	2004      	movs	r0, #4
 8002268:	f002 f88e 	bl	8004388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH2_Pin);
 8002274:	2008      	movs	r0, #8
 8002276:	f002 f887 	bl	8004388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART1_IRQHandler+0x10>)
 8002286:	f003 fec3 	bl	8006010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000980 	.word	0x20000980

08002294 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <USART2_IRQHandler+0x10>)
 800229a:	f003 feb9 	bl	8006010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200009c4 	.word	0x200009c4

080022a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e00a      	b.n	80022d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ba:	f3af 8000 	nop.w
 80022be:	4601      	mov	r1, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	60ba      	str	r2, [r7, #8]
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf0      	blt.n	80022ba <_read+0x12>
	}

return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e009      	b.n	8002308 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	60ba      	str	r2, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	dbf1      	blt.n	80022f4 <_write+0x12>
	}
	return len;
 8002310:	687b      	ldr	r3, [r7, #4]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_close>:

int _close(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	return -1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002342:	605a      	str	r2, [r3, #4]
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_isatty>:

int _isatty(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f007 faf2 	bl	800999c <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20018000 	.word	0x20018000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000a70 	.word	0x20000a70
 80023ec:	20004920 	.word	0x20004920

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit( int bLongRange, uint8_t devAddr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
	return initSensor(bLongRange,devAddr);
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fde9 	bl	8002ffc <initSensor>
 800242a:	4603      	mov	r3, r0
} /* tofInit() */
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static uint16_t readReg16(uint8_t regAddr, uint8_t devAddr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	71bb      	strb	r3, [r7, #6]
	uint8_t datatmp[2];
	uint16_t data; //uint16_t == unsigned short

	//1. Write register address in VL53L0X
	HAL_I2C_Master_Transmit(&hi2c1,devAddr,&regAddr,1,1000);
 8002444:	79bb      	ldrb	r3, [r7, #6]
 8002446:	b299      	uxth	r1, r3
 8002448:	1dfa      	adds	r2, r7, #7
 800244a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <readReg16+0x58>)
 8002454:	f002 f8f4 	bl	8004640 <HAL_I2C_Master_Transmit>
	//2. Read data from 2 byte register
	HAL_I2C_Master_Receive(&hi2c1,devAddr+1,datatmp,2,1000);
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	b29b      	uxth	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	b299      	uxth	r1, r3
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2302      	movs	r3, #2
 800246c:	4807      	ldr	r0, [pc, #28]	; (800248c <readReg16+0x58>)
 800246e:	f002 f9e5 	bl	800483c <HAL_I2C_Master_Receive>

	data = (datatmp[0]<<8) + datatmp[1];
 8002472:	7b3b      	ldrb	r3, [r7, #12]
 8002474:	b29b      	uxth	r3, r3
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b29a      	uxth	r2, r3
 800247a:	7b7b      	ldrb	r3, [r7, #13]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4413      	add	r3, r2
 8002480:	81fb      	strh	r3, [r7, #14]

	return data;
 8002482:	89fb      	ldrh	r3, [r7, #14]

} /* readReg16() */
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000092c 	.word	0x2000092c

08002490 <readReg>:

//
// Read a single register value from I2C device
//
static uint8_t readReg(uint8_t regAddr, uint8_t devAddr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
	uint8_t data;  //unsigned char == uint8_t

	//1. Write register address in VL53L0X
	HAL_I2C_Master_Transmit(&hi2c1,devAddr,&regAddr,1,1000);
 80024a0:	79bb      	ldrb	r3, [r7, #6]
 80024a2:	b299      	uxth	r1, r3
 80024a4:	1dfa      	adds	r2, r7, #7
 80024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2301      	movs	r3, #1
 80024ae:	480a      	ldr	r0, [pc, #40]	; (80024d8 <readReg+0x48>)
 80024b0:	f002 f8c6 	bl	8004640 <HAL_I2C_Master_Transmit>
	//2. Read data from 1 byte register
	HAL_I2C_Master_Receive(&hi2c1,devAddr+1,&data,1,1000);
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	b299      	uxth	r1, r3
 80024bc:	f107 020f 	add.w	r2, r7, #15
 80024c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2301      	movs	r3, #1
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <readReg+0x48>)
 80024ca:	f002 f9b7 	bl	800483c <HAL_I2C_Master_Receive>

	return data;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000092c 	.word	0x2000092c

080024dc <readMulti>:

static void readMulti(uint8_t regAddr, uint8_t *pBuf, int size, uint8_t devAddr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	4613      	mov	r3, r2
 80024ee:	73bb      	strb	r3, [r7, #14]
    //1. Write index of register
	HAL_I2C_Master_Transmit(&hi2c1,devAddr,&regAddr,1,1000);
 80024f0:	7bbb      	ldrb	r3, [r7, #14]
 80024f2:	b299      	uxth	r1, r3
 80024f4:	f107 020f 	add.w	r2, r7, #15
 80024f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2301      	movs	r3, #1
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <readMulti+0x4c>)
 8002502:	f002 f89d 	bl	8004640 <HAL_I2C_Master_Transmit>

	//2. Read size bytes
	HAL_I2C_Master_Receive(&hi2c1,devAddr+1,pBuf,size,1000);
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	b29b      	uxth	r3, r3
 800250a:	3301      	adds	r3, #1
 800250c:	b299      	uxth	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	b29b      	uxth	r3, r3
 8002512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002516:	9200      	str	r2, [sp, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <readMulti+0x4c>)
 800251c:	f002 f98e 	bl	800483c <HAL_I2C_Master_Receive>

} /* readMulti() */
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000092c 	.word	0x2000092c

0800252c <writeMulti>:

static void writeMulti(uint8_t regAddr, uint8_t *pBuf, int size, uint8_t devAddr)
{
 800252c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002530:	b08b      	sub	sp, #44	; 0x2c
 8002532:	af02      	add	r7, sp, #8
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	4613      	mov	r3, r2
 8002540:	73bb      	strb	r3, [r7, #14]
 8002542:	466b      	mov	r3, sp
 8002544:	461e      	mov	r6, r3
	uint8_t buf[size + 1];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1c59      	adds	r1, r3, #1
 800254a:	1e4b      	subs	r3, r1, #1
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	460a      	mov	r2, r1
 8002550:	2300      	movs	r3, #0
 8002552:	4690      	mov	r8, r2
 8002554:	4699      	mov	r9, r3
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800256a:	460a      	mov	r2, r1
 800256c:	2300      	movs	r3, #0
 800256e:	4614      	mov	r4, r2
 8002570:	461d      	mov	r5, r3
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	00eb      	lsls	r3, r5, #3
 800257c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002580:	00e2      	lsls	r2, r4, #3
 8002582:	460b      	mov	r3, r1
 8002584:	3307      	adds	r3, #7
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	ebad 0d03 	sub.w	sp, sp, r3
 800258e:	ab02      	add	r3, sp, #8
 8002590:	3300      	adds	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
	buf[0] = regAddr;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<size+1;i++){
 800259a:	2301      	movs	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e00b      	b.n	80025b8 <writeMulti+0x8c>
		buf[i] = *(pBuf++);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	7819      	ldrb	r1, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	460a      	mov	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<size+1;i++){
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	daef      	bge.n	80025a0 <writeMulti+0x74>
	}
	HAL_I2C_Master_Transmit(&hi2c1,devAddr,buf,size+1,1000);
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	b299      	uxth	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025d0:	9200      	str	r2, [sp, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <writeMulti+0xbc>)
 80025d6:	f002 f833 	bl	8004640 <HAL_I2C_Master_Transmit>
 80025da:	46b5      	mov	sp, r6

} /* writeMulti() */
 80025dc:	bf00      	nop
 80025de:	3724      	adds	r7, #36	; 0x24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025e6:	bf00      	nop
 80025e8:	2000092c 	.word	0x2000092c

080025ec <writeReg16>:
//
// Write a 16-bit value to a register
//
void writeReg16(uint8_t regAddr, uint16_t data, uint8_t devAddr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	460b      	mov	r3, r1
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71bb      	strb	r3, [r7, #6]
	uint8_t datatmp[4];

	datatmp[0] = regAddr;
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	733b      	strb	r3, [r7, #12]
	datatmp[1] = (uint8_t)(data >> 8); // MSB first
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	b29b      	uxth	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	737b      	strb	r3, [r7, #13]
	datatmp[2] = (uint8_t)data;
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,devAddr,datatmp,3,1000);
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	b299      	uxth	r1, r3
 8002616:	f107 020c 	add.w	r2, r7, #12
 800261a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2303      	movs	r3, #3
 8002622:	4803      	ldr	r0, [pc, #12]	; (8002630 <writeReg16+0x44>)
 8002624:	f002 f80c 	bl	8004640 <HAL_I2C_Master_Transmit>

} /* writeReg16() */
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000092c 	.word	0x2000092c

08002634 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t regAddr, uint8_t data, uint8_t devAddr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af02      	add	r7, sp, #8
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	460b      	mov	r3, r1
 8002640:	71bb      	strb	r3, [r7, #6]
 8002642:	4613      	mov	r3, r2
 8002644:	717b      	strb	r3, [r7, #5]
	uint8_t datatmp[2];

	datatmp[0] = regAddr;
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	733b      	strb	r3, [r7, #12]
	datatmp[1] = data;
 800264a:	79bb      	ldrb	r3, [r7, #6]
 800264c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1,devAddr,datatmp,2,1000);
 800264e:	797b      	ldrb	r3, [r7, #5]
 8002650:	b299      	uxth	r1, r3
 8002652:	f107 020c 	add.w	r2, r7, #12
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2302      	movs	r3, #2
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <writeReg+0x38>)
 8002660:	f001 ffee 	bl	8004640 <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000092c 	.word	0x2000092c

08002670 <writeRegList>:
// Write a list of register/value pairs to the I2C device
//


void writeRegList(uint8_t *dataList, uint8_t devAddr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
	uint8_t pcount = *dataList++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	73fb      	strb	r3, [r7, #15]

	while(pcount){
 8002686:	e00f      	b.n	80026a8 <writeRegList+0x38>
		HAL_I2C_Master_Transmit(&hi2c1,devAddr,dataList,2,1000);
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	b299      	uxth	r1, r3
 800268c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2302      	movs	r3, #2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4808      	ldr	r0, [pc, #32]	; (80026b8 <writeRegList+0x48>)
 8002698:	f001 ffd2 	bl	8004640 <HAL_I2C_Master_Transmit>
		dataList += 2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3302      	adds	r3, #2
 80026a0:	607b      	str	r3, [r7, #4]
		pcount--;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
	while(pcount){
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ec      	bne.n	8002688 <writeRegList+0x18>
	}
} /* writeRegList() */
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000092c 	.word	0x2000092c

080026bc <SetDevAddr>:
0x35,0x44, 0xff,0x01, 0x31,0x04, 0x4b,0x09, 0x4c,0x05, 0x4d,0x04, 0xff,0x00,
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

void SetDevAddr(uint8_t new_addr, uint8_t last_addr){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	460a      	mov	r2, r1
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71bb      	strb	r3, [r7, #6]

	/*VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
			DeviceAddress / 2);*/
	writeReg(I2C_SLAVE_DEVICE_ADDRESS,new_addr / 2,last_addr);
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	79ba      	ldrb	r2, [r7, #6]
 80026d4:	4619      	mov	r1, r3
 80026d6:	208a      	movs	r0, #138	; 0x8a
 80026d8:	f7ff ffac 	bl	8002634 <writeReg>
		4. Initialize sensor #1 with SetDevAddr. Pick any number but 0x29 and it must be under 0x7F. Going with 0x30 to 0x3F is probably OK.
		5. Keep sensor #1 awake, and now bring sensor #2 out of reset by setting its XSHUT pin high.
		6 .Initialize sensor #2 with lox.begin(new_devAddress) Pick any number but 0x29 and whatever you set the first sensor to
		7. Repeat for each sensor, turning each one on, setting a unique address
	 */
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <getSpadInfo>:


static int getSpadInfo(unsigned char *pCount, unsigned char *pTypeIsAperture, uint8_t devAddr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	71fb      	strb	r3, [r7, #7]
int iTimeout;
unsigned char ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0,devAddr);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4619      	mov	r1, r3
 80026f6:	483b      	ldr	r0, [pc, #236]	; (80027e4 <getSpadInfo+0x100>)
 80026f8:	f7ff ffba 	bl	8002670 <writeRegList>
  writeReg(0x83, readReg(0x83,devAddr) | 0x04, devAddr);
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	4619      	mov	r1, r3
 8002700:	2083      	movs	r0, #131	; 0x83
 8002702:	f7ff fec5 	bl	8002490 <readReg>
 8002706:	4603      	mov	r3, r0
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	b2db      	uxtb	r3, r3
 800270e:	79fa      	ldrb	r2, [r7, #7]
 8002710:	4619      	mov	r1, r3
 8002712:	2083      	movs	r0, #131	; 0x83
 8002714:	f7ff ff8e 	bl	8002634 <writeReg>
  writeRegList(ucSPAD1,devAddr);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	4619      	mov	r1, r3
 800271c:	4832      	ldr	r0, [pc, #200]	; (80027e8 <getSpadInfo+0x104>)
 800271e:	f7ff ffa7 	bl	8002670 <writeRegList>
  iTimeout = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  while(iTimeout < MAX_TIMEOUT)
 8002726:	e00d      	b.n	8002744 <getSpadInfo+0x60>
  {
    if (readReg(0x83,devAddr) != 0x00) break;
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	4619      	mov	r1, r3
 800272c:	2083      	movs	r0, #131	; 0x83
 800272e:	f7ff feaf 	bl	8002490 <readReg>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <getSpadInfo+0x68>
    iTimeout++;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3301      	adds	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
    HAL_Delay(5);
 800273e:	2005      	movs	r0, #5
 8002740:	f000 fea8 	bl	8003494 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b31      	cmp	r3, #49	; 0x31
 8002748:	ddee      	ble.n	8002728 <getSpadInfo+0x44>
 800274a:	e000      	b.n	800274e <getSpadInfo+0x6a>
    if (readReg(0x83,devAddr) != 0x00) break;
 800274c:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b32      	cmp	r3, #50	; 0x32
 8002752:	d109      	bne.n	8002768 <getSpadInfo+0x84>
  {
    fprintf(stderr, "Timeout while waiting for SPAD info\n");
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <getSpadInfo+0x108>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	2101      	movs	r1, #1
 800275e:	4824      	ldr	r0, [pc, #144]	; (80027f0 <getSpadInfo+0x10c>)
 8002760:	f007 fa78 	bl	8009c54 <fwrite>
    return 0;
 8002764:	2300      	movs	r3, #0
 8002766:	e038      	b.n	80027da <getSpadInfo+0xf6>
  }
  writeReg(0x83,0x01,devAddr);
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	461a      	mov	r2, r3
 800276c:	2101      	movs	r1, #1
 800276e:	2083      	movs	r0, #131	; 0x83
 8002770:	f7ff ff60 	bl	8002634 <writeReg>
  ucTemp = readReg(0x92,devAddr);
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4619      	mov	r1, r3
 8002778:	2092      	movs	r0, #146	; 0x92
 800277a:	f7ff fe89 	bl	8002490 <readReg>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]
  *pCount = (ucTemp & 0x7f);
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00,devAddr);
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	461a      	mov	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	2081      	movs	r0, #129	; 0x81
 80027a2:	f7ff ff47 	bl	8002634 <writeReg>
  writeReg(0xff,0x06,devAddr);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	461a      	mov	r2, r3
 80027aa:	2106      	movs	r1, #6
 80027ac:	20ff      	movs	r0, #255	; 0xff
 80027ae:	f7ff ff41 	bl	8002634 <writeReg>
  writeReg(0x83, readReg(0x83,devAddr) & ~0x04, devAddr);
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4619      	mov	r1, r3
 80027b6:	2083      	movs	r0, #131	; 0x83
 80027b8:	f7ff fe6a 	bl	8002490 <readReg>
 80027bc:	4603      	mov	r3, r0
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	79fa      	ldrb	r2, [r7, #7]
 80027c6:	4619      	mov	r1, r3
 80027c8:	2083      	movs	r0, #131	; 0x83
 80027ca:	f7ff ff33 	bl	8002634 <writeReg>
  writeRegList(ucSPAD2,devAddr);
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4619      	mov	r1, r3
 80027d2:	4808      	ldr	r0, [pc, #32]	; (80027f4 <getSpadInfo+0x110>)
 80027d4:	f7ff ff4c 	bl	8002670 <writeRegList>

  return 1;
 80027d8:	2301      	movs	r3, #1
} /* getSpadInfo() */
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000001c 	.word	0x2000001c
 80027e8:	20000028 	.word	0x20000028
 80027ec:	200000fc 	.word	0x200000fc
 80027f0:	0800a578 	.word	0x0800a578
 80027f4:	20000034 	.word	0x20000034

080027f8 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	0a12      	lsrs	r2, r2, #8
 800280a:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 800280c:	4093      	lsls	r3, r2
 800280e:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002810:	3301      	adds	r3, #1
 8002812:	b29b      	uxth	r3, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	460a      	mov	r2, r1
 800282a:	80fb      	strh	r3, [r7, #6]
 800282c:	4613      	mov	r3, r2
 800282e:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002830:	797b      	ldrb	r3, [r7, #5]
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <timeoutMclksToMicroseconds+0x48>)
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <timeoutMclksToMicroseconds+0x4c>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	fb03 f202 	mul.w	r2, r3, r2
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	4a05      	ldr	r2, [pc, #20]	; (800286c <timeoutMclksToMicroseconds+0x4c>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	099b      	lsrs	r3, r3, #6
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	003a2f00 	.word	0x003a2f00
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <timeoutMicrosecondsToMclks+0x44>)
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002888:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <timeoutMicrosecondsToMclks+0x48>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002898:	fb03 f202 	mul.w	r2, r3, r2
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	441a      	add	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	003a2f00 	.word	0x003a2f00
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d018      	beq.n	8002906 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80028da:	e005      	b.n	80028e8 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	3301      	adds	r3, #1
 80028e6:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f4      	bne.n	80028dc <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	e000      	b.n	8002908 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts, uint8_t devAddr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	4613      	mov	r3, r2
 8002922:	71bb      	strb	r3, [r7, #6]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD,devAddr) +1) << 1);
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	4619      	mov	r1, r3
 8002928:	2050      	movs	r0, #80	; 0x50
 800292a:	f7ff fdb1 	bl	8002490 <readReg>
 800292e:	4603      	mov	r3, r0
 8002930:	b29b      	uxth	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	b29b      	uxth	r3, r3
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP,devAddr) + 1;
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	4619      	mov	r1, r3
 8002942:	2046      	movs	r0, #70	; 0x46
 8002944:	f7ff fda4 	bl	8002490 <readReg>
 8002948:	4603      	mov	r3, r0
 800294a:	b29b      	uxth	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7ff ff5d 	bl	8002820 <timeoutMclksToMicroseconds>
 8002966:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,devAddr));
 800296c:	79bb      	ldrb	r3, [r7, #6]
 800296e:	4619      	mov	r1, r3
 8002970:	2051      	movs	r0, #81	; 0x51
 8002972:	f7ff fd5f 	bl	8002434 <readReg16>
 8002976:	4603      	mov	r3, r0
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff3d 	bl	80027f8 <decodeTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f7ff ff44 	bl	8002820 <timeoutMclksToMicroseconds>
 8002998:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD,devAddr) +1) << 1);
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	4619      	mov	r1, r3
 80029a2:	2070      	movs	r0, #112	; 0x70
 80029a4:	f7ff fd74 	bl	8002490 <readReg>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,devAddr));
 80029b8:	79bb      	ldrb	r3, [r7, #6]
 80029ba:	4619      	mov	r1, r3
 80029bc:	2071      	movs	r0, #113	; 0x71
 80029be:	f7ff fd39 	bl	8002434 <readReg16>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff17 	bl	80027f8 <decodeTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <getSequenceStepTimeouts+0xd8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	891a      	ldrh	r2, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	88db      	ldrh	r3, [r3, #6]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7ff ff11 	bl	8002820 <timeoutMclksToMicroseconds>
 80029fe:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks, uint8_t devAddr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
 8002a16:	460b      	mov	r3, r1
 8002a18:	71bb      	strb	r3, [r7, #6]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	717b      	strb	r3, [r7, #5]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8002a1e:	79bb      	ldrb	r3, [r7, #6]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG,devAddr);
 8002a2a:	797b      	ldrb	r3, [r7, #5]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff fd2e 	bl	8002490 <readReg>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts,devAddr);
 8002a3a:	797a      	ldrb	r2, [r7, #5]
 8002a3c:	f107 010c 	add.w	r1, r7, #12
 8002a40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff65 	bl	8002914 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d16b      	bne.n	8002b28 <setVcselPulsePeriod+0x11c>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8002a50:	79bb      	ldrb	r3, [r7, #6]
 8002a52:	3b0c      	subs	r3, #12
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d82d      	bhi.n	8002ab4 <setVcselPulsePeriod+0xa8>
 8002a58:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <setVcselPulsePeriod+0x54>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a7d 	.word	0x08002a7d
 8002a64:	08002ab5 	.word	0x08002ab5
 8002a68:	08002a8b 	.word	0x08002a8b
 8002a6c:	08002ab5 	.word	0x08002ab5
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	08002ab5 	.word	0x08002ab5
 8002a78:	08002aa7 	.word	0x08002aa7
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18,devAddr);
 8002a7c:	797b      	ldrb	r3, [r7, #5]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2118      	movs	r1, #24
 8002a82:	2057      	movs	r0, #87	; 0x57
 8002a84:	f7ff fdd6 	bl	8002634 <writeReg>
        break;
 8002a88:	e016      	b.n	8002ab8 <setVcselPulsePeriod+0xac>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30,devAddr);
 8002a8a:	797b      	ldrb	r3, [r7, #5]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2130      	movs	r1, #48	; 0x30
 8002a90:	2057      	movs	r0, #87	; 0x57
 8002a92:	f7ff fdcf 	bl	8002634 <writeReg>
        break;
 8002a96:	e00f      	b.n	8002ab8 <setVcselPulsePeriod+0xac>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40,devAddr);
 8002a98:	797b      	ldrb	r3, [r7, #5]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	2057      	movs	r0, #87	; 0x57
 8002aa0:	f7ff fdc8 	bl	8002634 <writeReg>
        break;
 8002aa4:	e008      	b.n	8002ab8 <setVcselPulsePeriod+0xac>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50,devAddr);
 8002aa6:	797b      	ldrb	r3, [r7, #5]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2150      	movs	r1, #80	; 0x50
 8002aac:	2057      	movs	r0, #87	; 0x57
 8002aae:	f7ff fdc1 	bl	8002634 <writeReg>
        break;
 8002ab2:	e001      	b.n	8002ab8 <setVcselPulsePeriod+0xac>

      default:
        // invalid period
        return 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e148      	b.n	8002d4a <setVcselPulsePeriod+0x33e>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08,devAddr);
 8002ab8:	797b      	ldrb	r3, [r7, #5]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2108      	movs	r1, #8
 8002abe:	2056      	movs	r0, #86	; 0x56
 8002ac0:	f7ff fdb8 	bl	8002634 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg,devAddr);
 8002ac4:	797a      	ldrb	r2, [r7, #5]
 8002ac6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aca:	4619      	mov	r1, r3
 8002acc:	2050      	movs	r0, #80	; 0x50
 8002ace:	f7ff fdb1 	bl	8002634 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	79ba      	ldrb	r2, [r7, #6]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fec9 	bl	8002870 <timeoutMicrosecondsToMclks>
 8002ade:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8002ae0:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002ae2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fee9 	bl	80028bc <encodeTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4619      	mov	r1, r3
 8002aee:	797b      	ldrb	r3, [r7, #5]
 8002af0:	461a      	mov	r2, r3
 8002af2:	2051      	movs	r0, #81	; 0x51
 8002af4:	f7ff fd7a 	bl	80025ec <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	79ba      	ldrb	r2, [r7, #6]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff feb6 	bl	8002870 <timeoutMicrosecondsToMclks>
 8002b04:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8002b06:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8002b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0e:	d804      	bhi.n	8002b1a <setVcselPulsePeriod+0x10e>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1),devAddr);
 8002b10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b12:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e000      	b.n	8002b1c <setVcselPulsePeriod+0x110>
 8002b1a:	23ff      	movs	r3, #255	; 0xff
 8002b1c:	797a      	ldrb	r2, [r7, #5]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	2046      	movs	r0, #70	; 0x46
 8002b22:	f7ff fd87 	bl	8002634 <writeReg>
 8002b26:	e0ee      	b.n	8002d06 <setVcselPulsePeriod+0x2fa>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 80e9 	bne.w	8002d02 <setVcselPulsePeriod+0x2f6>
  {
    switch (period_pclks)
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	3b08      	subs	r3, #8
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	f200 80bd 	bhi.w	8002cb4 <setVcselPulsePeriod+0x2a8>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <setVcselPulsePeriod+0x134>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b5d 	.word	0x08002b5d
 8002b44:	08002cb5 	.word	0x08002cb5
 8002b48:	08002bb3 	.word	0x08002bb3
 8002b4c:	08002cb5 	.word	0x08002cb5
 8002b50:	08002c09 	.word	0x08002c09
 8002b54:	08002cb5 	.word	0x08002cb5
 8002b58:	08002c5f 	.word	0x08002c5f
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10,devAddr);
 8002b5c:	797b      	ldrb	r3, [r7, #5]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2110      	movs	r1, #16
 8002b62:	2048      	movs	r0, #72	; 0x48
 8002b64:	f7ff fd66 	bl	8002634 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08,devAddr);
 8002b68:	797b      	ldrb	r3, [r7, #5]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2108      	movs	r1, #8
 8002b6e:	2047      	movs	r0, #71	; 0x47
 8002b70:	f7ff fd60 	bl	8002634 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02,devAddr);
 8002b74:	797b      	ldrb	r3, [r7, #5]
 8002b76:	461a      	mov	r2, r3
 8002b78:	2102      	movs	r1, #2
 8002b7a:	2032      	movs	r0, #50	; 0x32
 8002b7c:	f7ff fd5a 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C,devAddr);
 8002b80:	797b      	ldrb	r3, [r7, #5]
 8002b82:	461a      	mov	r2, r3
 8002b84:	210c      	movs	r1, #12
 8002b86:	2030      	movs	r0, #48	; 0x30
 8002b88:	f7ff fd54 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x01,devAddr);
 8002b8c:	797b      	ldrb	r3, [r7, #5]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2101      	movs	r1, #1
 8002b92:	20ff      	movs	r0, #255	; 0xff
 8002b94:	f7ff fd4e 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30,devAddr);
 8002b98:	797b      	ldrb	r3, [r7, #5]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2130      	movs	r1, #48	; 0x30
 8002b9e:	2030      	movs	r0, #48	; 0x30
 8002ba0:	f7ff fd48 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x00,devAddr);
 8002ba4:	797b      	ldrb	r3, [r7, #5]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	20ff      	movs	r0, #255	; 0xff
 8002bac:	f7ff fd42 	bl	8002634 <writeReg>
        break;
 8002bb0:	e082      	b.n	8002cb8 <setVcselPulsePeriod+0x2ac>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28,devAddr);
 8002bb2:	797b      	ldrb	r3, [r7, #5]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2128      	movs	r1, #40	; 0x28
 8002bb8:	2048      	movs	r0, #72	; 0x48
 8002bba:	f7ff fd3b 	bl	8002634 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08,devAddr);
 8002bbe:	797b      	ldrb	r3, [r7, #5]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2108      	movs	r1, #8
 8002bc4:	2047      	movs	r0, #71	; 0x47
 8002bc6:	f7ff fd35 	bl	8002634 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03,devAddr);
 8002bca:	797b      	ldrb	r3, [r7, #5]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2103      	movs	r1, #3
 8002bd0:	2032      	movs	r0, #50	; 0x32
 8002bd2:	f7ff fd2f 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09,devAddr);
 8002bd6:	797b      	ldrb	r3, [r7, #5]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2109      	movs	r1, #9
 8002bdc:	2030      	movs	r0, #48	; 0x30
 8002bde:	f7ff fd29 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x01,devAddr);
 8002be2:	797b      	ldrb	r3, [r7, #5]
 8002be4:	461a      	mov	r2, r3
 8002be6:	2101      	movs	r1, #1
 8002be8:	20ff      	movs	r0, #255	; 0xff
 8002bea:	f7ff fd23 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20,devAddr);
 8002bee:	797b      	ldrb	r3, [r7, #5]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	2030      	movs	r0, #48	; 0x30
 8002bf6:	f7ff fd1d 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x00,devAddr);
 8002bfa:	797b      	ldrb	r3, [r7, #5]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	20ff      	movs	r0, #255	; 0xff
 8002c02:	f7ff fd17 	bl	8002634 <writeReg>
        break;
 8002c06:	e057      	b.n	8002cb8 <setVcselPulsePeriod+0x2ac>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38,devAddr);
 8002c08:	797b      	ldrb	r3, [r7, #5]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2138      	movs	r1, #56	; 0x38
 8002c0e:	2048      	movs	r0, #72	; 0x48
 8002c10:	f7ff fd10 	bl	8002634 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08,devAddr);
 8002c14:	797b      	ldrb	r3, [r7, #5]
 8002c16:	461a      	mov	r2, r3
 8002c18:	2108      	movs	r1, #8
 8002c1a:	2047      	movs	r0, #71	; 0x47
 8002c1c:	f7ff fd0a 	bl	8002634 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03,devAddr);
 8002c20:	797b      	ldrb	r3, [r7, #5]
 8002c22:	461a      	mov	r2, r3
 8002c24:	2103      	movs	r1, #3
 8002c26:	2032      	movs	r0, #50	; 0x32
 8002c28:	f7ff fd04 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08,devAddr);
 8002c2c:	797b      	ldrb	r3, [r7, #5]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2108      	movs	r1, #8
 8002c32:	2030      	movs	r0, #48	; 0x30
 8002c34:	f7ff fcfe 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x01,devAddr);
 8002c38:	797b      	ldrb	r3, [r7, #5]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	20ff      	movs	r0, #255	; 0xff
 8002c40:	f7ff fcf8 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20,devAddr);
 8002c44:	797b      	ldrb	r3, [r7, #5]
 8002c46:	461a      	mov	r2, r3
 8002c48:	2120      	movs	r1, #32
 8002c4a:	2030      	movs	r0, #48	; 0x30
 8002c4c:	f7ff fcf2 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x00,devAddr);
 8002c50:	797b      	ldrb	r3, [r7, #5]
 8002c52:	461a      	mov	r2, r3
 8002c54:	2100      	movs	r1, #0
 8002c56:	20ff      	movs	r0, #255	; 0xff
 8002c58:	f7ff fcec 	bl	8002634 <writeReg>
        break;
 8002c5c:	e02c      	b.n	8002cb8 <setVcselPulsePeriod+0x2ac>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48,devAddr);
 8002c5e:	797b      	ldrb	r3, [r7, #5]
 8002c60:	461a      	mov	r2, r3
 8002c62:	2148      	movs	r1, #72	; 0x48
 8002c64:	2048      	movs	r0, #72	; 0x48
 8002c66:	f7ff fce5 	bl	8002634 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08,devAddr);
 8002c6a:	797b      	ldrb	r3, [r7, #5]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2108      	movs	r1, #8
 8002c70:	2047      	movs	r0, #71	; 0x47
 8002c72:	f7ff fcdf 	bl	8002634 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03,devAddr);
 8002c76:	797b      	ldrb	r3, [r7, #5]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	2032      	movs	r0, #50	; 0x32
 8002c7e:	f7ff fcd9 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07,devAddr);
 8002c82:	797b      	ldrb	r3, [r7, #5]
 8002c84:	461a      	mov	r2, r3
 8002c86:	2107      	movs	r1, #7
 8002c88:	2030      	movs	r0, #48	; 0x30
 8002c8a:	f7ff fcd3 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x01,devAddr);
 8002c8e:	797b      	ldrb	r3, [r7, #5]
 8002c90:	461a      	mov	r2, r3
 8002c92:	2101      	movs	r1, #1
 8002c94:	20ff      	movs	r0, #255	; 0xff
 8002c96:	f7ff fccd 	bl	8002634 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20,devAddr);
 8002c9a:	797b      	ldrb	r3, [r7, #5]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	2030      	movs	r0, #48	; 0x30
 8002ca2:	f7ff fcc7 	bl	8002634 <writeReg>
        writeReg(0xFF, 0x00,devAddr);
 8002ca6:	797b      	ldrb	r3, [r7, #5]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2100      	movs	r1, #0
 8002cac:	20ff      	movs	r0, #255	; 0xff
 8002cae:	f7ff fcc1 	bl	8002634 <writeReg>
        break;
 8002cb2:	e001      	b.n	8002cb8 <setVcselPulsePeriod+0x2ac>

      default:
        // invalid period
        return 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e048      	b.n	8002d4a <setVcselPulsePeriod+0x33e>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg,devAddr);
 8002cb8:	797a      	ldrb	r2, [r7, #5]
 8002cba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	2070      	movs	r0, #112	; 0x70
 8002cc2:	f7ff fcb7 	bl	8002634 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	79ba      	ldrb	r2, [r7, #6]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fdcf 	bl	8002870 <timeoutMicrosecondsToMclks>
 8002cd2:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8002cd4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <setVcselPulsePeriod+0x2de>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002ce2:	8a7a      	ldrh	r2, [r7, #18]
 8002ce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce6:	4413      	add	r3, r2
 8002ce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002cea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fde5 	bl	80028bc <encodeTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	797b      	ldrb	r3, [r7, #5]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2071      	movs	r0, #113	; 0x71
 8002cfc:	f7ff fc76 	bl	80025ec <writeReg16>
 8002d00:	e001      	b.n	8002d06 <setVcselPulsePeriod+0x2fa>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e021      	b.n	8002d4a <setVcselPulsePeriod+0x33e>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us,devAddr);
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <setVcselPulsePeriod+0x348>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	797a      	ldrb	r2, [r7, #5]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f822 	bl	8002d58 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG,devAddr);
 8002d14:	797b      	ldrb	r3, [r7, #5]
 8002d16:	4619      	mov	r1, r3
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7ff fbb9 	bl	8002490 <readReg>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02,devAddr);
 8002d24:	797b      	ldrb	r3, [r7, #5]
 8002d26:	461a      	mov	r2, r3
 8002d28:	2102      	movs	r1, #2
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7ff fc82 	bl	8002634 <writeReg>
  performSingleRefCalibration(0x0,devAddr);
 8002d30:	797b      	ldrb	r3, [r7, #5]
 8002d32:	4619      	mov	r1, r3
 8002d34:	2000      	movs	r0, #0
 8002d36:	f000 f927 	bl	8002f88 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config,devAddr);
 8002d3a:	797a      	ldrb	r2, [r7, #5]
 8002d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d40:	4619      	mov	r1, r3
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7ff fc76 	bl	8002634 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8002d48:	2301      	movs	r3, #1
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3730      	adds	r7, #48	; 0x30
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000a78 	.word	0x20000a78

08002d58 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us, uint8_t devAddr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b090      	sub	sp, #64	; 0x40
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002d64:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8002d68:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 8002d6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002d6e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8002d70:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002d74:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8002d76:	f240 234e 	movw	r3, #590	; 0x24e
 8002d7a:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8002d7c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002d80:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8002d82:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002d86:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8002d88:	f240 2326 	movw	r3, #550	; 0x226
 8002d8c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8002d8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d201      	bcs.n	8002da0 <setMeasurementTimingBudget+0x48>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e078      	b.n	8002e92 <setMeasurementTimingBudget+0x13a>

  used_budget_us = StartOverhead + EndOverhead;
 8002da0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002da4:	4413      	add	r3, r2
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG,devAddr);
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	4619      	mov	r1, r3
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7ff fb6f 	bl	8002490 <readReg>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts,devAddr);
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	f107 0108 	add.w	r1, r7, #8
 8002dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fda6 	bl	8002914 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <setMeasurementTimingBudget+0x88>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002dd8:	4413      	add	r3, r2
 8002dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ddc:	4413      	add	r3, r2
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <setMeasurementTimingBudget+0xa4>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002df0:	4413      	add	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df6:	4413      	add	r3, r2
 8002df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfa:	e00b      	b.n	8002e14 <setMeasurementTimingBudget+0xbc>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <setMeasurementTimingBudget+0xbc>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002e0c:	4413      	add	r3, r2
 8002e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e10:	4413      	add	r3, r2
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <setMeasurementTimingBudget+0xd4>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e24:	4413      	add	r3, r2
 8002e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e28:	4413      	add	r3, r2
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da2d      	bge.n	8002e90 <setMeasurementTimingBudget+0x138>
  {
    used_budget_us += FinalRangeOverhead;
 8002e34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e38:	4413      	add	r3, r2
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d901      	bls.n	8002e48 <setMeasurementTimingBudget+0xf0>
    {
      // "Requested timeout too big."
      return 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e024      	b.n	8002e92 <setMeasurementTimingBudget+0x13a>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002e50:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4619      	mov	r1, r3
 8002e56:	6a38      	ldr	r0, [r7, #32]
 8002e58:	f7ff fd0a 	bl	8002870 <timeoutMicrosecondsToMclks>
 8002e5c:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8002e5e:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <setMeasurementTimingBudget+0x11c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002e6c:	89fa      	ldrh	r2, [r7, #14]
 8002e6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e70:	4413      	add	r3, r2
 8002e72:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fd20 	bl	80028bc <encodeTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	461a      	mov	r2, r3
 8002e84:	2071      	movs	r0, #113	; 0x71
 8002e86:	f7ff fbb1 	bl	80025ec <writeReg16>
      encodeTimeout(final_range_timeout_mclks),devAddr);

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <setMeasurementTimingBudget+0x144>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3740      	adds	r7, #64	; 0x40
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000a78 	.word	0x20000a78

08002ea0 <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(uint8_t devAddr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8002eaa:	f240 7376 	movw	r3, #1910	; 0x776
 8002eae:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 8002eb0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002eb4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 8002eb6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002eba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8002ebc:	f240 234e 	movw	r3, #590	; 0x24e
 8002ec0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 8002ec2:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002ec6:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8002ec8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002ecc:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 8002ece:	f240 2326 	movw	r3, #550	; 0x226
 8002ed2:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002ed4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002ed6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ed8:	4413      	add	r3, r2
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34

  enables = readReg(SYSTEM_SEQUENCE_CONFIG,devAddr);
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7ff fad5 	bl	8002490 <readReg>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  getSequenceStepTimeouts(enables, &timeouts,devAddr);
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	f107 010c 	add.w	r1, r7, #12
 8002ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fd0c 	bl	8002914 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002efc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <getMeasurementTimingBudget+0x74>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f0c:	4413      	add	r3, r2
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f10:	4413      	add	r3, r2
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002f14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <getMeasurementTimingBudget+0x90>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f24:	4413      	add	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f2a:	4413      	add	r3, r2
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2e:	e00b      	b.n	8002f48 <getMeasurementTimingBudget+0xa8>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002f30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <getMeasurementTimingBudget+0xa8>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f40:	4413      	add	r3, r2
 8002f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f44:	4413      	add	r3, r2
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002f48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <getMeasurementTimingBudget+0xc0>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f58:	4413      	add	r3, r2
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5c:	4413      	add	r3, r2
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002f60:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da05      	bge.n	8002f74 <getMeasurementTimingBudget+0xd4>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f6c:	4413      	add	r3, r2
 8002f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f70:	4413      	add	r3, r2
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8002f74:	4a03      	ldr	r2, [pc, #12]	; (8002f84 <getMeasurementTimingBudget+0xe4>)
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	6013      	str	r3, [r2, #0]
  return budget_us;
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3738      	adds	r7, #56	; 0x38
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000a78 	.word	0x20000a78

08002f88 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte, uint8_t devAddr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	460a      	mov	r2, r1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71bb      	strb	r3, [r7, #6]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte,devAddr); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	79ba      	ldrb	r2, [r7, #6]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7ff fb45 	bl	8002634 <writeReg>

  iTimeout = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS,devAddr) & 0x07) == 0)
 8002fae:	e00a      	b.n	8002fc6 <performSingleRefCalibration+0x3e>
  {
    iTimeout++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);
 8002fb6:	2005      	movs	r0, #5
 8002fb8:	f000 fa6c 	bl	8003494 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	dd01      	ble.n	8002fc6 <performSingleRefCalibration+0x3e>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e016      	b.n	8002ff4 <performSingleRefCalibration+0x6c>
  while ((readReg(RESULT_INTERRUPT_STATUS,devAddr) & 0x07) == 0)
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2013      	movs	r0, #19
 8002fcc:	f7ff fa60 	bl	8002490 <readReg>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0ea      	beq.n	8002fb0 <performSingleRefCalibration+0x28>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01,devAddr);
 8002fda:	79bb      	ldrb	r3, [r7, #6]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2101      	movs	r1, #1
 8002fe0:	200b      	movs	r0, #11
 8002fe2:	f7ff fb27 	bl	8002634 <writeReg>

  writeReg(SYSRANGE_START, 0x00,devAddr);
 8002fe6:	79bb      	ldrb	r3, [r7, #6]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2100      	movs	r1, #0
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7ff fb21 	bl	8002634 <writeReg>

  return 1;
 8002ff2:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode, uint8_t devAddr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8003008:	2300      	movs	r3, #0
 800300a:	75bb      	strb	r3, [r7, #22]
 800300c:	2300      	movs	r3, #0
 800300e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,devAddr) | 0x01,devAddr); // set bit 0
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	4619      	mov	r1, r3
 8003014:	2089      	movs	r0, #137	; 0x89
 8003016:	f7ff fa3b 	bl	8002490 <readReg>
 800301a:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	4619      	mov	r1, r3
 8003026:	2089      	movs	r0, #137	; 0x89
 8003028:	f7ff fb04 	bl	8002634 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode,devAddr);
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	4619      	mov	r1, r3
 8003030:	487f      	ldr	r0, [pc, #508]	; (8003230 <initSensor+0x234>)
 8003032:	f7ff fb1d 	bl	8002670 <writeRegList>
  stop_variable = readReg(0x91,devAddr);
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	4619      	mov	r1, r3
 800303a:	2091      	movs	r0, #145	; 0x91
 800303c:	f7ff fa28 	bl	8002490 <readReg>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	4b7b      	ldr	r3, [pc, #492]	; (8003234 <initSensor+0x238>)
 8003046:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2,devAddr);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	4619      	mov	r1, r3
 800304c:	487a      	ldr	r0, [pc, #488]	; (8003238 <initSensor+0x23c>)
 800304e:	f7ff fb0f 	bl	8002670 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL, devAddr) | 0x12, devAddr);
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	4619      	mov	r1, r3
 8003056:	2060      	movs	r0, #96	; 0x60
 8003058:	f7ff fa1a 	bl	8002490 <readReg>
 800305c:	4603      	mov	r3, r0
 800305e:	f043 0312 	orr.w	r3, r3, #18
 8003062:	b2db      	uxtb	r3, r3
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4619      	mov	r1, r3
 8003068:	2060      	movs	r0, #96	; 0x60
 800306a:	f7ff fae3 	bl	8002634 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32,devAddr); // 0.25
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	461a      	mov	r2, r3
 8003072:	2120      	movs	r1, #32
 8003074:	2044      	movs	r0, #68	; 0x44
 8003076:	f7ff fab9 	bl	80025ec <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF,devAddr);
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	461a      	mov	r2, r3
 800307e:	21ff      	movs	r1, #255	; 0xff
 8003080:	2001      	movs	r0, #1
 8003082:	f7ff fad7 	bl	8002634 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture, devAddr);
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	f107 0115 	add.w	r1, r7, #21
 800308c:	f107 0316 	add.w	r3, r7, #22
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fb27 	bl	80026e4 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6,devAddr);
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f107 010c 	add.w	r1, r7, #12
 800309c:	2206      	movs	r2, #6
 800309e:	20b0      	movs	r0, #176	; 0xb0
 80030a0:	f7ff fa1c 	bl	80024dc <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD,devAddr);
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	4619      	mov	r1, r3
 80030a8:	4864      	ldr	r0, [pc, #400]	; (800323c <initSensor+0x240>)
 80030aa:	f7ff fae1 	bl	8002670 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 80030ae:	7d7b      	ldrb	r3, [r7, #21]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <initSensor+0xbc>
 80030b4:	230c      	movs	r3, #12
 80030b6:	e000      	b.n	80030ba <initSensor+0xbe>
 80030b8:	2300      	movs	r3, #0
 80030ba:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	e037      	b.n	8003136 <initSensor+0x13a>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	db03      	blt.n	80030d6 <initSensor+0xda>
 80030ce:	7dbb      	ldrb	r3, [r7, #22]
 80030d0:	7ffa      	ldrb	r2, [r7, #31]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d119      	bne.n	800310a <initSensor+0x10e>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	10db      	asrs	r3, r3, #3
 80030da:	3320      	adds	r3, #32
 80030dc:	443b      	add	r3, r7
 80030de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80030e2:	b25a      	sxtb	r2, r3
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	b25b      	sxtb	r3, r3
 80030f6:	4013      	ands	r3, r2
 80030f8:	b25a      	sxtb	r2, r3
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	10db      	asrs	r3, r3, #3
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	3320      	adds	r3, #32
 8003102:	443b      	add	r3, r7
 8003104:	f803 2c14 	strb.w	r2, [r3, #-20]
 8003108:	e012      	b.n	8003130 <initSensor+0x134>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	10db      	asrs	r3, r3, #3
 800310e:	3320      	adds	r3, #32
 8003110:	443b      	add	r3, r7
 8003112:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003116:	461a      	mov	r2, r3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	fa42 f303 	asr.w	r3, r2, r3
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <initSensor+0x134>
    {
      ucSPADsEnabled++;
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	3301      	adds	r3, #1
 800312e:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	3301      	adds	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b2f      	cmp	r3, #47	; 0x2f
 800313a:	ddc4      	ble.n	80030c6 <initSensor+0xca>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6,devAddr);
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f107 010c 	add.w	r1, r7, #12
 8003142:	2206      	movs	r2, #6
 8003144:	20b0      	movs	r0, #176	; 0xb0
 8003146:	f7ff f9f1 	bl	800252c <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0],
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning,devAddr); // long list of magic numbers
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	4619      	mov	r1, r3
 800314e:	483c      	ldr	r0, [pc, #240]	; (8003240 <initSensor+0x244>)
 8003150:	f7ff fa8e 	bl	8002670 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d011      	beq.n	800317e <initSensor+0x182>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13,devAddr); // 0.1
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	461a      	mov	r2, r3
 800315e:	210d      	movs	r1, #13
 8003160:	2044      	movs	r0, #68	; 0x44
 8003162:	f7ff fa43 	bl	80025ec <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18, devAddr);
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	461a      	mov	r2, r3
 800316a:	2112      	movs	r1, #18
 800316c:	2000      	movs	r0, #0
 800316e:	f7ff fc4d 	bl	8002a0c <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14, devAddr);
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	461a      	mov	r2, r3
 8003176:	210e      	movs	r1, #14
 8003178:	2001      	movs	r0, #1
 800317a:	f7ff fc47 	bl	8002a0c <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04,devAddr);
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	461a      	mov	r2, r3
 8003182:	2104      	movs	r1, #4
 8003184:	200a      	movs	r0, #10
 8003186:	f7ff fa55 	bl	8002634 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH,devAddr) & ~0x10,devAddr); // active low
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	4619      	mov	r1, r3
 800318e:	2084      	movs	r0, #132	; 0x84
 8003190:	f7ff f97e 	bl	8002490 <readReg>
 8003194:	4603      	mov	r3, r0
 8003196:	f023 0310 	bic.w	r3, r3, #16
 800319a:	b2db      	uxtb	r3, r3
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4619      	mov	r1, r3
 80031a0:	2084      	movs	r0, #132	; 0x84
 80031a2:	f7ff fa47 	bl	8002634 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01,devAddr);
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	461a      	mov	r2, r3
 80031aa:	2101      	movs	r1, #1
 80031ac:	200b      	movs	r0, #11
 80031ae:	f7ff fa41 	bl	8002634 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget(devAddr);
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe73 	bl	8002ea0 <getMeasurementTimingBudget>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <initSensor+0x248>)
 80031be:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8,devAddr);
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	461a      	mov	r2, r3
 80031c4:	21e8      	movs	r1, #232	; 0xe8
 80031c6:	2001      	movs	r0, #1
 80031c8:	f7ff fa34 	bl	8002634 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us, devAddr);
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <initSensor+0x248>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fdbf 	bl	8002d58 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01,devAddr);
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	461a      	mov	r2, r3
 80031de:	2101      	movs	r1, #1
 80031e0:	2001      	movs	r0, #1
 80031e2:	f7ff fa27 	bl	8002634 <writeReg>
  if (!performSingleRefCalibration(0x40,devAddr)) { return 0; }
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	4619      	mov	r1, r3
 80031ea:	2040      	movs	r0, #64	; 0x40
 80031ec:	f7ff fecc 	bl	8002f88 <performSingleRefCalibration>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <initSensor+0x1fe>
 80031f6:	2300      	movs	r3, #0
 80031f8:	e016      	b.n	8003228 <initSensor+0x22c>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02,devAddr);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	461a      	mov	r2, r3
 80031fe:	2102      	movs	r1, #2
 8003200:	2001      	movs	r0, #1
 8003202:	f7ff fa17 	bl	8002634 <writeReg>
  if (!performSingleRefCalibration(0x00,devAddr)) { return 0; }
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	4619      	mov	r1, r3
 800320a:	2000      	movs	r0, #0
 800320c:	f7ff febc 	bl	8002f88 <performSingleRefCalibration>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <initSensor+0x21e>
 8003216:	2300      	movs	r3, #0
 8003218:	e006      	b.n	8003228 <initSensor+0x22c>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8,devAddr);
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	461a      	mov	r2, r3
 800321e:	21e8      	movs	r1, #232	; 0xe8
 8003220:	2001      	movs	r0, #1
 8003222:	f7ff fa07 	bl	8002634 <writeReg>
  return 1;
 8003226:	2301      	movs	r3, #1
} /* initSensor() */
 8003228:	4618      	mov	r0, r3
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000008 	.word	0x20000008
 8003234:	20000a74 	.word	0x20000a74
 8003238:	20000014 	.word	0x20000014
 800323c:	20000040 	.word	0x20000040
 8003240:	2000004c 	.word	0x2000004c
 8003244:	20000a78 	.word	0x20000a78

08003248 <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(uint8_t devAddr)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
int iTimeout = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS,devAddr) & 0x07) == 0)
 8003256:	e00b      	b.n	8003270 <readRangeContinuousMillimeters+0x28>
  {
    iTimeout++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);
 800325e:	2005      	movs	r0, #5
 8003260:	f000 f918 	bl	8003494 <HAL_Delay>
    if (iTimeout > 50)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b32      	cmp	r3, #50	; 0x32
 8003268:	dd02      	ble.n	8003270 <readRangeContinuousMillimeters+0x28>
    {
      return -1;
 800326a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800326e:	e017      	b.n	80032a0 <readRangeContinuousMillimeters+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS,devAddr) & 0x07) == 0)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	4619      	mov	r1, r3
 8003274:	2013      	movs	r0, #19
 8003276:	f7ff f90b 	bl	8002490 <readReg>
 800327a:	4603      	mov	r3, r0
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0e9      	beq.n	8003258 <readRangeContinuousMillimeters+0x10>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10,devAddr);
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4619      	mov	r1, r3
 8003288:	201e      	movs	r0, #30
 800328a:	f7ff f8d3 	bl	8002434 <readReg16>
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01,devAddr);
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	461a      	mov	r2, r3
 8003296:	2101      	movs	r1, #1
 8003298:	200b      	movs	r0, #11
 800329a:	f7ff f9cb 	bl	8002634 <writeReg>

  return range;
 800329e:	897b      	ldrh	r3, [r7, #10]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(uint8_t devAddr)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
int iTimeout;

  writeReg(0x80, 0x01,devAddr);
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	461a      	mov	r2, r3
 80032b6:	2101      	movs	r1, #1
 80032b8:	2080      	movs	r0, #128	; 0x80
 80032ba:	f7ff f9bb 	bl	8002634 <writeReg>
  writeReg(0xFF, 0x01,devAddr);
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	461a      	mov	r2, r3
 80032c2:	2101      	movs	r1, #1
 80032c4:	20ff      	movs	r0, #255	; 0xff
 80032c6:	f7ff f9b5 	bl	8002634 <writeReg>
  writeReg(0x00, 0x00,devAddr);
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	461a      	mov	r2, r3
 80032ce:	2100      	movs	r1, #0
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7ff f9af 	bl	8002634 <writeReg>
  writeReg(0x91, stop_variable,devAddr);
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <tofReadDistance+0xb0>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	79fa      	ldrb	r2, [r7, #7]
 80032dc:	4619      	mov	r1, r3
 80032de:	2091      	movs	r0, #145	; 0x91
 80032e0:	f7ff f9a8 	bl	8002634 <writeReg>
  writeReg(0x00, 0x01,devAddr);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	461a      	mov	r2, r3
 80032e8:	2101      	movs	r1, #1
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7ff f9a2 	bl	8002634 <writeReg>
  writeReg(0xFF, 0x00,devAddr);
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	461a      	mov	r2, r3
 80032f4:	2100      	movs	r1, #0
 80032f6:	20ff      	movs	r0, #255	; 0xff
 80032f8:	f7ff f99c 	bl	8002634 <writeReg>
  writeReg(0x80, 0x00,devAddr);
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	461a      	mov	r2, r3
 8003300:	2100      	movs	r1, #0
 8003302:	2080      	movs	r0, #128	; 0x80
 8003304:	f7ff f996 	bl	8002634 <writeReg>

  writeReg(SYSRANGE_START, 0x01,devAddr);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	461a      	mov	r2, r3
 800330c:	2101      	movs	r1, #1
 800330e:	2000      	movs	r0, #0
 8003310:	f7ff f990 	bl	8002634 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
  while (readReg(SYSRANGE_START,devAddr) & 0x01)
 8003318:	e00b      	b.n	8003332 <tofReadDistance+0x8a>
  {
    iTimeout++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);
 8003320:	2005      	movs	r0, #5
 8003322:	f000 f8b7 	bl	8003494 <HAL_Delay>
    if (iTimeout > 50)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b32      	cmp	r3, #50	; 0x32
 800332a:	dd02      	ble.n	8003332 <tofReadDistance+0x8a>
    {
      return -1;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	e00e      	b.n	8003350 <tofReadDistance+0xa8>
  while (readReg(SYSRANGE_START,devAddr) & 0x01)
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	4619      	mov	r1, r3
 8003336:	2000      	movs	r0, #0
 8003338:	f7ff f8aa 	bl	8002490 <readReg>
 800333c:	4603      	mov	r3, r0
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e9      	bne.n	800331a <tofReadDistance+0x72>
    }
  }

  return readRangeContinuousMillimeters(devAddr);
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff7d 	bl	8003248 <readRangeContinuousMillimeters>
 800334e:	4603      	mov	r3, r0

} /* tofReadDistance() */
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000a74 	.word	0x20000a74

0800335c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800335c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003394 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003360:	480d      	ldr	r0, [pc, #52]	; (8003398 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003362:	490e      	ldr	r1, [pc, #56]	; (800339c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003364:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003368:	e002      	b.n	8003370 <LoopCopyDataInit>

0800336a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800336c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336e:	3304      	adds	r3, #4

08003370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003374:	d3f9      	bcc.n	800336a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003376:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003378:	4c0b      	ldr	r4, [pc, #44]	; (80033a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800337c:	e001      	b.n	8003382 <LoopFillZerobss>

0800337e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003380:	3204      	adds	r2, #4

08003382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003384:	d3fb      	bcc.n	800337e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003386:	f7ff f833 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800338a:	f006 fc71 	bl	8009c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800338e:	f7fd fcc3 	bl	8000d18 <main>
  bx  lr    
 8003392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003394:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800339c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80033a0:	0800a644 	.word	0x0800a644
  ldr r2, =_sbss
 80033a4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80033a8:	20004920 	.word	0x20004920

080033ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033ac:	e7fe      	b.n	80033ac <ADC_IRQHandler>
	...

080033b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_Init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <HAL_Init+0x40>)
 80033ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_Init+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_Init+0x40>)
 80033c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <HAL_Init+0x40>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d8:	2003      	movs	r0, #3
 80033da:	f000 fd31 	bl	8003e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033de:	200f      	movs	r0, #15
 80033e0:	f000 f808 	bl	80033f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e4:	f7fe fdd6 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_InitTick+0x54>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_InitTick+0x58>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340a:	fbb3 f3f1 	udiv	r3, r3, r1
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fd49 	bl	8003eaa <HAL_SYSTICK_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e00e      	b.n	8003440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b0f      	cmp	r3, #15
 8003426:	d80a      	bhi.n	800343e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003428:	2200      	movs	r2, #0
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f000 fd11 	bl	8003e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <HAL_InitTick+0x5c>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000004 	.word	0x20000004
 800344c:	200000f4 	.word	0x200000f4
 8003450:	200000f0 	.word	0x200000f0

08003454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_IncTick+0x20>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_IncTick+0x24>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4413      	add	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_IncTick+0x24>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	200000f4 	.word	0x200000f4
 8003478:	20000a7c 	.word	0x20000a7c

0800347c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return uwTick;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_GetTick+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000a7c 	.word	0x20000a7c

08003494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff ffee 	bl	800347c <HAL_GetTick>
 80034a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d005      	beq.n	80034ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_Delay+0x44>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034ba:	bf00      	nop
 80034bc:	f7ff ffde 	bl	800347c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d8f7      	bhi.n	80034bc <HAL_Delay+0x28>
  {
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200000f4 	.word	0x200000f4

080034dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e033      	b.n	800355a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe fd76 	bl	8001fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003522:	f023 0302 	bic.w	r3, r3, #2
 8003526:	f043 0202 	orr.w	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 faba 	bl	8003aa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	f043 0201 	orr.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
 800354a:	e001      	b.n	8003550 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_ADC_Start+0x1a>
 800357a:	2302      	movs	r3, #2
 800357c:	e097      	b.n	80036ae <HAL_ADC_Start+0x14a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d018      	beq.n	80035c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035a4:	4b45      	ldr	r3, [pc, #276]	; (80036bc <HAL_ADC_Start+0x158>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a45      	ldr	r2, [pc, #276]	; (80036c0 <HAL_ADC_Start+0x15c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9a      	lsrs	r2, r3, #18
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035b8:	e002      	b.n	80035c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3b01      	subs	r3, #1
 80035be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d15f      	bne.n	8003694 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d106      	bne.n	8003622 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f023 0206 	bic.w	r2, r3, #6
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
 8003620:	e002      	b.n	8003628 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_ADC_Start+0x160>)
 8003632:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800363c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d129      	bne.n	80036ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e020      	b.n	80036ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_ADC_Start+0x164>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d11b      	bne.n	80036ac <HAL_ADC_Start+0x148>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d114      	bne.n	80036ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	e00b      	b.n	80036ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f043 0210 	orr.w	r2, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000004 	.word	0x20000004
 80036c0:	431bde83 	.word	0x431bde83
 80036c4:	40012300 	.word	0x40012300
 80036c8:	40012000 	.word	0x40012000

080036cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_Stop+0x16>
 80036de:	2302      	movs	r3, #2
 80036e0:	e021      	b.n	8003726 <HAL_ADC_Stop+0x5a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d113      	bne.n	8003778 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e063      	b.n	8003840 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003778:	f7ff fe80 	bl	800347c <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800377e:	e021      	b.n	80037c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d01d      	beq.n	80037c4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_ADC_PollForConversion+0x6c>
 800378e:	f7ff fe75 	bl	800347c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d212      	bcs.n	80037c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d00b      	beq.n	80037c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f043 0204 	orr.w	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e03d      	b.n	8003840 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d1d6      	bne.n	8003780 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0212 	mvn.w	r2, #18
 80037da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d123      	bne.n	800383e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11f      	bne.n	800383e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003816:	2b00      	cmp	r3, #0
 8003818:	d111      	bne.n	800383e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x1c>
 800387c:	2302      	movs	r3, #2
 800387e:	e105      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x228>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b09      	cmp	r3, #9
 800388e:	d925      	bls.n	80038dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68d9      	ldr	r1, [r3, #12]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	3b1e      	subs	r3, #30
 80038a6:	2207      	movs	r2, #7
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43da      	mvns	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	400a      	ands	r2, r1
 80038b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68d9      	ldr	r1, [r3, #12]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4403      	add	r3, r0
 80038ce:	3b1e      	subs	r3, #30
 80038d0:	409a      	lsls	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	e022      	b.n	8003922 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6919      	ldr	r1, [r3, #16]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	2207      	movs	r2, #7
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	400a      	ands	r2, r1
 80038fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6919      	ldr	r1, [r3, #16]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	4603      	mov	r3, r0
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4403      	add	r3, r0
 8003918:	409a      	lsls	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d824      	bhi.n	8003974 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	3b05      	subs	r3, #5
 800393c:	221f      	movs	r2, #31
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	400a      	ands	r2, r1
 800394a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4618      	mov	r0, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3b05      	subs	r3, #5
 8003966:	fa00 f203 	lsl.w	r2, r0, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	635a      	str	r2, [r3, #52]	; 0x34
 8003972:	e04c      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d824      	bhi.n	80039c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3b23      	subs	r3, #35	; 0x23
 800398e:	221f      	movs	r2, #31
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43da      	mvns	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	400a      	ands	r2, r1
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	3b23      	subs	r3, #35	; 0x23
 80039b8:	fa00 f203 	lsl.w	r2, r0, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
 80039c4:	e023      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	3b41      	subs	r3, #65	; 0x41
 80039d8:	221f      	movs	r2, #31
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	400a      	ands	r2, r1
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	3b41      	subs	r3, #65	; 0x41
 8003a02:	fa00 f203 	lsl.w	r2, r0, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_ADC_ConfigChannel+0x234>)
 8003a10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_ADC_ConfigChannel+0x238>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d109      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x1cc>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b12      	cmp	r3, #18
 8003a22:	d105      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <HAL_ADC_ConfigChannel+0x238>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d123      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x21e>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d003      	beq.n	8003a4a <HAL_ADC_ConfigChannel+0x1e6>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b11      	cmp	r3, #17
 8003a48:	d11b      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d111      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_ADC_ConfigChannel+0x23c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <HAL_ADC_ConfigChannel+0x240>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9a      	lsrs	r2, r3, #18
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	40012000 	.word	0x40012000
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	431bde83 	.word	0x431bde83

08003aa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab0:	4b79      	ldr	r3, [pc, #484]	; (8003c98 <ADC_Init+0x1f0>)
 8003ab2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6899      	ldr	r1, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <ADC_Init+0x1f4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	e00f      	b.n	8003ba6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0202 	bic.w	r2, r2, #2
 8003bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7e1b      	ldrb	r3, [r3, #24]
 8003bc0:	005a      	lsls	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	035a      	lsls	r2, r3, #13
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	e007      	b.n	8003c1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	051a      	lsls	r2, r3, #20
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6899      	ldr	r1, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c5e:	025a      	lsls	r2, r3, #9
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	029a      	lsls	r2, r3, #10
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40012300 	.word	0x40012300
 8003c9c:	0f000001 	.word	0x0f000001

08003ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <__NVIC_GetPriorityGrouping+0x18>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0307 	and.w	r3, r3, #7
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db0b      	blt.n	8003d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4907      	ldr	r1, [pc, #28]	; (8003d3c <__NVIC_EnableIRQ+0x38>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db0a      	blt.n	8003d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	490c      	ldr	r1, [pc, #48]	; (8003d8c <__NVIC_SetPriority+0x4c>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	440b      	add	r3, r1
 8003d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d68:	e00a      	b.n	8003d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4908      	ldr	r1, [pc, #32]	; (8003d90 <__NVIC_SetPriority+0x50>)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3b04      	subs	r3, #4
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	761a      	strb	r2, [r3, #24]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	; 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf28      	it	cs
 8003db2:	2304      	movcs	r3, #4
 8003db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d902      	bls.n	8003dc4 <NVIC_EncodePriority+0x30>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3b03      	subs	r3, #3
 8003dc2:	e000      	b.n	8003dc6 <NVIC_EncodePriority+0x32>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	4313      	orrs	r3, r2
         );
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e0c:	d301      	bcc.n	8003e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00f      	b.n	8003e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <SysTick_Config+0x40>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f7ff ff8e 	bl	8003d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <SysTick_Config+0x40>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <SysTick_Config+0x40>)
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	e000e010 	.word	0xe000e010

08003e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff29 	bl	8003ca0 <__NVIC_SetPriorityGrouping>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e68:	f7ff ff3e 	bl	8003ce8 <__NVIC_GetPriorityGrouping>
 8003e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f7ff ff8e 	bl	8003d94 <NVIC_EncodePriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff5d 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff31 	bl	8003d04 <__NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffa2 	bl	8003dfc <SysTick_Config>
 8003eb8:	4603      	mov	r3, r0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7ff fad4 	bl	800347c <HAL_GetTick>
 8003ed4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d008      	beq.n	8003ef4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e052      	b.n	8003f9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0216 	bic.w	r2, r2, #22
 8003f02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_DMA_Abort+0x62>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0208 	bic.w	r2, r2, #8
 8003f32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f44:	e013      	b.n	8003f6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f46:	f7ff fa99 	bl	800347c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d90c      	bls.n	8003f6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e015      	b.n	8003f9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e4      	bne.n	8003f46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	223f      	movs	r2, #63	; 0x3f
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e00c      	b.n	8003fda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e159      	b.n	80042b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004004:	2201      	movs	r2, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	429a      	cmp	r2, r3
 800401e:	f040 8148 	bne.w	80042b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d005      	beq.n	800403a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	2b02      	cmp	r3, #2
 8004038:	d130      	bne.n	800409c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004070:	2201      	movs	r2, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 0201 	and.w	r2, r3, #1
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d017      	beq.n	80040d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d123      	bne.n	800412c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	08da      	lsrs	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3208      	adds	r2, #8
 80040ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	220f      	movs	r2, #15
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	08da      	lsrs	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3208      	adds	r2, #8
 8004126:	69b9      	ldr	r1, [r7, #24]
 8004128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	2203      	movs	r2, #3
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0203 	and.w	r2, r3, #3
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a2 	beq.w	80042b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <HAL_GPIO_Init+0x2e8>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	4a56      	ldr	r2, [pc, #344]	; (80042d0 <HAL_GPIO_Init+0x2e8>)
 8004178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417c:	6453      	str	r3, [r2, #68]	; 0x44
 800417e:	4b54      	ldr	r3, [pc, #336]	; (80042d0 <HAL_GPIO_Init+0x2e8>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800418a:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_GPIO_Init+0x2ec>)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	3302      	adds	r3, #2
 8004192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	220f      	movs	r2, #15
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a49      	ldr	r2, [pc, #292]	; (80042d8 <HAL_GPIO_Init+0x2f0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x202>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a48      	ldr	r2, [pc, #288]	; (80042dc <HAL_GPIO_Init+0x2f4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x1fe>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a47      	ldr	r2, [pc, #284]	; (80042e0 <HAL_GPIO_Init+0x2f8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x1fa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a46      	ldr	r2, [pc, #280]	; (80042e4 <HAL_GPIO_Init+0x2fc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x1f6>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a45      	ldr	r2, [pc, #276]	; (80042e8 <HAL_GPIO_Init+0x300>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x1f2>
 80041d6:	2304      	movs	r3, #4
 80041d8:	e008      	b.n	80041ec <HAL_GPIO_Init+0x204>
 80041da:	2307      	movs	r3, #7
 80041dc:	e006      	b.n	80041ec <HAL_GPIO_Init+0x204>
 80041de:	2303      	movs	r3, #3
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x204>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_Init+0x204>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_GPIO_Init+0x204>
 80041ea:	2300      	movs	r3, #0
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f002 0203 	and.w	r2, r2, #3
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	4093      	lsls	r3, r2
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fc:	4935      	ldr	r1, [pc, #212]	; (80042d4 <HAL_GPIO_Init+0x2ec>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420a:	4b38      	ldr	r3, [pc, #224]	; (80042ec <HAL_GPIO_Init+0x304>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800422e:	4a2f      	ldr	r2, [pc, #188]	; (80042ec <HAL_GPIO_Init+0x304>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004234:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <HAL_GPIO_Init+0x304>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004258:	4a24      	ldr	r2, [pc, #144]	; (80042ec <HAL_GPIO_Init+0x304>)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800425e:	4b23      	ldr	r3, [pc, #140]	; (80042ec <HAL_GPIO_Init+0x304>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004282:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <HAL_GPIO_Init+0x304>)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004288:	4b18      	ldr	r3, [pc, #96]	; (80042ec <HAL_GPIO_Init+0x304>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ac:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <HAL_GPIO_Init+0x304>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f aea2 	bls.w	8004004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3724      	adds	r7, #36	; 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40013c00 	.word	0x40013c00

080042f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
 800430c:	e001      	b.n	8004312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
 800432c:	4613      	mov	r3, r2
 800432e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004330:	787b      	ldrb	r3, [r7, #1]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800433c:	e003      	b.n	8004346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	041a      	lsls	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	619a      	str	r2, [r3, #24]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004364:	887a      	ldrh	r2, [r7, #2]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	041a      	lsls	r2, r3, #16
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43d9      	mvns	r1, r3
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	400b      	ands	r3, r1
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	619a      	str	r2, [r3, #24]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd f916 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40013c00 	.word	0x40013c00

080043b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e12b      	b.n	8004622 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd fe48 	bl	8002074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800440a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800441a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800441c:	f001 fcc0 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8004420:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a81      	ldr	r2, [pc, #516]	; (800462c <HAL_I2C_Init+0x274>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d807      	bhi.n	800443c <HAL_I2C_Init+0x84>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a80      	ldr	r2, [pc, #512]	; (8004630 <HAL_I2C_Init+0x278>)
 8004430:	4293      	cmp	r3, r2
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e006      	b.n	800444a <HAL_I2C_Init+0x92>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a7d      	ldr	r2, [pc, #500]	; (8004634 <HAL_I2C_Init+0x27c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	bf94      	ite	ls
 8004444:	2301      	movls	r3, #1
 8004446:	2300      	movhi	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e0e7      	b.n	8004622 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a78      	ldr	r2, [pc, #480]	; (8004638 <HAL_I2C_Init+0x280>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0c9b      	lsrs	r3, r3, #18
 800445c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a6a      	ldr	r2, [pc, #424]	; (800462c <HAL_I2C_Init+0x274>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d802      	bhi.n	800448c <HAL_I2C_Init+0xd4>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3301      	adds	r3, #1
 800448a:	e009      	b.n	80044a0 <HAL_I2C_Init+0xe8>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	4a69      	ldr	r2, [pc, #420]	; (800463c <HAL_I2C_Init+0x284>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	3301      	adds	r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	495c      	ldr	r1, [pc, #368]	; (800462c <HAL_I2C_Init+0x274>)
 80044bc:	428b      	cmp	r3, r1
 80044be:	d819      	bhi.n	80044f4 <HAL_I2C_Init+0x13c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1e59      	subs	r1, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80044ce:	1c59      	adds	r1, r3, #1
 80044d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044d4:	400b      	ands	r3, r1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_I2C_Init+0x138>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1e59      	subs	r1, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044e8:	3301      	adds	r3, #1
 80044ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ee:	e051      	b.n	8004594 <HAL_I2C_Init+0x1dc>
 80044f0:	2304      	movs	r3, #4
 80044f2:	e04f      	b.n	8004594 <HAL_I2C_Init+0x1dc>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d111      	bne.n	8004520 <HAL_I2C_Init+0x168>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1e58      	subs	r0, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6859      	ldr	r1, [r3, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	440b      	add	r3, r1
 800450a:	fbb0 f3f3 	udiv	r3, r0, r3
 800450e:	3301      	adds	r3, #1
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e012      	b.n	8004546 <HAL_I2C_Init+0x18e>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e58      	subs	r0, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	0099      	lsls	r1, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	fbb0 f3f3 	udiv	r3, r0, r3
 8004536:	3301      	adds	r3, #1
 8004538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_Init+0x196>
 800454a:	2301      	movs	r3, #1
 800454c:	e022      	b.n	8004594 <HAL_I2C_Init+0x1dc>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10e      	bne.n	8004574 <HAL_I2C_Init+0x1bc>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1e58      	subs	r0, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6859      	ldr	r1, [r3, #4]
 800455e:	460b      	mov	r3, r1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	440b      	add	r3, r1
 8004564:	fbb0 f3f3 	udiv	r3, r0, r3
 8004568:	3301      	adds	r3, #1
 800456a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004572:	e00f      	b.n	8004594 <HAL_I2C_Init+0x1dc>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1e58      	subs	r0, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	0099      	lsls	r1, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	fbb0 f3f3 	udiv	r3, r0, r3
 800458a:	3301      	adds	r3, #1
 800458c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	6809      	ldr	r1, [r1, #0]
 8004598:	4313      	orrs	r3, r2
 800459a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6911      	ldr	r1, [r2, #16]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68d2      	ldr	r2, [r2, #12]
 80045ce:	4311      	orrs	r1, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	000186a0 	.word	0x000186a0
 8004630:	001e847f 	.word	0x001e847f
 8004634:	003d08ff 	.word	0x003d08ff
 8004638:	431bde83 	.word	0x431bde83
 800463c:	10624dd3 	.word	0x10624dd3

08004640 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	461a      	mov	r2, r3
 800464c:	460b      	mov	r3, r1
 800464e:	817b      	strh	r3, [r7, #10]
 8004650:	4613      	mov	r3, r2
 8004652:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004654:	f7fe ff12 	bl	800347c <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	f040 80e0 	bne.w	8004828 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2319      	movs	r3, #25
 800466e:	2201      	movs	r2, #1
 8004670:	4970      	ldr	r1, [pc, #448]	; (8004834 <HAL_I2C_Master_Transmit+0x1f4>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fd86 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800467e:	2302      	movs	r3, #2
 8004680:	e0d3      	b.n	800482a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_I2C_Master_Transmit+0x50>
 800468c:	2302      	movs	r3, #2
 800468e:	e0cc      	b.n	800482a <HAL_I2C_Master_Transmit+0x1ea>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d007      	beq.n	80046b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2221      	movs	r2, #33	; 0x21
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2210      	movs	r2, #16
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	893a      	ldrh	r2, [r7, #8]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a50      	ldr	r2, [pc, #320]	; (8004838 <HAL_I2C_Master_Transmit+0x1f8>)
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046f8:	8979      	ldrh	r1, [r7, #10]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fbf0 	bl	8004ee4 <I2C_MasterRequestWrite>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e08d      	b.n	800482a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004724:	e066      	b.n	80047f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	6a39      	ldr	r1, [r7, #32]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fe00 	bl	8005330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b04      	cmp	r3, #4
 800473c:	d107      	bne.n	800474e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e06b      	b.n	800482a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d11b      	bne.n	80047c8 <HAL_I2C_Master_Transmit+0x188>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d017      	beq.n	80047c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	6a39      	ldr	r1, [r7, #32]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fdf0 	bl	80053b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d107      	bne.n	80047f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e01a      	b.n	800482a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d194      	bne.n	8004726 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	00100002 	.word	0x00100002
 8004838:	ffff0000 	.word	0xffff0000

0800483c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	; 0x30
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	461a      	mov	r2, r3
 8004848:	460b      	mov	r3, r1
 800484a:	817b      	strh	r3, [r7, #10]
 800484c:	4613      	mov	r3, r2
 800484e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004850:	f7fe fe14 	bl	800347c <HAL_GetTick>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	f040 820b 	bne.w	8004c7a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2319      	movs	r3, #25
 800486a:	2201      	movs	r2, #1
 800486c:	497c      	ldr	r1, [pc, #496]	; (8004a60 <HAL_I2C_Master_Receive+0x224>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fc88 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	e1fe      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_I2C_Master_Receive+0x50>
 8004888:	2302      	movs	r3, #2
 800488a:	e1f7      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d007      	beq.n	80048b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2222      	movs	r2, #34	; 0x22
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2210      	movs	r2, #16
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	893a      	ldrh	r2, [r7, #8]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a5c      	ldr	r2, [pc, #368]	; (8004a64 <HAL_I2C_Master_Receive+0x228>)
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048f4:	8979      	ldrh	r1, [r7, #10]
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fb74 	bl	8004fe8 <I2C_MasterRequestRead>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e1b8      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d113      	bne.n	800493a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2300      	movs	r3, #0
 8004914:	623b      	str	r3, [r7, #32]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	623b      	str	r3, [r7, #32]
 8004926:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e18c      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	2b01      	cmp	r3, #1
 8004940:	d11b      	bne.n	800497a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e16c      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	2b02      	cmp	r3, #2
 8004980:	d11b      	bne.n	80049ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004990:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	e14c      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049e0:	e138      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	f200 80f1 	bhi.w	8004bce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d123      	bne.n	8004a3c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fd1b 	bl	8005434 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e139      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a3a:	e10b      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d14e      	bne.n	8004ae2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	4906      	ldr	r1, [pc, #24]	; (8004a68 <HAL_I2C_Master_Receive+0x22c>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fb98 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e10e      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
 8004a5e:	bf00      	nop
 8004a60:	00100002 	.word	0x00100002
 8004a64:	ffff0000 	.word	0xffff0000
 8004a68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae0:	e0b8      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4966      	ldr	r1, [pc, #408]	; (8004c84 <HAL_I2C_Master_Receive+0x448>)
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fb49 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0bf      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	2200      	movs	r2, #0
 8004b46:	494f      	ldr	r1, [pc, #316]	; (8004c84 <HAL_I2C_Master_Receive+0x448>)
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fb1b 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e091      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bcc:	e042      	b.n	8004c54 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 fc2e 	bl	8005434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e04c      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d118      	bne.n	8004c54 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f aec2 	bne.w	80049e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
  }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3728      	adds	r7, #40	; 0x28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	00010004 	.word	0x00010004

08004c88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c98:	f7fe fbf0 	bl	800347c <HAL_GetTick>
 8004c9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	f040 8111 	bne.w	8004ed2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2319      	movs	r3, #25
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	4988      	ldr	r1, [pc, #544]	; (8004edc <HAL_I2C_IsDeviceReady+0x254>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fa62 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e104      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_I2C_IsDeviceReady+0x50>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e0fd      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d007      	beq.n	8004cfe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2224      	movs	r2, #36	; 0x24
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a70      	ldr	r2, [pc, #448]	; (8004ee0 <HAL_I2C_IsDeviceReady+0x258>)
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fa20 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d58:	d103      	bne.n	8004d62 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e0b6      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d74:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fe fb81 	bl	800347c <HAL_GetTick>
 8004d7a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004daa:	e025      	b.n	8004df8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dac:	f7fe fb66 	bl	800347c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d302      	bcc.n	8004dc2 <HAL_I2C_IsDeviceReady+0x13a>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	22a0      	movs	r2, #160	; 0xa0
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2301      	moveq	r3, #1
 8004dda:	2300      	movne	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2ba0      	cmp	r3, #160	; 0xa0
 8004e02:	d005      	beq.n	8004e10 <HAL_I2C_IsDeviceReady+0x188>
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <HAL_I2C_IsDeviceReady+0x188>
 8004e0a:	7dbb      	ldrb	r3, [r7, #22]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0cd      	beq.n	8004dac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d129      	bne.n	8004e7a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2319      	movs	r3, #25
 8004e52:	2201      	movs	r2, #1
 8004e54:	4921      	ldr	r1, [pc, #132]	; (8004edc <HAL_I2C_IsDeviceReady+0x254>)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f994 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e036      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e02c      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e88:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e92:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2319      	movs	r3, #25
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	490f      	ldr	r1, [pc, #60]	; (8004edc <HAL_I2C_IsDeviceReady+0x254>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f970 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e012      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	f4ff af32 	bcc.w	8004d22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	00100002 	.word	0x00100002
 8004ee0:	ffff0000 	.word	0xffff0000

08004ee4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d006      	beq.n	8004f0e <I2C_MasterRequestWrite+0x2a>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d003      	beq.n	8004f0e <I2C_MasterRequestWrite+0x2a>
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f0c:	d108      	bne.n	8004f20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e00b      	b.n	8004f38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	2b12      	cmp	r3, #18
 8004f26:	d107      	bne.n	8004f38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f91d 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00d      	beq.n	8004f6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	d103      	bne.n	8004f68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e035      	b.n	8004fd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f74:	d108      	bne.n	8004f88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f76:	897b      	ldrh	r3, [r7, #10]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f84:	611a      	str	r2, [r3, #16]
 8004f86:	e01b      	b.n	8004fc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f88:	897b      	ldrh	r3, [r7, #10]
 8004f8a:	11db      	asrs	r3, r3, #7
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0306 	and.w	r3, r3, #6
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f063 030f 	orn	r3, r3, #15
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <I2C_MasterRequestWrite+0xfc>)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f943 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e010      	b.n	8004fd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4907      	ldr	r1, [pc, #28]	; (8004fe4 <I2C_MasterRequestWrite+0x100>)
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f933 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	00010008 	.word	0x00010008
 8004fe4:	00010002 	.word	0x00010002

08004fe8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800500c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d006      	beq.n	8005022 <I2C_MasterRequestRead+0x3a>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d003      	beq.n	8005022 <I2C_MasterRequestRead+0x3a>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005020:	d108      	bne.n	8005034 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e00b      	b.n	800504c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	2b11      	cmp	r3, #17
 800503a:	d107      	bne.n	800504c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f893 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d103      	bne.n	800507c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e079      	b.n	8005174 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005088:	d108      	bne.n	800509c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800508a:	897b      	ldrh	r3, [r7, #10]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]
 800509a:	e05f      	b.n	800515c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800509c:	897b      	ldrh	r3, [r7, #10]
 800509e:	11db      	asrs	r3, r3, #7
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 0306 	and.w	r3, r3, #6
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f063 030f 	orn	r3, r3, #15
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4930      	ldr	r1, [pc, #192]	; (800517c <I2C_MasterRequestRead+0x194>)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f8b9 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e054      	b.n	8005174 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	4929      	ldr	r1, [pc, #164]	; (8005180 <I2C_MasterRequestRead+0x198>)
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f8a9 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e044      	b.n	8005174 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f831 	bl	8005184 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00d      	beq.n	8005144 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005136:	d103      	bne.n	8005140 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e017      	b.n	8005174 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005144:	897b      	ldrh	r3, [r7, #10]
 8005146:	11db      	asrs	r3, r3, #7
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0306 	and.w	r3, r3, #6
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f063 030e 	orn	r3, r3, #14
 8005154:	b2da      	uxtb	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4907      	ldr	r1, [pc, #28]	; (8005180 <I2C_MasterRequestRead+0x198>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f865 	bl	8005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	00010008 	.word	0x00010008
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005194:	e025      	b.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d021      	beq.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe f96d 	bl	800347c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e023      	b.n	800522a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10d      	bne.n	8005208 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	e00c      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	43da      	mvns	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d0b6      	beq.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005240:	e051      	b.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d123      	bne.n	800529a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005260:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800526a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0204 	orr.w	r2, r3, #4
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e046      	b.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d021      	beq.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fe f8eb 	bl	800347c <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d116      	bne.n	80052e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e020      	b.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10c      	bne.n	800530a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	43da      	mvns	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bf14      	ite	ne
 8005302:	2301      	movne	r3, #1
 8005304:	2300      	moveq	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e00b      	b.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	43da      	mvns	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d18d      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800533c:	e02d      	b.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f8ce 	bl	80054e0 <I2C_IsAcknowledgeFailed>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e02d      	b.n	80053aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d021      	beq.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fe f891 	bl	800347c <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d116      	bne.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e007      	b.n	80053aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d1ca      	bne.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053be:	e02d      	b.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f88d 	bl	80054e0 <I2C_IsAcknowledgeFailed>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e02d      	b.n	800542c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d021      	beq.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d8:	f7fe f850 	bl	800347c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d302      	bcc.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d116      	bne.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e007      	b.n	800542c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b04      	cmp	r3, #4
 8005428:	d1ca      	bne.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005440:	e042      	b.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b10      	cmp	r3, #16
 800544e:	d119      	bne.n	8005484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0210 	mvn.w	r2, #16
 8005458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e029      	b.n	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fd fffa 	bl	800347c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d116      	bne.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e007      	b.n	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d1b5      	bne.n	8005442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d11b      	bne.n	8005530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f043 0204 	orr.w	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e267      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d075      	beq.n	800564a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555e:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b04      	cmp	r3, #4
 8005568:	d00c      	beq.n	8005584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800556a:	4b85      	ldr	r3, [pc, #532]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005572:	2b08      	cmp	r3, #8
 8005574:	d112      	bne.n	800559c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005576:	4b82      	ldr	r3, [pc, #520]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005582:	d10b      	bne.n	800559c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	4b7e      	ldr	r3, [pc, #504]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d05b      	beq.n	8005648 <HAL_RCC_OscConfig+0x108>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d157      	bne.n	8005648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e242      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCC_OscConfig+0x74>
 80055a6:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a75      	ldr	r2, [pc, #468]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	e01d      	b.n	80055f0 <HAL_RCC_OscConfig+0xb0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x98>
 80055be:	4b70      	ldr	r3, [pc, #448]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6f      	ldr	r2, [pc, #444]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b6d      	ldr	r3, [pc, #436]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a6c      	ldr	r2, [pc, #432]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e00b      	b.n	80055f0 <HAL_RCC_OscConfig+0xb0>
 80055d8:	4b69      	ldr	r3, [pc, #420]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a68      	ldr	r2, [pc, #416]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	4b66      	ldr	r3, [pc, #408]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a65      	ldr	r2, [pc, #404]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80055ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d013      	beq.n	8005620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fd ff40 	bl	800347c <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005600:	f7fd ff3c 	bl	800347c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e207      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4b5b      	ldr	r3, [pc, #364]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0xc0>
 800561e:	e014      	b.n	800564a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fd ff2c 	bl	800347c <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005628:	f7fd ff28 	bl	800347c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1f3      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563a:	4b51      	ldr	r3, [pc, #324]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0xe8>
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d063      	beq.n	800571e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005656:	4b4a      	ldr	r3, [pc, #296]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005662:	4b47      	ldr	r3, [pc, #284]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800566a:	2b08      	cmp	r3, #8
 800566c:	d11c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566e:	4b44      	ldr	r3, [pc, #272]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d116      	bne.n	80056a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567a:	4b41      	ldr	r3, [pc, #260]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_RCC_OscConfig+0x152>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d001      	beq.n	8005692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e1c7      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005692:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4937      	ldr	r1, [pc, #220]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a6:	e03a      	b.n	800571e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d020      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b0:	4b34      	ldr	r3, [pc, #208]	; (8005784 <HAL_RCC_OscConfig+0x244>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fd fee1 	bl	800347c <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056be:	f7fd fedd 	bl	800347c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e1a8      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b28      	ldr	r3, [pc, #160]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4925      	ldr	r1, [pc, #148]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	600b      	str	r3, [r1, #0]
 80056f0:	e015      	b.n	800571e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <HAL_RCC_OscConfig+0x244>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fd fec0 	bl	800347c <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005700:	f7fd febc 	bl	800347c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e187      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005712:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d036      	beq.n	8005798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_RCC_OscConfig+0x248>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fd fea0 	bl	800347c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005740:	f7fd fe9c 	bl	800347c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e167      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <HAL_RCC_OscConfig+0x240>)
 8005754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCC_OscConfig+0x200>
 800575e:	e01b      	b.n	8005798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_OscConfig+0x248>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005766:	f7fd fe89 	bl	800347c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	e00e      	b.n	800578c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576e:	f7fd fe85 	bl	800347c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d907      	bls.n	800578c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e150      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
 8005780:	40023800 	.word	0x40023800
 8005784:	42470000 	.word	0x42470000
 8005788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578c:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ea      	bne.n	800576e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8097 	beq.w	80058d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057aa:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	4b7d      	ldr	r3, [pc, #500]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	4a7c      	ldr	r2, [pc, #496]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6413      	str	r3, [r2, #64]	; 0x40
 80057c6:	4b7a      	ldr	r3, [pc, #488]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	60bb      	str	r3, [r7, #8]
 80057d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d6:	4b77      	ldr	r3, [pc, #476]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d118      	bne.n	8005814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e2:	4b74      	ldr	r3, [pc, #464]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a73      	ldr	r2, [pc, #460]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 80057e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ee:	f7fd fe45 	bl	800347c <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f6:	f7fd fe41 	bl	800347c <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e10c      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005808:	4b6a      	ldr	r3, [pc, #424]	; (80059b4 <HAL_RCC_OscConfig+0x474>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d106      	bne.n	800582a <HAL_RCC_OscConfig+0x2ea>
 800581c:	4b64      	ldr	r3, [pc, #400]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a63      	ldr	r2, [pc, #396]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6713      	str	r3, [r2, #112]	; 0x70
 8005828:	e01c      	b.n	8005864 <HAL_RCC_OscConfig+0x324>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b05      	cmp	r3, #5
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x30c>
 8005832:	4b5f      	ldr	r3, [pc, #380]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	4a5e      	ldr	r2, [pc, #376]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005838:	f043 0304 	orr.w	r3, r3, #4
 800583c:	6713      	str	r3, [r2, #112]	; 0x70
 800583e:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	4a5b      	ldr	r2, [pc, #364]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6713      	str	r3, [r2, #112]	; 0x70
 800584a:	e00b      	b.n	8005864 <HAL_RCC_OscConfig+0x324>
 800584c:	4b58      	ldr	r3, [pc, #352]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	4a57      	ldr	r2, [pc, #348]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6713      	str	r3, [r2, #112]	; 0x70
 8005858:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	4a54      	ldr	r2, [pc, #336]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800585e:	f023 0304 	bic.w	r3, r3, #4
 8005862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fd fe06 	bl	800347c <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005872:	e00a      	b.n	800588a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fd fe02 	bl	800347c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e0cb      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588a:	4b49      	ldr	r3, [pc, #292]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0ee      	beq.n	8005874 <HAL_RCC_OscConfig+0x334>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005898:	f7fd fdf0 	bl	800347c <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589e:	e00a      	b.n	80058b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fd fdec 	bl	800347c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0b5      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ee      	bne.n	80058a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c8:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	4a38      	ldr	r2, [pc, #224]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80a1 	beq.w	8005a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058de:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d05c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d141      	bne.n	8005976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_OscConfig+0x478>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f8:	f7fd fdc0 	bl	800347c <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005900:	f7fd fdbc 	bl	800347c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e087      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005912:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	019b      	lsls	r3, r3, #6
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	3b01      	subs	r3, #1
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	061b      	lsls	r3, r3, #24
 8005942:	491b      	ldr	r1, [pc, #108]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x478>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594e:	f7fd fd95 	bl	800347c <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005956:	f7fd fd91 	bl	800347c <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e05c      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005968:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x416>
 8005974:	e054      	b.n	8005a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_OscConfig+0x478>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fd fd7e 	bl	800347c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005984:	f7fd fd7a 	bl	800347c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e045      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <HAL_RCC_OscConfig+0x470>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x444>
 80059a2:	e03d      	b.n	8005a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e038      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40007000 	.word	0x40007000
 80059b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x4ec>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d028      	beq.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d121      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d11a      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d111      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	3b01      	subs	r3, #1
 8005a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800

08005a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0cc      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a44:	4b68      	ldr	r3, [pc, #416]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d90c      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a52:	4b65      	ldr	r3, [pc, #404]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b63      	ldr	r3, [pc, #396]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0b8      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a84:	4b59      	ldr	r3, [pc, #356]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4a58      	ldr	r2, [pc, #352]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a9c:	4b53      	ldr	r3, [pc, #332]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	4a52      	ldr	r2, [pc, #328]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa8:	4b50      	ldr	r3, [pc, #320]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	494d      	ldr	r1, [pc, #308]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d044      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b47      	ldr	r3, [pc, #284]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d119      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e07f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d003      	beq.n	8005aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aee:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e06f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afe:	4b3b      	ldr	r3, [pc, #236]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e067      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0e:	4b37      	ldr	r3, [pc, #220]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4934      	ldr	r1, [pc, #208]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b20:	f7fd fcac 	bl	800347c <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b28:	f7fd fca8 	bl	800347c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e04f      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 020c 	and.w	r2, r3, #12
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1eb      	bne.n	8005b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b50:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d20c      	bcs.n	8005b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d001      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e032      	b.n	8005bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4916      	ldr	r1, [pc, #88]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	490e      	ldr	r1, [pc, #56]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bb6:	f000 f821 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	490a      	ldr	r1, [pc, #40]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc8:	5ccb      	ldrb	r3, [r1, r3]
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bd2:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fd fc0c 	bl	80033f4 <HAL_InitTick>

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023c00 	.word	0x40023c00
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	0800a5b8 	.word	0x0800a5b8
 8005bf4:	20000004 	.word	0x20000004
 8005bf8:	200000f0 	.word	0x200000f0

08005bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c00:	b090      	sub	sp, #64	; 0x40
 8005c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
 8005c08:	2300      	movs	r3, #0
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c14:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 030c 	and.w	r3, r3, #12
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d00d      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x40>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	f200 80a1 	bhi.w	8005d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x34>
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c2e:	e09b      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c34:	e09b      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c36:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c3a:	e098      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c3c:	4b4f      	ldr	r3, [pc, #316]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c46:	4b4d      	ldr	r3, [pc, #308]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d028      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c52:	4b4a      	ldr	r3, [pc, #296]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	2200      	movs	r2, #0
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c64:	2100      	movs	r1, #0
 8005c66:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c68:	fb03 f201 	mul.w	r2, r3, r1
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	fb00 f303 	mul.w	r3, r0, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	4a43      	ldr	r2, [pc, #268]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c76:	fba0 1202 	umull	r1, r2, r0, r2
 8005c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c82:	4413      	add	r3, r2
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	2200      	movs	r2, #0
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	61fa      	str	r2, [r7, #28]
 8005c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c96:	f7fa fe89 	bl	80009ac <__aeabi_uldivmod>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca2:	e053      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ca4:	4b35      	ldr	r3, [pc, #212]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	099b      	lsrs	r3, r3, #6
 8005caa:	2200      	movs	r2, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	617a      	str	r2, [r7, #20]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005cb6:	f04f 0b00 	mov.w	fp, #0
 8005cba:	4652      	mov	r2, sl
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	f04f 0000 	mov.w	r0, #0
 8005cc2:	f04f 0100 	mov.w	r1, #0
 8005cc6:	0159      	lsls	r1, r3, #5
 8005cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ccc:	0150      	lsls	r0, r2, #5
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8005cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cee:	ebb2 0408 	subs.w	r4, r2, r8
 8005cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	00eb      	lsls	r3, r5, #3
 8005d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d04:	00e2      	lsls	r2, r4, #3
 8005d06:	4614      	mov	r4, r2
 8005d08:	461d      	mov	r5, r3
 8005d0a:	eb14 030a 	adds.w	r3, r4, sl
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	eb45 030b 	adc.w	r3, r5, fp
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d22:	4629      	mov	r1, r5
 8005d24:	028b      	lsls	r3, r1, #10
 8005d26:	4621      	mov	r1, r4
 8005d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	028a      	lsls	r2, r1, #10
 8005d30:	4610      	mov	r0, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	2200      	movs	r2, #0
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d40:	f7fa fe34 	bl	80009ac <__aeabi_uldivmod>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4613      	mov	r3, r2
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	3301      	adds	r3, #1
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d66:	e002      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3740      	adds	r7, #64	; 0x40
 8005d74:	46bd      	mov	sp, r7
 8005d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	00f42400 	.word	0x00f42400
 8005d84:	017d7840 	.word	0x017d7840

08005d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000004 	.word	0x20000004

08005da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005da4:	f7ff fff0 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	0a9b      	lsrs	r3, r3, #10
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4903      	ldr	r1, [pc, #12]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	0800a5c8 	.word	0x0800a5c8

08005dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dcc:	f7ff ffdc 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0b5b      	lsrs	r3, r3, #13
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4903      	ldr	r1, [pc, #12]	; (8005dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40023800 	.word	0x40023800
 8005dec:	0800a5c8 	.word	0x0800a5c8

08005df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e03f      	b.n	8005e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc f974 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fddf 	bl	80069f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b08a      	sub	sp, #40	; 0x28
 8005e8e:	af02      	add	r7, sp, #8
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d17c      	bne.n	8005fa4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_UART_Transmit+0x2c>
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e075      	b.n	8005fa6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UART_Transmit+0x3e>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e06e      	b.n	8005fa6 <HAL_UART_Transmit+0x11c>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2221      	movs	r2, #33	; 0x21
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ede:	f7fd facd 	bl	800347c <HAL_GetTick>
 8005ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef8:	d108      	bne.n	8005f0c <HAL_UART_Transmit+0x82>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e003      	b.n	8005f14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f1c:	e02a      	b.n	8005f74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fb1f 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e036      	b.n	8005fa6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	3302      	adds	r3, #2
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e007      	b.n	8005f66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1cf      	bne.n	8005f1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2200      	movs	r2, #0
 8005f86:	2140      	movs	r1, #64	; 0x40
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 faef 	bl	800656c <UART_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e006      	b.n	8005fa6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d11d      	bne.n	8006004 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Receive_IT+0x26>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e016      	b.n	8006006 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Receive_IT+0x38>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e00f      	b.n	8006006 <HAL_UART_Receive_IT+0x58>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fb24 	bl	8006648 <UART_Start_Receive_IT>
 8006000:	4603      	mov	r3, r0
 8006002:	e000      	b.n	8006006 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006004:	2302      	movs	r3, #2
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b0ba      	sub	sp, #232	; 0xe8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006036:	2300      	movs	r3, #0
 8006038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800604e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_UART_IRQHandler+0x66>
 8006062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fc07 	bl	8006882 <UART_Receive_IT>
      return;
 8006074:	e256      	b.n	8006524 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80de 	beq.w	800623c <HAL_UART_IRQHandler+0x22c>
 8006080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800608c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006090:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80d1 	beq.w	800623c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <HAL_UART_IRQHandler+0xae>
 80060a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0201 	orr.w	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_UART_IRQHandler+0xd2>
 80060ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0202 	orr.w	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_UART_IRQHandler+0xf6>
 80060ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f043 0204 	orr.w	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <HAL_UART_IRQHandler+0x126>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800611e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f043 0208 	orr.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 81ed 	beq.w	800651a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_UART_IRQHandler+0x14e>
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb92 	bl	8006882 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <HAL_UART_IRQHandler+0x17a>
 8006182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d04f      	beq.n	800622a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa9a 	bl	80066c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d141      	bne.n	8006222 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3314      	adds	r3, #20
 80061a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3314      	adds	r3, #20
 80061c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1d9      	bne.n	800619e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d013      	beq.n	800621a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	4a7d      	ldr	r2, [pc, #500]	; (80063ec <HAL_UART_IRQHandler+0x3dc>)
 80061f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd fecf 	bl	8003fa2 <HAL_DMA_Abort_IT>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	e00e      	b.n	8006238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f990 	bl	8006540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e00a      	b.n	8006238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f98c 	bl	8006540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e006      	b.n	8006238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f988 	bl	8006540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006236:	e170      	b.n	800651a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	bf00      	nop
    return;
 800623a:	e16e      	b.n	800651a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	2b01      	cmp	r3, #1
 8006242:	f040 814a 	bne.w	80064da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8143 	beq.w	80064da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 813c 	beq.w	80064da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	f040 80b4 	bne.w	80063f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006294:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8140 	beq.w	800651e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062a6:	429a      	cmp	r2, r3
 80062a8:	f080 8139 	bcs.w	800651e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062be:	f000 8088 	beq.w	80063d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1d9      	bne.n	80062c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3314      	adds	r3, #20
 8006314:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800631e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3314      	adds	r3, #20
 800632e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006332:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006336:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800633a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e1      	bne.n	800630e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3314      	adds	r3, #20
 8006350:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800635a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800636e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006370:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006374:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800637c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e3      	bne.n	800634a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	330c      	adds	r3, #12
 80063b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80063b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e3      	bne.n	8006390 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fd fd78 	bl	8003ec2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	b29b      	uxth	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f8b6 	bl	8006554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063e8:	e099      	b.n	800651e <HAL_UART_IRQHandler+0x50e>
 80063ea:	bf00      	nop
 80063ec:	0800678b 	.word	0x0800678b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 808b 	beq.w	8006522 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800640c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8086 	beq.w	8006522 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800642c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800643a:	647a      	str	r2, [r7, #68]	; 0x44
 800643c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e3      	bne.n	8006416 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3314      	adds	r3, #20
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	623b      	str	r3, [r7, #32]
   return(result);
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006472:	633a      	str	r2, [r7, #48]	; 0x30
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e3      	bne.n	800644e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0310 	bic.w	r3, r3, #16
 80064aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	330c      	adds	r3, #12
 80064b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064b8:	61fa      	str	r2, [r7, #28]
 80064ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	69b9      	ldr	r1, [r7, #24]
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	617b      	str	r3, [r7, #20]
   return(result);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e3      	bne.n	8006494 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f83e 	bl	8006554 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064d8:	e023      	b.n	8006522 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_UART_IRQHandler+0x4ea>
 80064e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f95d 	bl	80067b2 <UART_Transmit_IT>
    return;
 80064f8:	e014      	b.n	8006524 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00e      	beq.n	8006524 <HAL_UART_IRQHandler+0x514>
 8006506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f99d 	bl	8006852 <UART_EndTransmit_IT>
    return;
 8006518:	e004      	b.n	8006524 <HAL_UART_IRQHandler+0x514>
    return;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <HAL_UART_IRQHandler+0x514>
      return;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <HAL_UART_IRQHandler+0x514>
      return;
 8006522:	bf00      	nop
  }
}
 8006524:	37e8      	adds	r7, #232	; 0xe8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop

0800652c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b090      	sub	sp, #64	; 0x40
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	e050      	b.n	8006620 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d04c      	beq.n	8006620 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <UART_WaitOnFlagUntilTimeout+0x30>
 800658c:	f7fc ff76 	bl	800347c <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006598:	429a      	cmp	r2, r3
 800659a:	d241      	bcs.n	8006620 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065bc:	637a      	str	r2, [r7, #52]	; 0x34
 80065be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3314      	adds	r3, #20
 80065d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	613b      	str	r3, [r7, #16]
   return(result);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3314      	adds	r3, #20
 80065ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f0:	623a      	str	r2, [r7, #32]
 80065f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	69f9      	ldr	r1, [r7, #28]
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e00f      	b.n	8006640 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	4013      	ands	r3, r2
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	429a      	cmp	r2, r3
 800663c:	d09f      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3740      	adds	r7, #64	; 0x40
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	88fa      	ldrh	r2, [r7, #6]
 8006666:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2222      	movs	r2, #34	; 0x22
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006694:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0201 	orr.w	r2, r2, #1
 80066a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0220 	orr.w	r2, r2, #32
 80066b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b095      	sub	sp, #84	; 0x54
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ec:	643a      	str	r2, [r7, #64]	; 0x40
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3314      	adds	r3, #20
 8006706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	64bb      	str	r3, [r7, #72]	; 0x48
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	2b01      	cmp	r3, #1
 800673a:	d119      	bne.n	8006770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60bb      	str	r3, [r7, #8]
   return(result);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800675c:	61ba      	str	r2, [r7, #24]
 800675e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	613b      	str	r3, [r7, #16]
   return(result);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e5      	bne.n	800673c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800677e:	bf00      	nop
 8006780:	3754      	adds	r7, #84	; 0x54
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff fecb 	bl	8006540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b21      	cmp	r3, #33	; 0x21
 80067c4:	d13e      	bne.n	8006844 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	d114      	bne.n	80067fa <UART_Transmit_IT+0x48>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d110      	bne.n	80067fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	1c9a      	adds	r2, r3, #2
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	621a      	str	r2, [r3, #32]
 80067f8:	e008      	b.n	800680c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6211      	str	r1, [r2, #32]
 8006804:	781a      	ldrb	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29b      	uxth	r3, r3
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	4619      	mov	r1, r3
 800681a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10f      	bne.n	8006840 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800682e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006868:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff fe5a 	bl	800652c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08c      	sub	sp, #48	; 0x30
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b22      	cmp	r3, #34	; 0x22
 8006894:	f040 80ab 	bne.w	80069ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a0:	d117      	bne.n	80068d2 <UART_Receive_IT+0x50>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d113      	bne.n	80068d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	1c9a      	adds	r2, r3, #2
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28
 80068d0:	e026      	b.n	8006920 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d007      	beq.n	80068f6 <UART_Receive_IT+0x74>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <UART_Receive_IT+0x82>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e008      	b.n	8006916 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006910:	b2da      	uxtb	r2, r3
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006930:	2b00      	cmp	r3, #0
 8006932:	d15a      	bne.n	80069ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0220 	bic.w	r2, r2, #32
 8006942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	d135      	bne.n	80069e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	613b      	str	r3, [r7, #16]
   return(result);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f023 0310 	bic.w	r3, r3, #16
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699a:	623a      	str	r2, [r7, #32]
 800699c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	6a3a      	ldr	r2, [r7, #32]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d10a      	bne.n	80069d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fdbb 	bl	8006554 <HAL_UARTEx_RxEventCallback>
 80069de:	e002      	b.n	80069e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fa fc81 	bl	80012e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	e002      	b.n	80069f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
  }
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3730      	adds	r7, #48	; 0x30
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069fc:	b0c0      	sub	sp, #256	; 0x100
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	68d9      	ldr	r1, [r3, #12]
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	ea40 0301 	orr.w	r3, r0, r1
 8006a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a50:	f021 010c 	bic.w	r1, r1, #12
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a72:	6999      	ldr	r1, [r3, #24]
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	ea40 0301 	orr.w	r3, r0, r1
 8006a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b8f      	ldr	r3, [pc, #572]	; (8006cc4 <UART_SetConfig+0x2cc>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d005      	beq.n	8006a98 <UART_SetConfig+0xa0>
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b8d      	ldr	r3, [pc, #564]	; (8006cc8 <UART_SetConfig+0x2d0>)
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d104      	bne.n	8006aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7ff f996 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 8006a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006aa0:	e003      	b.n	8006aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aa2:	f7ff f97d 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8006aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	f040 810c 	bne.w	8006cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006aca:	4622      	mov	r2, r4
 8006acc:	462b      	mov	r3, r5
 8006ace:	1891      	adds	r1, r2, r2
 8006ad0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ad2:	415b      	adcs	r3, r3
 8006ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ada:	4621      	mov	r1, r4
 8006adc:	eb12 0801 	adds.w	r8, r2, r1
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	eb43 0901 	adc.w	r9, r3, r1
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006afa:	4690      	mov	r8, r2
 8006afc:	4699      	mov	r9, r3
 8006afe:	4623      	mov	r3, r4
 8006b00:	eb18 0303 	adds.w	r3, r8, r3
 8006b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b08:	462b      	mov	r3, r5
 8006b0a:	eb49 0303 	adc.w	r3, r9, r3
 8006b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b26:	460b      	mov	r3, r1
 8006b28:	18db      	adds	r3, r3, r3
 8006b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	eb42 0303 	adc.w	r3, r2, r3
 8006b32:	657b      	str	r3, [r7, #84]	; 0x54
 8006b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b3c:	f7f9 ff36 	bl	80009ac <__aeabi_uldivmod>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4b61      	ldr	r3, [pc, #388]	; (8006ccc <UART_SetConfig+0x2d4>)
 8006b46:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	011c      	lsls	r4, r3, #4
 8006b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	1891      	adds	r1, r2, r2
 8006b66:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b68:	415b      	adcs	r3, r3
 8006b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b70:	4641      	mov	r1, r8
 8006b72:	eb12 0a01 	adds.w	sl, r2, r1
 8006b76:	4649      	mov	r1, r9
 8006b78:	eb43 0b01 	adc.w	fp, r3, r1
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b90:	4692      	mov	sl, r2
 8006b92:	469b      	mov	fp, r3
 8006b94:	4643      	mov	r3, r8
 8006b96:	eb1a 0303 	adds.w	r3, sl, r3
 8006b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	18db      	adds	r3, r3, r3
 8006bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	eb42 0303 	adc.w	r3, r2, r3
 8006bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bd2:	f7f9 feeb 	bl	80009ac <__aeabi_uldivmod>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4b3b      	ldr	r3, [pc, #236]	; (8006ccc <UART_SetConfig+0x2d4>)
 8006bde:	fba3 2301 	umull	r2, r3, r3, r1
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	2264      	movs	r2, #100	; 0x64
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	1acb      	subs	r3, r1, r3
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bf2:	4b36      	ldr	r3, [pc, #216]	; (8006ccc <UART_SetConfig+0x2d4>)
 8006bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c00:	441c      	add	r4, r3
 8006c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	1891      	adds	r1, r2, r2
 8006c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c1c:	415b      	adcs	r3, r3
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c24:	4641      	mov	r1, r8
 8006c26:	1851      	adds	r1, r2, r1
 8006c28:	6339      	str	r1, [r7, #48]	; 0x30
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	414b      	adcs	r3, r1
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c3c:	4659      	mov	r1, fp
 8006c3e:	00cb      	lsls	r3, r1, #3
 8006c40:	4651      	mov	r1, sl
 8006c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c46:	4651      	mov	r1, sl
 8006c48:	00ca      	lsls	r2, r1, #3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4642      	mov	r2, r8
 8006c52:	189b      	adds	r3, r3, r2
 8006c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c58:	464b      	mov	r3, r9
 8006c5a:	460a      	mov	r2, r1
 8006c5c:	eb42 0303 	adc.w	r3, r2, r3
 8006c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c78:	460b      	mov	r3, r1
 8006c7a:	18db      	adds	r3, r3, r3
 8006c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c7e:	4613      	mov	r3, r2
 8006c80:	eb42 0303 	adc.w	r3, r2, r3
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c8e:	f7f9 fe8d 	bl	80009ac <__aeabi_uldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <UART_SetConfig+0x2d4>)
 8006c98:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	2164      	movs	r1, #100	; 0x64
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	3332      	adds	r3, #50	; 0x32
 8006caa:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <UART_SetConfig+0x2d4>)
 8006cac:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	f003 0207 	and.w	r2, r3, #7
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4422      	add	r2, r4
 8006cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cc0:	e105      	b.n	8006ece <UART_SetConfig+0x4d6>
 8006cc2:	bf00      	nop
 8006cc4:	40011000 	.word	0x40011000
 8006cc8:	40011400 	.word	0x40011400
 8006ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	1891      	adds	r1, r2, r2
 8006ce8:	6239      	str	r1, [r7, #32]
 8006cea:	415b      	adcs	r3, r3
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
 8006cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	1854      	adds	r4, r2, r1
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	eb43 0501 	adc.w	r5, r3, r1
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	00eb      	lsls	r3, r5, #3
 8006d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d0a:	00e2      	lsls	r2, r4, #3
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	461d      	mov	r5, r3
 8006d10:	4643      	mov	r3, r8
 8006d12:	18e3      	adds	r3, r4, r3
 8006d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d18:	464b      	mov	r3, r9
 8006d1a:	eb45 0303 	adc.w	r3, r5, r3
 8006d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d3e:	4629      	mov	r1, r5
 8006d40:	008b      	lsls	r3, r1, #2
 8006d42:	4621      	mov	r1, r4
 8006d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d48:	4621      	mov	r1, r4
 8006d4a:	008a      	lsls	r2, r1, #2
 8006d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d50:	f7f9 fe2c 	bl	80009ac <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4b60      	ldr	r3, [pc, #384]	; (8006edc <UART_SetConfig+0x4e4>)
 8006d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	011c      	lsls	r4, r3, #4
 8006d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d74:	4642      	mov	r2, r8
 8006d76:	464b      	mov	r3, r9
 8006d78:	1891      	adds	r1, r2, r2
 8006d7a:	61b9      	str	r1, [r7, #24]
 8006d7c:	415b      	adcs	r3, r3
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d84:	4641      	mov	r1, r8
 8006d86:	1851      	adds	r1, r2, r1
 8006d88:	6139      	str	r1, [r7, #16]
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	414b      	adcs	r3, r1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	00cb      	lsls	r3, r1, #3
 8006da0:	4651      	mov	r1, sl
 8006da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006da6:	4651      	mov	r1, sl
 8006da8:	00ca      	lsls	r2, r1, #3
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	4642      	mov	r2, r8
 8006db2:	189b      	adds	r3, r3, r2
 8006db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006db8:	464b      	mov	r3, r9
 8006dba:	460a      	mov	r2, r1
 8006dbc:	eb42 0303 	adc.w	r3, r2, r3
 8006dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ddc:	4649      	mov	r1, r9
 8006dde:	008b      	lsls	r3, r1, #2
 8006de0:	4641      	mov	r1, r8
 8006de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006de6:	4641      	mov	r1, r8
 8006de8:	008a      	lsls	r2, r1, #2
 8006dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dee:	f7f9 fddd 	bl	80009ac <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4b39      	ldr	r3, [pc, #228]	; (8006edc <UART_SetConfig+0x4e4>)
 8006df8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2164      	movs	r1, #100	; 0x64
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	3332      	adds	r3, #50	; 0x32
 8006e0a:	4a34      	ldr	r2, [pc, #208]	; (8006edc <UART_SetConfig+0x4e4>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e16:	441c      	add	r4, r3
 8006e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e20:	677a      	str	r2, [r7, #116]	; 0x74
 8006e22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	1891      	adds	r1, r2, r2
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	415b      	adcs	r3, r3
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e36:	4641      	mov	r1, r8
 8006e38:	1851      	adds	r1, r2, r1
 8006e3a:	6039      	str	r1, [r7, #0]
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	414b      	adcs	r3, r1
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e4e:	4659      	mov	r1, fp
 8006e50:	00cb      	lsls	r3, r1, #3
 8006e52:	4651      	mov	r1, sl
 8006e54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e58:	4651      	mov	r1, sl
 8006e5a:	00ca      	lsls	r2, r1, #3
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4603      	mov	r3, r0
 8006e62:	4642      	mov	r2, r8
 8006e64:	189b      	adds	r3, r3, r2
 8006e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e68:	464b      	mov	r3, r9
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	eb42 0303 	adc.w	r3, r2, r3
 8006e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7c:	667a      	str	r2, [r7, #100]	; 0x64
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	008b      	lsls	r3, r1, #2
 8006e8e:	4641      	mov	r1, r8
 8006e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e94:	4641      	mov	r1, r8
 8006e96:	008a      	lsls	r2, r1, #2
 8006e98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e9c:	f7f9 fd86 	bl	80009ac <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <UART_SetConfig+0x4e4>)
 8006ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	2164      	movs	r1, #100	; 0x64
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	3332      	adds	r3, #50	; 0x32
 8006eb8:	4a08      	ldr	r2, [pc, #32]	; (8006edc <UART_SetConfig+0x4e4>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4422      	add	r2, r4
 8006ecc:	609a      	str	r2, [r3, #8]
}
 8006ece:	bf00      	nop
 8006ed0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eda:	bf00      	nop
 8006edc:	51eb851f 	.word	0x51eb851f

08006ee0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef2:	2b84      	cmp	r3, #132	; 0x84
 8006ef4:	d005      	beq.n	8006f02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ef6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	3303      	adds	r3, #3
 8006f00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f14:	f001 f87c 	bl	8008010 <vTaskStartScheduler>
  
  return osOK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f20:	b089      	sub	sp, #36	; 0x24
 8006f22:	af04      	add	r7, sp, #16
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d020      	beq.n	8006f72 <osThreadCreate+0x54>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01c      	beq.n	8006f72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685c      	ldr	r4, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681d      	ldr	r5, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691e      	ldr	r6, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ffc8 	bl	8006ee0 <makeFreeRtosPriority>
 8006f50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f5a:	9202      	str	r2, [sp, #8]
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	9100      	str	r1, [sp, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4632      	mov	r2, r6
 8006f64:	4629      	mov	r1, r5
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 fe74 	bl	8007c54 <xTaskCreateStatic>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e01c      	b.n	8006fac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685c      	ldr	r4, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f7e:	b29e      	uxth	r6, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff ffaa 	bl	8006ee0 <makeFreeRtosPriority>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	9200      	str	r2, [sp, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 feb6 	bl	8007d0e <xTaskCreate>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d001      	beq.n	8006fac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fac:	68fb      	ldr	r3, [r7, #12]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <osDelay+0x16>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e000      	b.n	8006fce <osDelay+0x18>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 ffea 	bl	8007fa8 <vTaskDelay>
  
  return osOK;
 8006fd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f000 fa2a 	bl	800744e <xQueueCreateMutexStatic>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e003      	b.n	8007006 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006ffe:	2001      	movs	r0, #1
 8007000:	f000 fa0d 	bl	800741e <xQueueCreateMutex>
 8007004:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f103 0208 	add.w	r2, r3, #8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f04f 32ff 	mov.w	r2, #4294967295
 8007026:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f103 0208 	add.w	r2, r3, #8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f103 0208 	add.w	r2, r3, #8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d103      	bne.n	80070d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e00c      	b.n	80070ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3308      	adds	r3, #8
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e002      	b.n	80070de <vListInsert+0x2e>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d2f6      	bcs.n	80070d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6892      	ldr	r2, [r2, #8]
 8007138:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6852      	ldr	r2, [r2, #4]
 8007142:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d103      	bne.n	8007156 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	1e5a      	subs	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071a2:	f002 f8ef 	bl	8009384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	441a      	add	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	3b01      	subs	r3, #1
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	22ff      	movs	r2, #255	; 0xff
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	22ff      	movs	r2, #255	; 0xff
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d114      	bne.n	8007222 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01a      	beq.n	8007236 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3310      	adds	r3, #16
 8007204:	4618      	mov	r0, r3
 8007206:	f001 f997 	bl	8008538 <xTaskRemoveFromEventList>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d012      	beq.n	8007236 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <xQueueGenericReset+0xcc>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	e009      	b.n	8007236 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3310      	adds	r3, #16
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fef1 	bl	800700e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff feec 	bl	800700e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f002 f8d5 	bl	80093e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800723a:	2301      	movs	r3, #1
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	e000ed04 	.word	0xe000ed04

08007248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08e      	sub	sp, #56	; 0x38
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <xQueueGenericCreateStatic+0x52>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <xQueueGenericCreateStatic+0x56>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <xQueueGenericCreateStatic+0x58>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	623b      	str	r3, [r7, #32]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <xQueueGenericCreateStatic+0x7e>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <xQueueGenericCreateStatic+0x82>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <xQueueGenericCreateStatic+0x84>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	61fb      	str	r3, [r7, #28]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072e6:	2348      	movs	r3, #72	; 0x48
 80072e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b48      	cmp	r3, #72	; 0x48
 80072ee:	d00a      	beq.n	8007306 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	61bb      	str	r3, [r7, #24]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007306:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800731a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	4613      	mov	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f83f 	bl	80073ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007330:	4618      	mov	r0, r3
 8007332:	3730      	adds	r7, #48	; 0x30
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	; 0x28
 800733c:	af02      	add	r7, sp, #8
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xQueueGenericCreate+0x2a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	613b      	str	r3, [r7, #16]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	fb02 f303 	mul.w	r3, r2, r3
 800736a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	3348      	adds	r3, #72	; 0x48
 8007370:	4618      	mov	r0, r3
 8007372:	f002 f929 	bl	80095c8 <pvPortMalloc>
 8007376:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d011      	beq.n	80073a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	3348      	adds	r3, #72	; 0x48
 8007386:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007390:	79fa      	ldrb	r2, [r7, #7]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4613      	mov	r3, r2
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f805 	bl	80073ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073a2:	69bb      	ldr	r3, [r7, #24]
	}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d103      	bne.n	80073c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e002      	b.n	80073ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073da:	2101      	movs	r1, #1
 80073dc:	69b8      	ldr	r0, [r7, #24]
 80073de:	f7ff fecb 	bl	8007178 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800740a:	2300      	movs	r3, #0
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f837 	bl	8007484 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800741e:	b580      	push	{r7, lr}
 8007420:	b086      	sub	sp, #24
 8007422:	af00      	add	r7, sp, #0
 8007424:	4603      	mov	r3, r0
 8007426:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007428:	2301      	movs	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	461a      	mov	r2, r3
 8007434:	6939      	ldr	r1, [r7, #16]
 8007436:	6978      	ldr	r0, [r7, #20]
 8007438:	f7ff ff7e 	bl	8007338 <xQueueGenericCreate>
 800743c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff ffd3 	bl	80073ea <prvInitialiseMutex>

		return xNewQueue;
 8007444:	68fb      	ldr	r3, [r7, #12]
	}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800744e:	b580      	push	{r7, lr}
 8007450:	b088      	sub	sp, #32
 8007452:	af02      	add	r7, sp, #8
 8007454:	4603      	mov	r3, r0
 8007456:	6039      	str	r1, [r7, #0]
 8007458:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800745a:	2301      	movs	r3, #1
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	2300      	movs	r3, #0
 8007460:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2200      	movs	r2, #0
 800746a:	6939      	ldr	r1, [r7, #16]
 800746c:	6978      	ldr	r0, [r7, #20]
 800746e:	f7ff feeb 	bl	8007248 <xQueueGenericCreateStatic>
 8007472:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff ffb8 	bl	80073ea <prvInitialiseMutex>

		return xNewQueue;
 800747a:	68fb      	ldr	r3, [r7, #12]
	}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08e      	sub	sp, #56	; 0x38
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007492:	2300      	movs	r3, #0
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueGenericSend+0x32>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <xQueueGenericSend+0x40>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <xQueueGenericSend+0x44>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <xQueueGenericSend+0x46>
 80074c8:	2300      	movs	r3, #0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <xQueueGenericSend+0x60>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d103      	bne.n	80074f2 <xQueueGenericSend+0x6e>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <xQueueGenericSend+0x72>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <xQueueGenericSend+0x74>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xQueueGenericSend+0x8e>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	623b      	str	r3, [r7, #32]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007512:	f001 f9d1 	bl	80088b8 <xTaskGetSchedulerState>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <xQueueGenericSend+0x9e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <xQueueGenericSend+0xa2>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueGenericSend+0xa4>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueGenericSend+0xbe>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	61fb      	str	r3, [r7, #28]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007542:	f001 ff1f 	bl	8009384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	429a      	cmp	r2, r3
 8007550:	d302      	bcc.n	8007558 <xQueueGenericSend+0xd4>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d129      	bne.n	80075ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800755e:	f000 fa0b 	bl	8007978 <prvCopyDataToQueue>
 8007562:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	3324      	adds	r3, #36	; 0x24
 8007570:	4618      	mov	r0, r3
 8007572:	f000 ffe1 	bl	8008538 <xTaskRemoveFromEventList>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d013      	beq.n	80075a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800757c:	4b3f      	ldr	r3, [pc, #252]	; (800767c <xQueueGenericSend+0x1f8>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	e00a      	b.n	80075a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007594:	4b39      	ldr	r3, [pc, #228]	; (800767c <xQueueGenericSend+0x1f8>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075a4:	f001 ff1e 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e063      	b.n	8007674 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075b2:	f001 ff17 	bl	80093e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e05c      	b.n	8007674 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d106      	bne.n	80075ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 f819 	bl	80085fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075ce:	f001 ff09 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075d2:	f000 fd8d 	bl	80080f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075d6:	f001 fed5 	bl	8009384 <vPortEnterCritical>
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075e0:	b25b      	sxtb	r3, r3
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e6:	d103      	bne.n	80075f0 <xQueueGenericSend+0x16c>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d103      	bne.n	8007606 <xQueueGenericSend+0x182>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007606:	f001 feed 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800760a:	1d3a      	adds	r2, r7, #4
 800760c:	f107 0314 	add.w	r3, r7, #20
 8007610:	4611      	mov	r1, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f001 f808 	bl	8008628 <xTaskCheckForTimeOut>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d124      	bne.n	8007668 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800761e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007620:	f000 faa2 	bl	8007b68 <prvIsQueueFull>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d018      	beq.n	800765c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	3310      	adds	r3, #16
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f000 ff30 	bl	8008498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800763a:	f000 fa2d 	bl	8007a98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800763e:	f000 fd65 	bl	800810c <xTaskResumeAll>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	f47f af7c 	bne.w	8007542 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800764a:	4b0c      	ldr	r3, [pc, #48]	; (800767c <xQueueGenericSend+0x1f8>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	e772      	b.n	8007542 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800765c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800765e:	f000 fa1b 	bl	8007a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007662:	f000 fd53 	bl	800810c <xTaskResumeAll>
 8007666:	e76c      	b.n	8007542 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800766a:	f000 fa15 	bl	8007a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800766e:	f000 fd4d 	bl	800810c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007674:	4618      	mov	r0, r3
 8007676:	3738      	adds	r7, #56	; 0x38
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b090      	sub	sp, #64	; 0x40
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <xQueueGenericSendFromISR+0x3c>
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <xQueueGenericSendFromISR+0x40>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <xQueueGenericSendFromISR+0x42>
 80076c0:	2300      	movs	r3, #0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d103      	bne.n	80076ea <xQueueGenericSendFromISR+0x6a>
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <xQueueGenericSendFromISR+0x6e>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <xQueueGenericSendFromISR+0x70>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	623b      	str	r3, [r7, #32]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800770a:	f001 ff1d 	bl	8009548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800770e:	f3ef 8211 	mrs	r2, BASEPRI
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	61fa      	str	r2, [r7, #28]
 8007724:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007726:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007732:	429a      	cmp	r2, r3
 8007734:	d302      	bcc.n	800773c <xQueueGenericSendFromISR+0xbc>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d12f      	bne.n	800779c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007752:	f000 f911 	bl	8007978 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007756:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d112      	bne.n	8007786 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	3324      	adds	r3, #36	; 0x24
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fee3 	bl	8008538 <xTaskRemoveFromEventList>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e007      	b.n	8007796 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800778a:	3301      	adds	r3, #1
 800778c:	b2db      	uxtb	r3, r3
 800778e:	b25a      	sxtb	r2, r3
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007796:	2301      	movs	r3, #1
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800779a:	e001      	b.n	80077a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800779c:	2300      	movs	r3, #0
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3740      	adds	r7, #64	; 0x40
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08c      	sub	sp, #48	; 0x30
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <xQueueReceive+0x30>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	623b      	str	r3, [r7, #32]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <xQueueReceive+0x3e>
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <xQueueReceive+0x42>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <xQueueReceive+0x44>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueReceive+0x5e>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	61fb      	str	r3, [r7, #28]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007816:	f001 f84f 	bl	80088b8 <xTaskGetSchedulerState>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <xQueueReceive+0x6e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xQueueReceive+0x72>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueReceive+0x74>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueReceive+0x8e>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61bb      	str	r3, [r7, #24]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007846:	f001 fd9d 	bl	8009384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01f      	beq.n	8007896 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785a:	f000 f8f7 	bl	8007a4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	1e5a      	subs	r2, r3, #1
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00f      	beq.n	800788e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	3310      	adds	r3, #16
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fe60 	bl	8008538 <xTaskRemoveFromEventList>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800787e:	4b3d      	ldr	r3, [pc, #244]	; (8007974 <xQueueReceive+0x1bc>)
 8007880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800788e:	f001 fda9 	bl	80093e4 <vPortExitCritical>
				return pdPASS;
 8007892:	2301      	movs	r3, #1
 8007894:	e069      	b.n	800796a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800789c:	f001 fda2 	bl	80093e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e062      	b.n	800796a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fea4 	bl	80085fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078b8:	f001 fd94 	bl	80093e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078bc:	f000 fc18 	bl	80080f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078c0:	f001 fd60 	bl	8009384 <vPortEnterCritical>
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d103      	bne.n	80078da <xQueueReceive+0x122>
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d103      	bne.n	80078f0 <xQueueReceive+0x138>
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f0:	f001 fd78 	bl	80093e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078f4:	1d3a      	adds	r2, r7, #4
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fe93 	bl	8008628 <xTaskCheckForTimeOut>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d123      	bne.n	8007950 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790a:	f000 f917 	bl	8007b3c <prvIsQueueEmpty>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d017      	beq.n	8007944 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	3324      	adds	r3, #36	; 0x24
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fdbb 	bl	8008498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007924:	f000 f8b8 	bl	8007a98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007928:	f000 fbf0 	bl	800810c <xTaskResumeAll>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d189      	bne.n	8007846 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <xQueueReceive+0x1bc>)
 8007934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	e780      	b.n	8007846 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007946:	f000 f8a7 	bl	8007a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800794a:	f000 fbdf 	bl	800810c <xTaskResumeAll>
 800794e:	e77a      	b.n	8007846 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007952:	f000 f8a1 	bl	8007a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007956:	f000 fbd9 	bl	800810c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800795a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795c:	f000 f8ee 	bl	8007b3c <prvIsQueueEmpty>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f43f af6f 	beq.w	8007846 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800796a:	4618      	mov	r0, r3
 800796c:	3730      	adds	r7, #48	; 0x30
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007984:	2300      	movs	r3, #0
 8007986:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d14d      	bne.n	8007a3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 ffa6 	bl	80088f4 <xTaskPriorityDisinherit>
 80079a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	e043      	b.n	8007a3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d119      	bne.n	80079ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6858      	ldr	r0, [r3, #4]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	461a      	mov	r2, r3
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	f002 f97b 	bl	8009cbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d0:	441a      	add	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d32b      	bcc.n	8007a3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	e026      	b.n	8007a3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68d8      	ldr	r0, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	461a      	mov	r2, r3
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	f002 f961 	bl	8009cbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	425b      	negs	r3, r3
 8007a06:	441a      	add	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d207      	bcs.n	8007a28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	425b      	negs	r3, r3
 8007a22:	441a      	add	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d105      	bne.n	8007a3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a42:	697b      	ldr	r3, [r7, #20]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d018      	beq.n	8007a90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	441a      	add	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d303      	bcc.n	8007a80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68d9      	ldr	r1, [r3, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6838      	ldr	r0, [r7, #0]
 8007a8c:	f002 f917 	bl	8009cbe <memcpy>
	}
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007aa0:	f001 fc70 	bl	8009384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aac:	e011      	b.n	8007ad2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fd3c 	bl	8008538 <xTaskRemoveFromEventList>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ac6:	f000 fe11 	bl	80086ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dce9      	bgt.n	8007aae <prvUnlockQueue+0x16>
 8007ada:	e000      	b.n	8007ade <prvUnlockQueue+0x46>
					break;
 8007adc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	22ff      	movs	r2, #255	; 0xff
 8007ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ae6:	f001 fc7d 	bl	80093e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aea:	f001 fc4b 	bl	8009384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007af4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007af6:	e011      	b.n	8007b1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d012      	beq.n	8007b26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3310      	adds	r3, #16
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fd17 	bl	8008538 <xTaskRemoveFromEventList>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b10:	f000 fdec 	bl	80086ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dce9      	bgt.n	8007af8 <prvUnlockQueue+0x60>
 8007b24:	e000      	b.n	8007b28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	22ff      	movs	r2, #255	; 0xff
 8007b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b30:	f001 fc58 	bl	80093e4 <vPortExitCritical>
}
 8007b34:	bf00      	nop
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b44:	f001 fc1e 	bl	8009384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e001      	b.n	8007b5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b5a:	f001 fc43 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b70:	f001 fc08 	bl	8009384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d102      	bne.n	8007b86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b80:	2301      	movs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e001      	b.n	8007b8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b8a:	f001 fc2b 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e014      	b.n	8007bd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ba8:	4a0f      	ldr	r2, [pc, #60]	; (8007be8 <vQueueAddToRegistry+0x50>)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bb4:	490c      	ldr	r1, [pc, #48]	; (8007be8 <vQueueAddToRegistry+0x50>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <vQueueAddToRegistry+0x50>)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bca:	e006      	b.n	8007bda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b07      	cmp	r3, #7
 8007bd6:	d9e7      	bls.n	8007ba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000a80 	.word	0x20000a80

08007bec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bfc:	f001 fbc2 	bl	8009384 <vPortEnterCritical>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c06:	b25b      	sxtb	r3, r3
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d103      	bne.n	8007c16 <vQueueWaitForMessageRestricted+0x2a>
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c1c:	b25b      	sxtb	r3, r3
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d103      	bne.n	8007c2c <vQueueWaitForMessageRestricted+0x40>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c2c:	f001 fbda 	bl	80093e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	3324      	adds	r3, #36	; 0x24
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fc4d 	bl	80084e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c46:	6978      	ldr	r0, [r7, #20]
 8007c48:	f7ff ff26 	bl	8007a98 <prvUnlockQueue>
	}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	; 0x38
 8007c58:	af04      	add	r7, sp, #16
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	623b      	str	r3, [r7, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xTaskCreateStatic+0x46>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	61fb      	str	r3, [r7, #28]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c9a:	23b4      	movs	r3, #180	; 0xb4
 8007c9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2bb4      	cmp	r3, #180	; 0xb4
 8007ca2:	d00a      	beq.n	8007cba <xTaskCreateStatic+0x66>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	61bb      	str	r3, [r7, #24]
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01e      	beq.n	8007d00 <xTaskCreateStatic+0xac>
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	f107 0314 	add.w	r3, r7, #20
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f850 	bl	8007d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cfa:	f000 f8eb 	bl	8007ed4 <prvAddNewTaskToReadyList>
 8007cfe:	e001      	b.n	8007d04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d04:	697b      	ldr	r3, [r7, #20]
	}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3728      	adds	r7, #40	; 0x28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b08c      	sub	sp, #48	; 0x30
 8007d12:	af04      	add	r7, sp, #16
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 fc50 	bl	80095c8 <pvPortMalloc>
 8007d28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d30:	20b4      	movs	r0, #180	; 0xb4
 8007d32:	f001 fc49 	bl	80095c8 <pvPortMalloc>
 8007d36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	631a      	str	r2, [r3, #48]	; 0x30
 8007d44:	e005      	b.n	8007d52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d46:	6978      	ldr	r0, [r7, #20]
 8007d48:	f001 fd0a 	bl	8009760 <vPortFree>
 8007d4c:	e001      	b.n	8007d52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d017      	beq.n	8007d88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d60:	88fa      	ldrh	r2, [r7, #6]
 8007d62:	2300      	movs	r3, #0
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f80e 	bl	8007d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d7c:	69f8      	ldr	r0, [r7, #28]
 8007d7e:	f000 f8a9 	bl	8007ed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d82:	2301      	movs	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e002      	b.n	8007d8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007db0:	3b01      	subs	r3, #1
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f023 0307 	bic.w	r3, r3, #7
 8007dbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	617b      	str	r3, [r7, #20]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01f      	beq.n	8007e26 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e012      	b.n	8007e12 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	7819      	ldrb	r1, [r3, #0]
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	3334      	adds	r3, #52	; 0x34
 8007dfc:	460a      	mov	r2, r1
 8007dfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	61fb      	str	r3, [r7, #28]
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	2b0f      	cmp	r3, #15
 8007e16:	d9e9      	bls.n	8007dec <prvInitialiseNewTask+0x54>
 8007e18:	e000      	b.n	8007e1c <prvInitialiseNewTask+0x84>
			{
				break;
 8007e1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e24:	e003      	b.n	8007e2e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	2b06      	cmp	r3, #6
 8007e32:	d901      	bls.n	8007e38 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e34:	2306      	movs	r3, #6
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e42:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	2200      	movs	r2, #0
 8007e48:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff f8fd 	bl	800704e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	3318      	adds	r3, #24
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff f8f8 	bl	800704e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	f1c3 0207 	rsb	r2, r3, #7
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	334c      	adds	r3, #76	; 0x4c
 8007e88:	2260      	movs	r2, #96	; 0x60
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 ff24 	bl	8009cda <memset>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <prvInitialiseNewTask+0x130>)
 8007e96:	651a      	str	r2, [r3, #80]	; 0x50
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	4a0c      	ldr	r2, [pc, #48]	; (8007ecc <prvInitialiseNewTask+0x134>)
 8007e9c:	655a      	str	r2, [r3, #84]	; 0x54
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	4a0b      	ldr	r2, [pc, #44]	; (8007ed0 <prvInitialiseNewTask+0x138>)
 8007ea2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	69b8      	ldr	r0, [r7, #24]
 8007eaa:	f001 f941 	bl	8009130 <pxPortInitialiseStack>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ec0:	bf00      	nop
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	0800a5f0 	.word	0x0800a5f0
 8007ecc:	0800a610 	.word	0x0800a610
 8007ed0:	0800a5d0 	.word	0x0800a5d0

08007ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007edc:	f001 fa52 	bl	8009384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ee0:	4b2a      	ldr	r3, [pc, #168]	; (8007f8c <prvAddNewTaskToReadyList+0xb8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a29      	ldr	r2, [pc, #164]	; (8007f8c <prvAddNewTaskToReadyList+0xb8>)
 8007ee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eea:	4b29      	ldr	r3, [pc, #164]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ef2:	4a27      	ldr	r2, [pc, #156]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ef8:	4b24      	ldr	r3, [pc, #144]	; (8007f8c <prvAddNewTaskToReadyList+0xb8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d110      	bne.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f00:	f000 fc18 	bl	8008734 <prvInitialiseTaskLists>
 8007f04:	e00d      	b.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <prvAddNewTaskToReadyList+0xc0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d802      	bhi.n	8007f22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f1c:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f22:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <prvAddNewTaskToReadyList+0xc4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3301      	adds	r3, #1
 8007f28:	4a1b      	ldr	r2, [pc, #108]	; (8007f98 <prvAddNewTaskToReadyList+0xc4>)
 8007f2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	2201      	movs	r2, #1
 8007f32:	409a      	lsls	r2, r3
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <prvAddNewTaskToReadyList+0xc8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	4a18      	ldr	r2, [pc, #96]	; (8007f9c <prvAddNewTaskToReadyList+0xc8>)
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <prvAddNewTaskToReadyList+0xcc>)
 8007f4c:	441a      	add	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7ff f887 	bl	8007068 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f5a:	f001 fa43 	bl	80093e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <prvAddNewTaskToReadyList+0xc0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f66:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <prvAddNewTaskToReadyList+0xbc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d207      	bcs.n	8007f84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f74:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <prvAddNewTaskToReadyList+0xd0>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000bc0 	.word	0x20000bc0
 8007f90:	20000ac0 	.word	0x20000ac0
 8007f94:	20000bcc 	.word	0x20000bcc
 8007f98:	20000bdc 	.word	0x20000bdc
 8007f9c:	20000bc8 	.word	0x20000bc8
 8007fa0:	20000ac4 	.word	0x20000ac4
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d017      	beq.n	8007fea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <vTaskDelay+0x60>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <vTaskDelay+0x30>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fd8:	f000 f88a 	bl	80080f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fd0e 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fe4:	f000 f892 	bl	800810c <xTaskResumeAll>
 8007fe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <vTaskDelay+0x64>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000be8 	.word	0x20000be8
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800801e:	463a      	mov	r2, r7
 8008020:	1d39      	adds	r1, r7, #4
 8008022:	f107 0308 	add.w	r3, r7, #8
 8008026:	4618      	mov	r0, r3
 8008028:	f7f8 fe42 	bl	8000cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	9202      	str	r2, [sp, #8]
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2300      	movs	r3, #0
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	460a      	mov	r2, r1
 800803e:	4924      	ldr	r1, [pc, #144]	; (80080d0 <vTaskStartScheduler+0xc0>)
 8008040:	4824      	ldr	r0, [pc, #144]	; (80080d4 <vTaskStartScheduler+0xc4>)
 8008042:	f7ff fe07 	bl	8007c54 <xTaskCreateStatic>
 8008046:	4603      	mov	r3, r0
 8008048:	4a23      	ldr	r2, [pc, #140]	; (80080d8 <vTaskStartScheduler+0xc8>)
 800804a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800804c:	4b22      	ldr	r3, [pc, #136]	; (80080d8 <vTaskStartScheduler+0xc8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008054:	2301      	movs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e001      	b.n	800805e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d102      	bne.n	800806a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008064:	f000 fd32 	bl	8008acc <xTimerCreateTimerTask>
 8008068:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d11b      	bne.n	80080a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	613b      	str	r3, [r7, #16]
}
 8008082:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008084:	4b15      	ldr	r3, [pc, #84]	; (80080dc <vTaskStartScheduler+0xcc>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	334c      	adds	r3, #76	; 0x4c
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <vTaskStartScheduler+0xd0>)
 800808c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800808e:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <vTaskStartScheduler+0xd4>)
 8008090:	f04f 32ff 	mov.w	r2, #4294967295
 8008094:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <vTaskStartScheduler+0xd8>)
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800809c:	4b13      	ldr	r3, [pc, #76]	; (80080ec <vTaskStartScheduler+0xdc>)
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080a2:	f001 f8cd 	bl	8009240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080a6:	e00e      	b.n	80080c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d10a      	bne.n	80080c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <vTaskStartScheduler+0xb4>
}
 80080c6:	bf00      	nop
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	0800a5a0 	.word	0x0800a5a0
 80080d4:	08008705 	.word	0x08008705
 80080d8:	20000be4 	.word	0x20000be4
 80080dc:	20000ac0 	.word	0x20000ac0
 80080e0:	200000fc 	.word	0x200000fc
 80080e4:	20000be0 	.word	0x20000be0
 80080e8:	20000bcc 	.word	0x20000bcc
 80080ec:	20000bc4 	.word	0x20000bc4

080080f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080f4:	4b04      	ldr	r3, [pc, #16]	; (8008108 <vTaskSuspendAll+0x18>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	4a03      	ldr	r2, [pc, #12]	; (8008108 <vTaskSuspendAll+0x18>)
 80080fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080fe:	bf00      	nop
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	20000be8 	.word	0x20000be8

0800810c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800811a:	4b41      	ldr	r3, [pc, #260]	; (8008220 <xTaskResumeAll+0x114>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <xTaskResumeAll+0x2c>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	603b      	str	r3, [r7, #0]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008138:	f001 f924 	bl	8009384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800813c:	4b38      	ldr	r3, [pc, #224]	; (8008220 <xTaskResumeAll+0x114>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3b01      	subs	r3, #1
 8008142:	4a37      	ldr	r2, [pc, #220]	; (8008220 <xTaskResumeAll+0x114>)
 8008144:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008146:	4b36      	ldr	r3, [pc, #216]	; (8008220 <xTaskResumeAll+0x114>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d161      	bne.n	8008212 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800814e:	4b35      	ldr	r3, [pc, #212]	; (8008224 <xTaskResumeAll+0x118>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d05d      	beq.n	8008212 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008156:	e02e      	b.n	80081b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008158:	4b33      	ldr	r3, [pc, #204]	; (8008228 <xTaskResumeAll+0x11c>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3318      	adds	r3, #24
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe ffdc 	bl	8007122 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3304      	adds	r3, #4
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe ffd7 	bl	8007122 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	2201      	movs	r2, #1
 800817a:	409a      	lsls	r2, r3
 800817c:	4b2b      	ldr	r3, [pc, #172]	; (800822c <xTaskResumeAll+0x120>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4313      	orrs	r3, r2
 8008182:	4a2a      	ldr	r2, [pc, #168]	; (800822c <xTaskResumeAll+0x120>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4a27      	ldr	r2, [pc, #156]	; (8008230 <xTaskResumeAll+0x124>)
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7fe ff63 	bl	8007068 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a6:	4b23      	ldr	r3, [pc, #140]	; (8008234 <xTaskResumeAll+0x128>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d302      	bcc.n	80081b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80081b0:	4b21      	ldr	r3, [pc, #132]	; (8008238 <xTaskResumeAll+0x12c>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081b6:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <xTaskResumeAll+0x11c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1cc      	bne.n	8008158 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081c4:	f000 fb58 	bl	8008878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081c8:	4b1c      	ldr	r3, [pc, #112]	; (800823c <xTaskResumeAll+0x130>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081d4:	f000 f846 	bl	8008264 <xTaskIncrementTick>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <xTaskResumeAll+0x12c>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f1      	bne.n	80081d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80081f0:	4b12      	ldr	r3, [pc, #72]	; (800823c <xTaskResumeAll+0x130>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <xTaskResumeAll+0x12c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081fe:	2301      	movs	r3, #1
 8008200:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008202:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <xTaskResumeAll+0x134>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008212:	f001 f8e7 	bl	80093e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008216:	68bb      	ldr	r3, [r7, #8]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20000be8 	.word	0x20000be8
 8008224:	20000bc0 	.word	0x20000bc0
 8008228:	20000b80 	.word	0x20000b80
 800822c:	20000bc8 	.word	0x20000bc8
 8008230:	20000ac4 	.word	0x20000ac4
 8008234:	20000ac0 	.word	0x20000ac0
 8008238:	20000bd4 	.word	0x20000bd4
 800823c:	20000bd0 	.word	0x20000bd0
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <xTaskGetTickCount+0x1c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008250:	687b      	ldr	r3, [r7, #4]
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000bc4 	.word	0x20000bc4

08008264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800826e:	4b4e      	ldr	r3, [pc, #312]	; (80083a8 <xTaskIncrementTick+0x144>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 808e 	bne.w	8008394 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008278:	4b4c      	ldr	r3, [pc, #304]	; (80083ac <xTaskIncrementTick+0x148>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008280:	4a4a      	ldr	r2, [pc, #296]	; (80083ac <xTaskIncrementTick+0x148>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d120      	bne.n	80082ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800828c:	4b48      	ldr	r3, [pc, #288]	; (80083b0 <xTaskIncrementTick+0x14c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <xTaskIncrementTick+0x48>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	603b      	str	r3, [r7, #0]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <xTaskIncrementTick+0x46>
 80082ac:	4b40      	ldr	r3, [pc, #256]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	4b40      	ldr	r3, [pc, #256]	; (80083b4 <xTaskIncrementTick+0x150>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a3e      	ldr	r2, [pc, #248]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	4a3e      	ldr	r2, [pc, #248]	; (80083b4 <xTaskIncrementTick+0x150>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	4b3d      	ldr	r3, [pc, #244]	; (80083b8 <xTaskIncrementTick+0x154>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	4a3c      	ldr	r2, [pc, #240]	; (80083b8 <xTaskIncrementTick+0x154>)
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	f000 fad5 	bl	8008878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ce:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <xTaskIncrementTick+0x158>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d348      	bcc.n	800836a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d8:	4b35      	ldr	r3, [pc, #212]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d104      	bne.n	80082ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <xTaskIncrementTick+0x158>)
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	601a      	str	r2, [r3, #0]
					break;
 80082ea:	e03e      	b.n	800836a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ec:	4b30      	ldr	r3, [pc, #192]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d203      	bcs.n	800830c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008304:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <xTaskIncrementTick+0x158>)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800830a:	e02e      	b.n	800836a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	3304      	adds	r3, #4
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe ff06 	bl	8007122 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	3318      	adds	r3, #24
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fefd 	bl	8007122 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	2201      	movs	r2, #1
 800832e:	409a      	lsls	r2, r3
 8008330:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <xTaskIncrementTick+0x15c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4313      	orrs	r3, r2
 8008336:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <xTaskIncrementTick+0x15c>)
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4a1f      	ldr	r2, [pc, #124]	; (80083c4 <xTaskIncrementTick+0x160>)
 8008348:	441a      	add	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe fe89 	bl	8007068 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <xTaskIncrementTick+0x164>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	429a      	cmp	r2, r3
 8008362:	d3b9      	bcc.n	80082d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008368:	e7b6      	b.n	80082d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800836a:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <xTaskIncrementTick+0x164>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4914      	ldr	r1, [pc, #80]	; (80083c4 <xTaskIncrementTick+0x160>)
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d901      	bls.n	8008386 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <xTaskIncrementTick+0x168>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800838e:	2301      	movs	r3, #1
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e004      	b.n	800839e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <xTaskIncrementTick+0x16c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3301      	adds	r3, #1
 800839a:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <xTaskIncrementTick+0x16c>)
 800839c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000be8 	.word	0x20000be8
 80083ac:	20000bc4 	.word	0x20000bc4
 80083b0:	20000b78 	.word	0x20000b78
 80083b4:	20000b7c 	.word	0x20000b7c
 80083b8:	20000bd8 	.word	0x20000bd8
 80083bc:	20000be0 	.word	0x20000be0
 80083c0:	20000bc8 	.word	0x20000bc8
 80083c4:	20000ac4 	.word	0x20000ac4
 80083c8:	20000ac0 	.word	0x20000ac0
 80083cc:	20000bd4 	.word	0x20000bd4
 80083d0:	20000bd0 	.word	0x20000bd0

080083d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083da:	4b29      	ldr	r3, [pc, #164]	; (8008480 <vTaskSwitchContext+0xac>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083e2:	4b28      	ldr	r3, [pc, #160]	; (8008484 <vTaskSwitchContext+0xb0>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083e8:	e044      	b.n	8008474 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80083ea:	4b26      	ldr	r3, [pc, #152]	; (8008484 <vTaskSwitchContext+0xb0>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f0:	4b25      	ldr	r3, [pc, #148]	; (8008488 <vTaskSwitchContext+0xb4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	fab3 f383 	clz	r3, r3
 80083fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	f1c3 031f 	rsb	r3, r3, #31
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	4921      	ldr	r1, [pc, #132]	; (800848c <vTaskSwitchContext+0xb8>)
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	440b      	add	r3, r1
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <vTaskSwitchContext+0x5c>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	607b      	str	r3, [r7, #4]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <vTaskSwitchContext+0x5a>
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4a14      	ldr	r2, [pc, #80]	; (800848c <vTaskSwitchContext+0xb8>)
 800843c:	4413      	add	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3308      	adds	r3, #8
 8008452:	429a      	cmp	r2, r3
 8008454:	d104      	bne.n	8008460 <vTaskSwitchContext+0x8c>
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	605a      	str	r2, [r3, #4]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <vTaskSwitchContext+0xbc>)
 8008468:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <vTaskSwitchContext+0xbc>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	334c      	adds	r3, #76	; 0x4c
 8008470:	4a08      	ldr	r2, [pc, #32]	; (8008494 <vTaskSwitchContext+0xc0>)
 8008472:	6013      	str	r3, [r2, #0]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000be8 	.word	0x20000be8
 8008484:	20000bd4 	.word	0x20000bd4
 8008488:	20000bc8 	.word	0x20000bc8
 800848c:	20000ac4 	.word	0x20000ac4
 8008490:	20000ac0 	.word	0x20000ac0
 8008494:	200000fc 	.word	0x200000fc

08008498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	60fb      	str	r3, [r7, #12]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084be:	4b07      	ldr	r3, [pc, #28]	; (80084dc <vTaskPlaceOnEventList+0x44>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3318      	adds	r3, #24
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fe fdf2 	bl	80070b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084cc:	2101      	movs	r1, #1
 80084ce:	6838      	ldr	r0, [r7, #0]
 80084d0:	f000 fa96 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20000ac0 	.word	0x20000ac0

080084e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	617b      	str	r3, [r7, #20]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <vTaskPlaceOnEventListRestricted+0x54>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3318      	adds	r3, #24
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7fe fda9 	bl	8007068 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800851c:	f04f 33ff 	mov.w	r3, #4294967295
 8008520:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	68b8      	ldr	r0, [r7, #8]
 8008526:	f000 fa6b 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
	}
 800852a:	bf00      	nop
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20000ac0 	.word	0x20000ac0

08008538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60fb      	str	r3, [r7, #12]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	3318      	adds	r3, #24
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe fdda 	bl	8007122 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800856e:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <xTaskRemoveFromEventList+0xac>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d11c      	bne.n	80085b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	3304      	adds	r3, #4
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe fdd1 	bl	8007122 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	2201      	movs	r2, #1
 8008586:	409a      	lsls	r2, r3
 8008588:	4b17      	ldr	r3, [pc, #92]	; (80085e8 <xTaskRemoveFromEventList+0xb0>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4313      	orrs	r3, r2
 800858e:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <xTaskRemoveFromEventList+0xb0>)
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4a13      	ldr	r2, [pc, #76]	; (80085ec <xTaskRemoveFromEventList+0xb4>)
 80085a0:	441a      	add	r2, r3
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fe fd5d 	bl	8007068 <vListInsertEnd>
 80085ae:	e005      	b.n	80085bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	3318      	adds	r3, #24
 80085b4:	4619      	mov	r1, r3
 80085b6:	480e      	ldr	r0, [pc, #56]	; (80085f0 <xTaskRemoveFromEventList+0xb8>)
 80085b8:	f7fe fd56 	bl	8007068 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <xTaskRemoveFromEventList+0xbc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d905      	bls.n	80085d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085ca:	2301      	movs	r3, #1
 80085cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085ce:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <xTaskRemoveFromEventList+0xc0>)
 80085d0:	2201      	movs	r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e001      	b.n	80085da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085da:	697b      	ldr	r3, [r7, #20]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000be8 	.word	0x20000be8
 80085e8:	20000bc8 	.word	0x20000bc8
 80085ec:	20000ac4 	.word	0x20000ac4
 80085f0:	20000b80 	.word	0x20000b80
 80085f4:	20000ac0 	.word	0x20000ac0
 80085f8:	20000bd4 	.word	0x20000bd4

080085fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <vTaskInternalSetTimeOutState+0x24>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <vTaskInternalSetTimeOutState+0x28>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	605a      	str	r2, [r3, #4]
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20000bd8 	.word	0x20000bd8
 8008624:	20000bc4 	.word	0x20000bc4

08008628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	613b      	str	r3, [r7, #16]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60fb      	str	r3, [r7, #12]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800866a:	f000 fe8b 	bl	8009384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800866e:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <xTaskCheckForTimeOut+0xbc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008686:	d102      	bne.n	800868e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e023      	b.n	80086d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <xTaskCheckForTimeOut+0xc0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d007      	beq.n	80086aa <xTaskCheckForTimeOut+0x82>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d302      	bcc.n	80086aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e015      	b.n	80086d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d20b      	bcs.n	80086cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff9b 	bl	80085fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e004      	b.n	80086d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086d6:	f000 fe85 	bl	80093e4 <vPortExitCritical>

	return xReturn;
 80086da:	69fb      	ldr	r3, [r7, #28]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000bc4 	.word	0x20000bc4
 80086e8:	20000bd8 	.word	0x20000bd8

080086ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086f0:	4b03      	ldr	r3, [pc, #12]	; (8008700 <vTaskMissedYield+0x14>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	20000bd4 	.word	0x20000bd4

08008704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800870c:	f000 f852 	bl	80087b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008710:	4b06      	ldr	r3, [pc, #24]	; (800872c <prvIdleTask+0x28>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d9f9      	bls.n	800870c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <prvIdleTask+0x2c>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008728:	e7f0      	b.n	800870c <prvIdleTask+0x8>
 800872a:	bf00      	nop
 800872c:	20000ac4 	.word	0x20000ac4
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800873a:	2300      	movs	r3, #0
 800873c:	607b      	str	r3, [r7, #4]
 800873e:	e00c      	b.n	800875a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4a12      	ldr	r2, [pc, #72]	; (8008794 <prvInitialiseTaskLists+0x60>)
 800874c:	4413      	add	r3, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fc5d 	bl	800700e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b06      	cmp	r3, #6
 800875e:	d9ef      	bls.n	8008740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008760:	480d      	ldr	r0, [pc, #52]	; (8008798 <prvInitialiseTaskLists+0x64>)
 8008762:	f7fe fc54 	bl	800700e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008766:	480d      	ldr	r0, [pc, #52]	; (800879c <prvInitialiseTaskLists+0x68>)
 8008768:	f7fe fc51 	bl	800700e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800876c:	480c      	ldr	r0, [pc, #48]	; (80087a0 <prvInitialiseTaskLists+0x6c>)
 800876e:	f7fe fc4e 	bl	800700e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008772:	480c      	ldr	r0, [pc, #48]	; (80087a4 <prvInitialiseTaskLists+0x70>)
 8008774:	f7fe fc4b 	bl	800700e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008778:	480b      	ldr	r0, [pc, #44]	; (80087a8 <prvInitialiseTaskLists+0x74>)
 800877a:	f7fe fc48 	bl	800700e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800877e:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <prvInitialiseTaskLists+0x78>)
 8008780:	4a05      	ldr	r2, [pc, #20]	; (8008798 <prvInitialiseTaskLists+0x64>)
 8008782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <prvInitialiseTaskLists+0x7c>)
 8008786:	4a05      	ldr	r2, [pc, #20]	; (800879c <prvInitialiseTaskLists+0x68>)
 8008788:	601a      	str	r2, [r3, #0]
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000ac4 	.word	0x20000ac4
 8008798:	20000b50 	.word	0x20000b50
 800879c:	20000b64 	.word	0x20000b64
 80087a0:	20000b80 	.word	0x20000b80
 80087a4:	20000b94 	.word	0x20000b94
 80087a8:	20000bac 	.word	0x20000bac
 80087ac:	20000b78 	.word	0x20000b78
 80087b0:	20000b7c 	.word	0x20000b7c

080087b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087ba:	e019      	b.n	80087f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087bc:	f000 fde2 	bl	8009384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c0:	4b10      	ldr	r3, [pc, #64]	; (8008804 <prvCheckTasksWaitingTermination+0x50>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fe fca8 	bl	8007122 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087d2:	4b0d      	ldr	r3, [pc, #52]	; (8008808 <prvCheckTasksWaitingTermination+0x54>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a0b      	ldr	r2, [pc, #44]	; (8008808 <prvCheckTasksWaitingTermination+0x54>)
 80087da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087dc:	4b0b      	ldr	r3, [pc, #44]	; (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087e6:	f000 fdfd 	bl	80093e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f810 	bl	8008810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <prvCheckTasksWaitingTermination+0x58>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e1      	bne.n	80087bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000b94 	.word	0x20000b94
 8008808:	20000bc0 	.word	0x20000bc0
 800880c:	20000ba8 	.word	0x20000ba8

08008810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	334c      	adds	r3, #76	; 0x4c
 800881c:	4618      	mov	r0, r3
 800881e:	f001 fb07 	bl	8009e30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d108      	bne.n	800883e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	4618      	mov	r0, r3
 8008832:	f000 ff95 	bl	8009760 <vPortFree>
				vPortFree( pxTCB );
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 ff92 	bl	8009760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800883c:	e018      	b.n	8008870 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008844:	2b01      	cmp	r3, #1
 8008846:	d103      	bne.n	8008850 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 ff89 	bl	8009760 <vPortFree>
	}
 800884e:	e00f      	b.n	8008870 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008856:	2b02      	cmp	r3, #2
 8008858:	d00a      	beq.n	8008870 <prvDeleteTCB+0x60>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	60fb      	str	r3, [r7, #12]
}
 800886c:	bf00      	nop
 800886e:	e7fe      	b.n	800886e <prvDeleteTCB+0x5e>
	}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <prvResetNextTaskUnblockTime+0x38>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d104      	bne.n	8008892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <prvResetNextTaskUnblockTime+0x3c>)
 800888a:	f04f 32ff 	mov.w	r2, #4294967295
 800888e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008890:	e008      	b.n	80088a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008892:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <prvResetNextTaskUnblockTime+0x38>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	4a04      	ldr	r2, [pc, #16]	; (80088b4 <prvResetNextTaskUnblockTime+0x3c>)
 80088a2:	6013      	str	r3, [r2, #0]
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	20000b78 	.word	0x20000b78
 80088b4:	20000be0 	.word	0x20000be0

080088b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088be:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <xTaskGetSchedulerState+0x34>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088c6:	2301      	movs	r3, #1
 80088c8:	607b      	str	r3, [r7, #4]
 80088ca:	e008      	b.n	80088de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088cc:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <xTaskGetSchedulerState+0x38>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088d4:	2302      	movs	r3, #2
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	e001      	b.n	80088de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088da:	2300      	movs	r3, #0
 80088dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088de:	687b      	ldr	r3, [r7, #4]
	}
 80088e0:	4618      	mov	r0, r3
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20000bcc 	.word	0x20000bcc
 80088f0:	20000be8 	.word	0x20000be8

080088f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d06e      	beq.n	80089e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800890a:	4b3a      	ldr	r3, [pc, #232]	; (80089f4 <xTaskPriorityDisinherit+0x100>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	429a      	cmp	r2, r3
 8008912:	d00a      	beq.n	800892a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	60fb      	str	r3, [r7, #12]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60bb      	str	r3, [r7, #8]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894c:	1e5a      	subs	r2, r3, #1
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	429a      	cmp	r2, r3
 800895c:	d044      	beq.n	80089e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008962:	2b00      	cmp	r3, #0
 8008964:	d140      	bne.n	80089e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3304      	adds	r3, #4
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fbd9 	bl	8007122 <uxListRemove>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d115      	bne.n	80089a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897a:	491f      	ldr	r1, [pc, #124]	; (80089f8 <xTaskPriorityDisinherit+0x104>)
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xTaskPriorityDisinherit+0xae>
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	2201      	movs	r2, #1
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	43da      	mvns	r2, r3
 8008998:	4b18      	ldr	r3, [pc, #96]	; (80089fc <xTaskPriorityDisinherit+0x108>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4013      	ands	r3, r2
 800899e:	4a17      	ldr	r2, [pc, #92]	; (80089fc <xTaskPriorityDisinherit+0x108>)
 80089a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	f1c3 0207 	rsb	r2, r3, #7
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	2201      	movs	r2, #1
 80089bc:	409a      	lsls	r2, r3
 80089be:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <xTaskPriorityDisinherit+0x108>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	4a0d      	ldr	r2, [pc, #52]	; (80089fc <xTaskPriorityDisinherit+0x108>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a08      	ldr	r2, [pc, #32]	; (80089f8 <xTaskPriorityDisinherit+0x104>)
 80089d6:	441a      	add	r2, r3
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe fb42 	bl	8007068 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089e8:	697b      	ldr	r3, [r7, #20]
	}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000ac0 	.word	0x20000ac0
 80089f8:	20000ac4 	.word	0x20000ac4
 80089fc:	20000bc8 	.word	0x20000bc8

08008a00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a0a:	4b29      	ldr	r3, [pc, #164]	; (8008ab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fb83 	bl	8007122 <uxListRemove>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	2201      	movs	r2, #1
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	43da      	mvns	r2, r3
 8008a30:	4b21      	ldr	r3, [pc, #132]	; (8008ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4013      	ands	r3, r2
 8008a36:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d10a      	bne.n	8008a58 <prvAddCurrentTaskToDelayedList+0x58>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a48:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4619      	mov	r1, r3
 8008a50:	481a      	ldr	r0, [pc, #104]	; (8008abc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a52:	f7fe fb09 	bl	8007068 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a56:	e026      	b.n	8008aa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a60:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d209      	bcs.n	8008a84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a70:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fe fb17 	bl	80070b0 <vListInsert>
}
 8008a82:	e010      	b.n	8008aa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f7fe fb0d 	bl	80070b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d202      	bcs.n	8008aa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008aa0:	4a09      	ldr	r2, [pc, #36]	; (8008ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	6013      	str	r3, [r2, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000bc4 	.word	0x20000bc4
 8008ab4:	20000ac0 	.word	0x20000ac0
 8008ab8:	20000bc8 	.word	0x20000bc8
 8008abc:	20000bac 	.word	0x20000bac
 8008ac0:	20000b7c 	.word	0x20000b7c
 8008ac4:	20000b78 	.word	0x20000b78
 8008ac8:	20000be0 	.word	0x20000be0

08008acc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08a      	sub	sp, #40	; 0x28
 8008ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ad6:	f000 faeb 	bl	80090b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ada:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <xTimerCreateTimerTask+0x80>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d021      	beq.n	8008b26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008aea:	1d3a      	adds	r2, r7, #4
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	f107 030c 	add.w	r3, r7, #12
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f8 f8f5 	bl	8000ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	9202      	str	r2, [sp, #8]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	2302      	movs	r3, #2
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	460a      	mov	r2, r1
 8008b0c:	4910      	ldr	r1, [pc, #64]	; (8008b50 <xTimerCreateTimerTask+0x84>)
 8008b0e:	4811      	ldr	r0, [pc, #68]	; (8008b54 <xTimerCreateTimerTask+0x88>)
 8008b10:	f7ff f8a0 	bl	8007c54 <xTaskCreateStatic>
 8008b14:	4603      	mov	r3, r0
 8008b16:	4a10      	ldr	r2, [pc, #64]	; (8008b58 <xTimerCreateTimerTask+0x8c>)
 8008b18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b1a:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <xTimerCreateTimerTask+0x8c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b22:	2301      	movs	r3, #1
 8008b24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	613b      	str	r3, [r7, #16]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b42:	697b      	ldr	r3, [r7, #20]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20000c1c 	.word	0x20000c1c
 8008b50:	0800a5a8 	.word	0x0800a5a8
 8008b54:	08008c91 	.word	0x08008c91
 8008b58:	20000c20 	.word	0x20000c20

08008b5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
 8008b68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	623b      	str	r3, [r7, #32]
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <xTimerGenericCommand+0x98>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d02a      	beq.n	8008be8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	dc18      	bgt.n	8008bd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ba4:	f7ff fe88 	bl	80088b8 <xTaskGetSchedulerState>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d109      	bne.n	8008bc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bae:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <xTimerGenericCommand+0x98>)
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f107 0114 	add.w	r1, r7, #20
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bba:	f7fe fc63 	bl	8007484 <xQueueGenericSend>
 8008bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8008bc0:	e012      	b.n	8008be8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <xTimerGenericCommand+0x98>)
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	f107 0114 	add.w	r1, r7, #20
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f7fe fc59 	bl	8007484 <xQueueGenericSend>
 8008bd2:	6278      	str	r0, [r7, #36]	; 0x24
 8008bd4:	e008      	b.n	8008be8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bd6:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <xTimerGenericCommand+0x98>)
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f107 0114 	add.w	r1, r7, #20
 8008bde:	2300      	movs	r3, #0
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	f7fe fd4d 	bl	8007680 <xQueueGenericSendFromISR>
 8008be6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3728      	adds	r7, #40	; 0x28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000c1c 	.word	0x20000c1c

08008bf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c02:	4b22      	ldr	r3, [pc, #136]	; (8008c8c <prvProcessExpiredTimer+0x94>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fa86 	bl	8007122 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d022      	beq.n	8008c6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	699a      	ldr	r2, [r3, #24]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	18d1      	adds	r1, r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	6978      	ldr	r0, [r7, #20]
 8008c32:	f000 f8d1 	bl	8008dd8 <prvInsertTimerInActiveList>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01f      	beq.n	8008c7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	2100      	movs	r1, #0
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f7ff ff88 	bl	8008b5c <xTimerGenericCommand>
 8008c4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d113      	bne.n	8008c7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	60fb      	str	r3, [r7, #12]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c70:	f023 0301 	bic.w	r3, r3, #1
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	6978      	ldr	r0, [r7, #20]
 8008c82:	4798      	blx	r3
}
 8008c84:	bf00      	nop
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000c14 	.word	0x20000c14

08008c90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f857 	bl	8008d50 <prvGetNextExpireTime>
 8008ca2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f803 	bl	8008cb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cae:	f000 f8d5 	bl	8008e5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cb2:	e7f1      	b.n	8008c98 <prvTimerTask+0x8>

08008cb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cbe:	f7ff fa17 	bl	80080f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cc2:	f107 0308 	add.w	r3, r7, #8
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f866 	bl	8008d98 <prvSampleTimeNow>
 8008ccc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d130      	bne.n	8008d36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10a      	bne.n	8008cf0 <prvProcessTimerOrBlockTask+0x3c>
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d806      	bhi.n	8008cf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ce2:	f7ff fa13 	bl	800810c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ff85 	bl	8008bf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cee:	e024      	b.n	8008d3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cf6:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <prvProcessTimerOrBlockTask+0x90>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <prvProcessTimerOrBlockTask+0x50>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <prvProcessTimerOrBlockTask+0x52>
 8008d04:	2300      	movs	r3, #0
 8008d06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <prvProcessTimerOrBlockTask+0x94>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4619      	mov	r1, r3
 8008d16:	f7fe ff69 	bl	8007bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d1a:	f7ff f9f7 	bl	800810c <xTaskResumeAll>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <prvProcessTimerOrBlockTask+0x98>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
}
 8008d34:	e001      	b.n	8008d3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d36:	f7ff f9e9 	bl	800810c <xTaskResumeAll>
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000c18 	.word	0x20000c18
 8008d48:	20000c1c 	.word	0x20000c1c
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d58:	4b0e      	ldr	r3, [pc, #56]	; (8008d94 <prvGetNextExpireTime+0x44>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <prvGetNextExpireTime+0x16>
 8008d62:	2201      	movs	r2, #1
 8008d64:	e000      	b.n	8008d68 <prvGetNextExpireTime+0x18>
 8008d66:	2200      	movs	r2, #0
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d74:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <prvGetNextExpireTime+0x44>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e001      	b.n	8008d84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d84:	68fb      	ldr	r3, [r7, #12]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	20000c14 	.word	0x20000c14

08008d98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008da0:	f7ff fa50 	bl	8008244 <xTaskGetTickCount>
 8008da4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008da6:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <prvSampleTimeNow+0x3c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d205      	bcs.n	8008dbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008db0:	f000 f91a 	bl	8008fe8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dc2:	4a04      	ldr	r2, [pc, #16]	; (8008dd4 <prvSampleTimeNow+0x3c>)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000c24 	.word	0x20000c24

08008dd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d812      	bhi.n	8008e24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	1ad2      	subs	r2, r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	e01b      	b.n	8008e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e12:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <prvInsertTimerInActiveList+0x7c>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7fe f947 	bl	80070b0 <vListInsert>
 8008e22:	e012      	b.n	8008e4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d206      	bcs.n	8008e3a <prvInsertTimerInActiveList+0x62>
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d302      	bcc.n	8008e3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e007      	b.n	8008e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <prvInsertTimerInActiveList+0x80>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe f933 	bl	80070b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e4a:	697b      	ldr	r3, [r7, #20]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20000c18 	.word	0x20000c18
 8008e58:	20000c14 	.word	0x20000c14

08008e5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08c      	sub	sp, #48	; 0x30
 8008e60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e62:	e0ae      	b.n	8008fc2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f2c0 80aa 	blt.w	8008fc0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe f950 	bl	8007122 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e82:	1d3b      	adds	r3, r7, #4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff ff87 	bl	8008d98 <prvSampleTimeNow>
 8008e8a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b09      	cmp	r3, #9
 8008e90:	f200 8097 	bhi.w	8008fc2 <prvProcessReceivedCommands+0x166>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <prvProcessReceivedCommands+0x40>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ec5 	.word	0x08008ec5
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08008ec5 	.word	0x08008ec5
 8008ea8:	08008f39 	.word	0x08008f39
 8008eac:	08008f4d 	.word	0x08008f4d
 8008eb0:	08008f97 	.word	0x08008f97
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008ec5 	.word	0x08008ec5
 8008ebc:	08008f39 	.word	0x08008f39
 8008ec0:	08008f4d 	.word	0x08008f4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	18d1      	adds	r1, r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a3a      	ldr	r2, [r7, #32]
 8008ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ee4:	f7ff ff78 	bl	8008dd8 <prvInsertTimerInActiveList>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d069      	beq.n	8008fc2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ef4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d05e      	beq.n	8008fc2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	441a      	add	r2, r3
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	2300      	movs	r3, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f16:	f7ff fe21 	bl	8008b5c <xTimerGenericCommand>
 8008f1a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d14f      	bne.n	8008fc2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	61bb      	str	r3, [r7, #24]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008f4a:	e03a      	b.n	8008fc2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f52:	f043 0301 	orr.w	r3, r3, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10a      	bne.n	8008f82 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	617b      	str	r3, [r7, #20]
}
 8008f7e:	bf00      	nop
 8008f80:	e7fe      	b.n	8008f80 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	18d1      	adds	r1, r2, r3
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	6a3a      	ldr	r2, [r7, #32]
 8008f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f90:	f7ff ff22 	bl	8008dd8 <prvInsertTimerInActiveList>
					break;
 8008f94:	e015      	b.n	8008fc2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fa6:	f000 fbdb 	bl	8009760 <vPortFree>
 8008faa:	e00a      	b.n	8008fc2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fb2:	f023 0301 	bic.w	r3, r3, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fbe:	e000      	b.n	8008fc2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008fc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fc2:	4b08      	ldr	r3, [pc, #32]	; (8008fe4 <prvProcessReceivedCommands+0x188>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f107 0108 	add.w	r1, r7, #8
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fbf3 	bl	80077b8 <xQueueReceive>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f47f af45 	bne.w	8008e64 <prvProcessReceivedCommands+0x8>
	}
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	3728      	adds	r7, #40	; 0x28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20000c1c 	.word	0x20000c1c

08008fe8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fee:	e048      	b.n	8009082 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ff0:	4b2d      	ldr	r3, [pc, #180]	; (80090a8 <prvSwitchTimerLists+0xc0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffa:	4b2b      	ldr	r3, [pc, #172]	; (80090a8 <prvSwitchTimerLists+0xc0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe f88a 	bl	8007122 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02e      	beq.n	8009082 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	4413      	add	r3, r2
 800902c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d90e      	bls.n	8009054 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <prvSwitchTimerLists+0xc0>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3304      	adds	r3, #4
 800904a:	4619      	mov	r1, r3
 800904c:	4610      	mov	r0, r2
 800904e:	f7fe f82f 	bl	80070b0 <vListInsert>
 8009052:	e016      	b.n	8009082 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	2300      	movs	r3, #0
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	2100      	movs	r1, #0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff fd7c 	bl	8008b5c <xTimerGenericCommand>
 8009064:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	603b      	str	r3, [r7, #0]
}
 800907e:	bf00      	nop
 8009080:	e7fe      	b.n	8009080 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009082:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <prvSwitchTimerLists+0xc0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1b1      	bne.n	8008ff0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <prvSwitchTimerLists+0xc0>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <prvSwitchTimerLists+0xc4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a04      	ldr	r2, [pc, #16]	; (80090a8 <prvSwitchTimerLists+0xc0>)
 8009098:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800909a:	4a04      	ldr	r2, [pc, #16]	; (80090ac <prvSwitchTimerLists+0xc4>)
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	6013      	str	r3, [r2, #0]
}
 80090a0:	bf00      	nop
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	20000c14 	.word	0x20000c14
 80090ac:	20000c18 	.word	0x20000c18

080090b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090b6:	f000 f965 	bl	8009384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090ba:	4b15      	ldr	r3, [pc, #84]	; (8009110 <prvCheckForValidListAndQueue+0x60>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d120      	bne.n	8009104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090c2:	4814      	ldr	r0, [pc, #80]	; (8009114 <prvCheckForValidListAndQueue+0x64>)
 80090c4:	f7fd ffa3 	bl	800700e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090c8:	4813      	ldr	r0, [pc, #76]	; (8009118 <prvCheckForValidListAndQueue+0x68>)
 80090ca:	f7fd ffa0 	bl	800700e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <prvCheckForValidListAndQueue+0x6c>)
 80090d0:	4a10      	ldr	r2, [pc, #64]	; (8009114 <prvCheckForValidListAndQueue+0x64>)
 80090d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090d4:	4b12      	ldr	r3, [pc, #72]	; (8009120 <prvCheckForValidListAndQueue+0x70>)
 80090d6:	4a10      	ldr	r2, [pc, #64]	; (8009118 <prvCheckForValidListAndQueue+0x68>)
 80090d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090da:	2300      	movs	r3, #0
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	4b11      	ldr	r3, [pc, #68]	; (8009124 <prvCheckForValidListAndQueue+0x74>)
 80090e0:	4a11      	ldr	r2, [pc, #68]	; (8009128 <prvCheckForValidListAndQueue+0x78>)
 80090e2:	210c      	movs	r1, #12
 80090e4:	200a      	movs	r0, #10
 80090e6:	f7fe f8af 	bl	8007248 <xQueueGenericCreateStatic>
 80090ea:	4603      	mov	r3, r0
 80090ec:	4a08      	ldr	r2, [pc, #32]	; (8009110 <prvCheckForValidListAndQueue+0x60>)
 80090ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <prvCheckForValidListAndQueue+0x60>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <prvCheckForValidListAndQueue+0x60>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	490b      	ldr	r1, [pc, #44]	; (800912c <prvCheckForValidListAndQueue+0x7c>)
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fd4a 	bl	8007b98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009104:	f000 f96e 	bl	80093e4 <vPortExitCritical>
}
 8009108:	bf00      	nop
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000c1c 	.word	0x20000c1c
 8009114:	20000bec 	.word	0x20000bec
 8009118:	20000c00 	.word	0x20000c00
 800911c:	20000c14 	.word	0x20000c14
 8009120:	20000c18 	.word	0x20000c18
 8009124:	20000ca0 	.word	0x20000ca0
 8009128:	20000c28 	.word	0x20000c28
 800912c:	0800a5b0 	.word	0x0800a5b0

08009130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3b04      	subs	r3, #4
 8009140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3b04      	subs	r3, #4
 800914e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f023 0201 	bic.w	r2, r3, #1
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3b04      	subs	r3, #4
 800915e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009160:	4a0c      	ldr	r2, [pc, #48]	; (8009194 <pxPortInitialiseStack+0x64>)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3b14      	subs	r3, #20
 800916a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3b04      	subs	r3, #4
 8009176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f06f 0202 	mvn.w	r2, #2
 800917e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3b20      	subs	r3, #32
 8009184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009186:	68fb      	ldr	r3, [r7, #12]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	08009199 	.word	0x08009199

08009198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091a2:	4b12      	ldr	r3, [pc, #72]	; (80091ec <prvTaskExitError+0x54>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091aa:	d00a      	beq.n	80091c2 <prvTaskExitError+0x2a>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60fb      	str	r3, [r7, #12]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <prvTaskExitError+0x28>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60bb      	str	r3, [r7, #8]
}
 80091d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091d6:	bf00      	nop
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0fc      	beq.n	80091d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	200000f8 	.word	0x200000f8

080091f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <pxCurrentTCBConst2>)
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6808      	ldr	r0, [r1, #0]
 80091f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	f380 8809 	msr	PSP, r0
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f380 8811 	msr	BASEPRI, r0
 800920a:	4770      	bx	lr
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst2>:
 8009210:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009218:	4808      	ldr	r0, [pc, #32]	; (800923c <prvPortStartFirstTask+0x24>)
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	6800      	ldr	r0, [r0, #0]
 800921e:	f380 8808 	msr	MSP, r0
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8814 	msr	CONTROL, r0
 800922a:	b662      	cpsie	i
 800922c:	b661      	cpsie	f
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	df00      	svc	0
 8009238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800923a:	bf00      	nop
 800923c:	e000ed08 	.word	0xe000ed08

08009240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009246:	4b46      	ldr	r3, [pc, #280]	; (8009360 <xPortStartScheduler+0x120>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a46      	ldr	r2, [pc, #280]	; (8009364 <xPortStartScheduler+0x124>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10a      	bne.n	8009266 <xPortStartScheduler+0x26>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009266:	4b3e      	ldr	r3, [pc, #248]	; (8009360 <xPortStartScheduler+0x120>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3f      	ldr	r2, [pc, #252]	; (8009368 <xPortStartScheduler+0x128>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d10a      	bne.n	8009286 <xPortStartScheduler+0x46>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009286:	4b39      	ldr	r3, [pc, #228]	; (800936c <xPortStartScheduler+0x12c>)
 8009288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	22ff      	movs	r2, #255	; 0xff
 8009296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	4b31      	ldr	r3, [pc, #196]	; (8009370 <xPortStartScheduler+0x130>)
 80092ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ae:	4b31      	ldr	r3, [pc, #196]	; (8009374 <xPortStartScheduler+0x134>)
 80092b0:	2207      	movs	r2, #7
 80092b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b4:	e009      	b.n	80092ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092b6:	4b2f      	ldr	r3, [pc, #188]	; (8009374 <xPortStartScheduler+0x134>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	4a2d      	ldr	r2, [pc, #180]	; (8009374 <xPortStartScheduler+0x134>)
 80092be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b80      	cmp	r3, #128	; 0x80
 80092d4:	d0ef      	beq.n	80092b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092d6:	4b27      	ldr	r3, [pc, #156]	; (8009374 <xPortStartScheduler+0x134>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1c3 0307 	rsb	r3, r3, #7
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d00a      	beq.n	80092f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60bb      	str	r3, [r7, #8]
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092f8:	4b1e      	ldr	r3, [pc, #120]	; (8009374 <xPortStartScheduler+0x134>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <xPortStartScheduler+0x134>)
 8009300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <xPortStartScheduler+0x134>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800930a:	4a1a      	ldr	r2, [pc, #104]	; (8009374 <xPortStartScheduler+0x134>)
 800930c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	b2da      	uxtb	r2, r3
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009316:	4b18      	ldr	r3, [pc, #96]	; (8009378 <xPortStartScheduler+0x138>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a17      	ldr	r2, [pc, #92]	; (8009378 <xPortStartScheduler+0x138>)
 800931c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <xPortStartScheduler+0x138>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a14      	ldr	r2, [pc, #80]	; (8009378 <xPortStartScheduler+0x138>)
 8009328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800932c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800932e:	f000 f8dd 	bl	80094ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <xPortStartScheduler+0x13c>)
 8009334:	2200      	movs	r2, #0
 8009336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009338:	f000 f8fc 	bl	8009534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800933c:	4b10      	ldr	r3, [pc, #64]	; (8009380 <xPortStartScheduler+0x140>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a0f      	ldr	r2, [pc, #60]	; (8009380 <xPortStartScheduler+0x140>)
 8009342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009348:	f7ff ff66 	bl	8009218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800934c:	f7ff f842 	bl	80083d4 <vTaskSwitchContext>
	prvTaskExitError();
 8009350:	f7ff ff22 	bl	8009198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed00 	.word	0xe000ed00
 8009364:	410fc271 	.word	0x410fc271
 8009368:	410fc270 	.word	0x410fc270
 800936c:	e000e400 	.word	0xe000e400
 8009370:	20000ce8 	.word	0x20000ce8
 8009374:	20000cec 	.word	0x20000cec
 8009378:	e000ed20 	.word	0xe000ed20
 800937c:	200000f8 	.word	0x200000f8
 8009380:	e000ef34 	.word	0xe000ef34

08009384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	607b      	str	r3, [r7, #4]
}
 800939c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <vPortEnterCritical+0x58>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a0d      	ldr	r2, [pc, #52]	; (80093dc <vPortEnterCritical+0x58>)
 80093a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093a8:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <vPortEnterCritical+0x58>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d10f      	bne.n	80093d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <vPortEnterCritical+0x5c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	603b      	str	r3, [r7, #0]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <vPortEnterCritical+0x4a>
	}
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	200000f8 	.word	0x200000f8
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093ea:	4b12      	ldr	r3, [pc, #72]	; (8009434 <vPortExitCritical+0x50>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <vPortExitCritical+0x24>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	607b      	str	r3, [r7, #4]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <vPortExitCritical+0x50>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3b01      	subs	r3, #1
 800940e:	4a09      	ldr	r2, [pc, #36]	; (8009434 <vPortExitCritical+0x50>)
 8009410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009412:	4b08      	ldr	r3, [pc, #32]	; (8009434 <vPortExitCritical+0x50>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <vPortExitCritical+0x42>
 800941a:	2300      	movs	r3, #0
 800941c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f383 8811 	msr	BASEPRI, r3
}
 8009424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	200000f8 	.word	0x200000f8
	...

08009440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009440:	f3ef 8009 	mrs	r0, PSP
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <pxCurrentTCBConst>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f01e 0f10 	tst.w	lr, #16
 8009450:	bf08      	it	eq
 8009452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945a:	6010      	str	r0, [r2, #0]
 800945c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009464:	f380 8811 	msr	BASEPRI, r0
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f7fe ffb0 	bl	80083d4 <vTaskSwitchContext>
 8009474:	f04f 0000 	mov.w	r0, #0
 8009478:	f380 8811 	msr	BASEPRI, r0
 800947c:	bc09      	pop	{r0, r3}
 800947e:	6819      	ldr	r1, [r3, #0]
 8009480:	6808      	ldr	r0, [r1, #0]
 8009482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009486:	f01e 0f10 	tst.w	lr, #16
 800948a:	bf08      	it	eq
 800948c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009490:	f380 8809 	msr	PSP, r0
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	f3af 8000 	nop.w

080094a0 <pxCurrentTCBConst>:
 80094a0:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	607b      	str	r3, [r7, #4]
}
 80094c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094c2:	f7fe fecf 	bl	8008264 <xTaskIncrementTick>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <xPortSysTickHandler+0x40>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <vPortSetupTimerInterrupt+0x34>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <vPortSetupTimerInterrupt+0x38>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <vPortSetupTimerInterrupt+0x3c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <vPortSetupTimerInterrupt+0x40>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	099b      	lsrs	r3, r3, #6
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <vPortSetupTimerInterrupt+0x44>)
 800950a:	3b01      	subs	r3, #1
 800950c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800950e:	4b04      	ldr	r3, [pc, #16]	; (8009520 <vPortSetupTimerInterrupt+0x34>)
 8009510:	2207      	movs	r2, #7
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	e000e010 	.word	0xe000e010
 8009524:	e000e018 	.word	0xe000e018
 8009528:	20000004 	.word	0x20000004
 800952c:	10624dd3 	.word	0x10624dd3
 8009530:	e000e014 	.word	0xe000e014

08009534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009544 <vPortEnableVFP+0x10>
 8009538:	6801      	ldr	r1, [r0, #0]
 800953a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800953e:	6001      	str	r1, [r0, #0]
 8009540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009542:	bf00      	nop
 8009544:	e000ed88 	.word	0xe000ed88

08009548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800954e:	f3ef 8305 	mrs	r3, IPSR
 8009552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d914      	bls.n	8009584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800955a:	4a17      	ldr	r2, [pc, #92]	; (80095b8 <vPortValidateInterruptPriority+0x70>)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009564:	4b15      	ldr	r3, [pc, #84]	; (80095bc <vPortValidateInterruptPriority+0x74>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	7afa      	ldrb	r2, [r7, #11]
 800956a:	429a      	cmp	r2, r3
 800956c:	d20a      	bcs.n	8009584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	607b      	str	r3, [r7, #4]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009584:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <vPortValidateInterruptPriority+0x78>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800958c:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <vPortValidateInterruptPriority+0x7c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d90a      	bls.n	80095aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	603b      	str	r3, [r7, #0]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <vPortValidateInterruptPriority+0x60>
	}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	e000e3f0 	.word	0xe000e3f0
 80095bc:	20000ce8 	.word	0x20000ce8
 80095c0:	e000ed0c 	.word	0xe000ed0c
 80095c4:	20000cec 	.word	0x20000cec

080095c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095d4:	f7fe fd8c 	bl	80080f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095d8:	4b5b      	ldr	r3, [pc, #364]	; (8009748 <pvPortMalloc+0x180>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095e0:	f000 f920 	bl	8009824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095e4:	4b59      	ldr	r3, [pc, #356]	; (800974c <pvPortMalloc+0x184>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 8093 	bne.w	8009718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01d      	beq.n	8009634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095f8:	2208      	movs	r2, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4413      	add	r3, r2
 80095fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	2b00      	cmp	r3, #0
 8009608:	d014      	beq.n	8009634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f023 0307 	bic.w	r3, r3, #7
 8009610:	3308      	adds	r3, #8
 8009612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <pvPortMalloc+0x6c>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	617b      	str	r3, [r7, #20]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d06e      	beq.n	8009718 <pvPortMalloc+0x150>
 800963a:	4b45      	ldr	r3, [pc, #276]	; (8009750 <pvPortMalloc+0x188>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d869      	bhi.n	8009718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009644:	4b43      	ldr	r3, [pc, #268]	; (8009754 <pvPortMalloc+0x18c>)
 8009646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009648:	4b42      	ldr	r3, [pc, #264]	; (8009754 <pvPortMalloc+0x18c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800964e:	e004      	b.n	800965a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <pvPortMalloc+0xa4>
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1f1      	bne.n	8009650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800966c:	4b36      	ldr	r3, [pc, #216]	; (8009748 <pvPortMalloc+0x180>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009672:	429a      	cmp	r2, r3
 8009674:	d050      	beq.n	8009718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2208      	movs	r2, #8
 800967c:	4413      	add	r3, r2
 800967e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	1ad2      	subs	r2, r2, r3
 8009690:	2308      	movs	r3, #8
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	429a      	cmp	r2, r3
 8009696:	d91f      	bls.n	80096d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4413      	add	r3, r2
 800969e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <pvPortMalloc+0xf8>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	613b      	str	r3, [r7, #16]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	1ad2      	subs	r2, r2, r3
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096d2:	69b8      	ldr	r0, [r7, #24]
 80096d4:	f000 f908 	bl	80098e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096d8:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <pvPortMalloc+0x188>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	4a1b      	ldr	r2, [pc, #108]	; (8009750 <pvPortMalloc+0x188>)
 80096e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096e6:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <pvPortMalloc+0x188>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b1b      	ldr	r3, [pc, #108]	; (8009758 <pvPortMalloc+0x190>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d203      	bcs.n	80096fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096f2:	4b17      	ldr	r3, [pc, #92]	; (8009750 <pvPortMalloc+0x188>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a18      	ldr	r2, [pc, #96]	; (8009758 <pvPortMalloc+0x190>)
 80096f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	4b13      	ldr	r3, [pc, #76]	; (800974c <pvPortMalloc+0x184>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	431a      	orrs	r2, r3
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800970e:	4b13      	ldr	r3, [pc, #76]	; (800975c <pvPortMalloc+0x194>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3301      	adds	r3, #1
 8009714:	4a11      	ldr	r2, [pc, #68]	; (800975c <pvPortMalloc+0x194>)
 8009716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009718:	f7fe fcf8 	bl	800810c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <pvPortMalloc+0x174>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	60fb      	str	r3, [r7, #12]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <pvPortMalloc+0x172>
	return pvReturn;
 800973c:	69fb      	ldr	r3, [r7, #28]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3728      	adds	r7, #40	; 0x28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200048f8 	.word	0x200048f8
 800974c:	2000490c 	.word	0x2000490c
 8009750:	200048fc 	.word	0x200048fc
 8009754:	200048f0 	.word	0x200048f0
 8009758:	20004900 	.word	0x20004900
 800975c:	20004904 	.word	0x20004904

08009760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d04d      	beq.n	800980e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009772:	2308      	movs	r3, #8
 8009774:	425b      	negs	r3, r3
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	4413      	add	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	4b24      	ldr	r3, [pc, #144]	; (8009818 <vPortFree+0xb8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <vPortFree+0x44>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <vPortFree+0x62>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60bb      	str	r3, [r7, #8]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <vPortFree+0xb8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01e      	beq.n	800980e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11a      	bne.n	800980e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <vPortFree+0xb8>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097e8:	f7fe fc82 	bl	80080f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <vPortFree+0xbc>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	4a09      	ldr	r2, [pc, #36]	; (800981c <vPortFree+0xbc>)
 80097f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097fa:	6938      	ldr	r0, [r7, #16]
 80097fc:	f000 f874 	bl	80098e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <vPortFree+0xc0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3301      	adds	r3, #1
 8009806:	4a06      	ldr	r2, [pc, #24]	; (8009820 <vPortFree+0xc0>)
 8009808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800980a:	f7fe fc7f 	bl	800810c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800980e:	bf00      	nop
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	2000490c 	.word	0x2000490c
 800981c:	200048fc 	.word	0x200048fc
 8009820:	20004908 	.word	0x20004908

08009824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800982a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800982e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009830:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <prvHeapInit+0xac>)
 8009832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3307      	adds	r3, #7
 8009842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <prvHeapInit+0xac>)
 8009854:	4413      	add	r3, r2
 8009856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800985c:	4a1d      	ldr	r2, [pc, #116]	; (80098d4 <prvHeapInit+0xb0>)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009862:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <prvHeapInit+0xb0>)
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	4413      	add	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009870:	2208      	movs	r2, #8
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	1a9b      	subs	r3, r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0307 	bic.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4a15      	ldr	r2, [pc, #84]	; (80098d8 <prvHeapInit+0xb4>)
 8009884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <prvHeapInit+0xb4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvHeapInit+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	1ad2      	subs	r2, r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvHeapInit+0xb4>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <prvHeapInit+0xb8>)
 80098b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4a09      	ldr	r2, [pc, #36]	; (80098e0 <prvHeapInit+0xbc>)
 80098ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098bc:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <prvHeapInit+0xc0>)
 80098be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098c2:	601a      	str	r2, [r3, #0]
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	20000cf0 	.word	0x20000cf0
 80098d4:	200048f0 	.word	0x200048f0
 80098d8:	200048f8 	.word	0x200048f8
 80098dc:	20004900 	.word	0x20004900
 80098e0:	200048fc 	.word	0x200048fc
 80098e4:	2000490c 	.word	0x2000490c

080098e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098f0:	4b28      	ldr	r3, [pc, #160]	; (8009994 <prvInsertBlockIntoFreeList+0xac>)
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e002      	b.n	80098fc <prvInsertBlockIntoFreeList+0x14>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	429a      	cmp	r2, r3
 8009904:	d8f7      	bhi.n	80098f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	4413      	add	r3, r2
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d108      	bne.n	800992a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	441a      	add	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	441a      	add	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	429a      	cmp	r2, r3
 800993c:	d118      	bne.n	8009970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d00d      	beq.n	8009966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e008      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <prvInsertBlockIntoFreeList+0xb0>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e003      	b.n	8009978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	200048f0 	.word	0x200048f0
 8009998:	200048f8 	.word	0x200048f8

0800999c <__errno>:
 800999c:	4b01      	ldr	r3, [pc, #4]	; (80099a4 <__errno+0x8>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	200000fc 	.word	0x200000fc

080099a8 <std>:
 80099a8:	2300      	movs	r3, #0
 80099aa:	b510      	push	{r4, lr}
 80099ac:	4604      	mov	r4, r0
 80099ae:	e9c0 3300 	strd	r3, r3, [r0]
 80099b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099b6:	6083      	str	r3, [r0, #8]
 80099b8:	8181      	strh	r1, [r0, #12]
 80099ba:	6643      	str	r3, [r0, #100]	; 0x64
 80099bc:	81c2      	strh	r2, [r0, #14]
 80099be:	6183      	str	r3, [r0, #24]
 80099c0:	4619      	mov	r1, r3
 80099c2:	2208      	movs	r2, #8
 80099c4:	305c      	adds	r0, #92	; 0x5c
 80099c6:	f000 f988 	bl	8009cda <memset>
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <std+0x38>)
 80099cc:	6263      	str	r3, [r4, #36]	; 0x24
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <std+0x3c>)
 80099d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80099d2:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <std+0x40>)
 80099d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099d6:	4b05      	ldr	r3, [pc, #20]	; (80099ec <std+0x44>)
 80099d8:	6224      	str	r4, [r4, #32]
 80099da:	6323      	str	r3, [r4, #48]	; 0x30
 80099dc:	bd10      	pop	{r4, pc}
 80099de:	bf00      	nop
 80099e0:	08009f09 	.word	0x08009f09
 80099e4:	08009f2b 	.word	0x08009f2b
 80099e8:	08009f63 	.word	0x08009f63
 80099ec:	08009f87 	.word	0x08009f87

080099f0 <_cleanup_r>:
 80099f0:	4901      	ldr	r1, [pc, #4]	; (80099f8 <_cleanup_r+0x8>)
 80099f2:	f000 b8af 	b.w	8009b54 <_fwalk_reent>
 80099f6:	bf00      	nop
 80099f8:	0800a261 	.word	0x0800a261

080099fc <__sfmoreglue>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	2268      	movs	r2, #104	; 0x68
 8009a00:	1e4d      	subs	r5, r1, #1
 8009a02:	4355      	muls	r5, r2
 8009a04:	460e      	mov	r6, r1
 8009a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a0a:	f000 f98f 	bl	8009d2c <_malloc_r>
 8009a0e:	4604      	mov	r4, r0
 8009a10:	b140      	cbz	r0, 8009a24 <__sfmoreglue+0x28>
 8009a12:	2100      	movs	r1, #0
 8009a14:	e9c0 1600 	strd	r1, r6, [r0]
 8009a18:	300c      	adds	r0, #12
 8009a1a:	60a0      	str	r0, [r4, #8]
 8009a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a20:	f000 f95b 	bl	8009cda <memset>
 8009a24:	4620      	mov	r0, r4
 8009a26:	bd70      	pop	{r4, r5, r6, pc}

08009a28 <__sfp_lock_acquire>:
 8009a28:	4801      	ldr	r0, [pc, #4]	; (8009a30 <__sfp_lock_acquire+0x8>)
 8009a2a:	f000 b946 	b.w	8009cba <__retarget_lock_acquire_recursive>
 8009a2e:	bf00      	nop
 8009a30:	20004911 	.word	0x20004911

08009a34 <__sfp_lock_release>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__sfp_lock_release+0x8>)
 8009a36:	f000 b941 	b.w	8009cbc <__retarget_lock_release_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20004911 	.word	0x20004911

08009a40 <__sinit_lock_acquire>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__sinit_lock_acquire+0x8>)
 8009a42:	f000 b93a 	b.w	8009cba <__retarget_lock_acquire_recursive>
 8009a46:	bf00      	nop
 8009a48:	20004912 	.word	0x20004912

08009a4c <__sinit_lock_release>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	; (8009a54 <__sinit_lock_release+0x8>)
 8009a4e:	f000 b935 	b.w	8009cbc <__retarget_lock_release_recursive>
 8009a52:	bf00      	nop
 8009a54:	20004912 	.word	0x20004912

08009a58 <__sinit>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	f7ff fff0 	bl	8009a40 <__sinit_lock_acquire>
 8009a60:	69a3      	ldr	r3, [r4, #24]
 8009a62:	b11b      	cbz	r3, 8009a6c <__sinit+0x14>
 8009a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a68:	f7ff bff0 	b.w	8009a4c <__sinit_lock_release>
 8009a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a70:	6523      	str	r3, [r4, #80]	; 0x50
 8009a72:	4b13      	ldr	r3, [pc, #76]	; (8009ac0 <__sinit+0x68>)
 8009a74:	4a13      	ldr	r2, [pc, #76]	; (8009ac4 <__sinit+0x6c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	bf04      	itt	eq
 8009a7e:	2301      	moveq	r3, #1
 8009a80:	61a3      	streq	r3, [r4, #24]
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f820 	bl	8009ac8 <__sfp>
 8009a88:	6060      	str	r0, [r4, #4]
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 f81c 	bl	8009ac8 <__sfp>
 8009a90:	60a0      	str	r0, [r4, #8]
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 f818 	bl	8009ac8 <__sfp>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60e0      	str	r0, [r4, #12]
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	6860      	ldr	r0, [r4, #4]
 8009aa0:	f7ff ff82 	bl	80099a8 <std>
 8009aa4:	68a0      	ldr	r0, [r4, #8]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	2109      	movs	r1, #9
 8009aaa:	f7ff ff7d 	bl	80099a8 <std>
 8009aae:	68e0      	ldr	r0, [r4, #12]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	2112      	movs	r1, #18
 8009ab4:	f7ff ff78 	bl	80099a8 <std>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	61a3      	str	r3, [r4, #24]
 8009abc:	e7d2      	b.n	8009a64 <__sinit+0xc>
 8009abe:	bf00      	nop
 8009ac0:	0800a630 	.word	0x0800a630
 8009ac4:	080099f1 	.word	0x080099f1

08009ac8 <__sfp>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	4607      	mov	r7, r0
 8009acc:	f7ff ffac 	bl	8009a28 <__sfp_lock_acquire>
 8009ad0:	4b1e      	ldr	r3, [pc, #120]	; (8009b4c <__sfp+0x84>)
 8009ad2:	681e      	ldr	r6, [r3, #0]
 8009ad4:	69b3      	ldr	r3, [r6, #24]
 8009ad6:	b913      	cbnz	r3, 8009ade <__sfp+0x16>
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff ffbd 	bl	8009a58 <__sinit>
 8009ade:	3648      	adds	r6, #72	; 0x48
 8009ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	d503      	bpl.n	8009af0 <__sfp+0x28>
 8009ae8:	6833      	ldr	r3, [r6, #0]
 8009aea:	b30b      	cbz	r3, 8009b30 <__sfp+0x68>
 8009aec:	6836      	ldr	r6, [r6, #0]
 8009aee:	e7f7      	b.n	8009ae0 <__sfp+0x18>
 8009af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009af4:	b9d5      	cbnz	r5, 8009b2c <__sfp+0x64>
 8009af6:	4b16      	ldr	r3, [pc, #88]	; (8009b50 <__sfp+0x88>)
 8009af8:	60e3      	str	r3, [r4, #12]
 8009afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009afe:	6665      	str	r5, [r4, #100]	; 0x64
 8009b00:	f000 f8da 	bl	8009cb8 <__retarget_lock_init_recursive>
 8009b04:	f7ff ff96 	bl	8009a34 <__sfp_lock_release>
 8009b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b10:	6025      	str	r5, [r4, #0]
 8009b12:	61a5      	str	r5, [r4, #24]
 8009b14:	2208      	movs	r2, #8
 8009b16:	4629      	mov	r1, r5
 8009b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b1c:	f000 f8dd 	bl	8009cda <memset>
 8009b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b28:	4620      	mov	r0, r4
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2c:	3468      	adds	r4, #104	; 0x68
 8009b2e:	e7d9      	b.n	8009ae4 <__sfp+0x1c>
 8009b30:	2104      	movs	r1, #4
 8009b32:	4638      	mov	r0, r7
 8009b34:	f7ff ff62 	bl	80099fc <__sfmoreglue>
 8009b38:	4604      	mov	r4, r0
 8009b3a:	6030      	str	r0, [r6, #0]
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d1d5      	bne.n	8009aec <__sfp+0x24>
 8009b40:	f7ff ff78 	bl	8009a34 <__sfp_lock_release>
 8009b44:	230c      	movs	r3, #12
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	e7ee      	b.n	8009b28 <__sfp+0x60>
 8009b4a:	bf00      	nop
 8009b4c:	0800a630 	.word	0x0800a630
 8009b50:	ffff0001 	.word	0xffff0001

08009b54 <_fwalk_reent>:
 8009b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b58:	4606      	mov	r6, r0
 8009b5a:	4688      	mov	r8, r1
 8009b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b60:	2700      	movs	r7, #0
 8009b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b66:	f1b9 0901 	subs.w	r9, r9, #1
 8009b6a:	d505      	bpl.n	8009b78 <_fwalk_reent+0x24>
 8009b6c:	6824      	ldr	r4, [r4, #0]
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	d1f7      	bne.n	8009b62 <_fwalk_reent+0xe>
 8009b72:	4638      	mov	r0, r7
 8009b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b78:	89ab      	ldrh	r3, [r5, #12]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d907      	bls.n	8009b8e <_fwalk_reent+0x3a>
 8009b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b82:	3301      	adds	r3, #1
 8009b84:	d003      	beq.n	8009b8e <_fwalk_reent+0x3a>
 8009b86:	4629      	mov	r1, r5
 8009b88:	4630      	mov	r0, r6
 8009b8a:	47c0      	blx	r8
 8009b8c:	4307      	orrs	r7, r0
 8009b8e:	3568      	adds	r5, #104	; 0x68
 8009b90:	e7e9      	b.n	8009b66 <_fwalk_reent+0x12>
	...

08009b94 <_fwrite_r>:
 8009b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	9c08      	ldr	r4, [sp, #32]
 8009b9a:	468a      	mov	sl, r1
 8009b9c:	4690      	mov	r8, r2
 8009b9e:	fb02 f903 	mul.w	r9, r2, r3
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	b118      	cbz	r0, 8009bae <_fwrite_r+0x1a>
 8009ba6:	6983      	ldr	r3, [r0, #24]
 8009ba8:	b90b      	cbnz	r3, 8009bae <_fwrite_r+0x1a>
 8009baa:	f7ff ff55 	bl	8009a58 <__sinit>
 8009bae:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <_fwrite_r+0xb4>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	d123      	bne.n	8009bfc <_fwrite_r+0x68>
 8009bb4:	686c      	ldr	r4, [r5, #4]
 8009bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb8:	07de      	lsls	r6, r3, #31
 8009bba:	d405      	bmi.n	8009bc8 <_fwrite_r+0x34>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	0598      	lsls	r0, r3, #22
 8009bc0:	d402      	bmi.n	8009bc8 <_fwrite_r+0x34>
 8009bc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc4:	f000 f879 	bl	8009cba <__retarget_lock_acquire_recursive>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	0719      	lsls	r1, r3, #28
 8009bcc:	d520      	bpl.n	8009c10 <_fwrite_r+0x7c>
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	b1f3      	cbz	r3, 8009c10 <_fwrite_r+0x7c>
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	454e      	cmp	r6, r9
 8009bd6:	d029      	beq.n	8009c2c <_fwrite_r+0x98>
 8009bd8:	68a7      	ldr	r7, [r4, #8]
 8009bda:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8009bde:	3f01      	subs	r7, #1
 8009be0:	2f00      	cmp	r7, #0
 8009be2:	60a7      	str	r7, [r4, #8]
 8009be4:	da04      	bge.n	8009bf0 <_fwrite_r+0x5c>
 8009be6:	69a3      	ldr	r3, [r4, #24]
 8009be8:	429f      	cmp	r7, r3
 8009bea:	db19      	blt.n	8009c20 <_fwrite_r+0x8c>
 8009bec:	290a      	cmp	r1, #10
 8009bee:	d017      	beq.n	8009c20 <_fwrite_r+0x8c>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	6022      	str	r2, [r4, #0]
 8009bf6:	7019      	strb	r1, [r3, #0]
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	e7eb      	b.n	8009bd4 <_fwrite_r+0x40>
 8009bfc:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <_fwrite_r+0xb8>)
 8009bfe:	429c      	cmp	r4, r3
 8009c00:	d101      	bne.n	8009c06 <_fwrite_r+0x72>
 8009c02:	68ac      	ldr	r4, [r5, #8]
 8009c04:	e7d7      	b.n	8009bb6 <_fwrite_r+0x22>
 8009c06:	4b12      	ldr	r3, [pc, #72]	; (8009c50 <_fwrite_r+0xbc>)
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	bf08      	it	eq
 8009c0c:	68ec      	ldreq	r4, [r5, #12]
 8009c0e:	e7d2      	b.n	8009bb6 <_fwrite_r+0x22>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 fa20 	bl	800a058 <__swsetup_r>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0da      	beq.n	8009bd2 <_fwrite_r+0x3e>
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	e005      	b.n	8009c2c <_fwrite_r+0x98>
 8009c20:	4622      	mov	r2, r4
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 f9b4 	bl	8009f90 <__swbuf_r>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d1e5      	bne.n	8009bf8 <_fwrite_r+0x64>
 8009c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c2e:	07da      	lsls	r2, r3, #31
 8009c30:	d405      	bmi.n	8009c3e <_fwrite_r+0xaa>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	d402      	bmi.n	8009c3e <_fwrite_r+0xaa>
 8009c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3a:	f000 f83f 	bl	8009cbc <__retarget_lock_release_recursive>
 8009c3e:	fbb6 f0f8 	udiv	r0, r6, r8
 8009c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c46:	bf00      	nop
 8009c48:	0800a5f0 	.word	0x0800a5f0
 8009c4c:	0800a610 	.word	0x0800a610
 8009c50:	0800a5d0 	.word	0x0800a5d0

08009c54 <fwrite>:
 8009c54:	b507      	push	{r0, r1, r2, lr}
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	460a      	mov	r2, r1
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4803      	ldr	r0, [pc, #12]	; (8009c6c <fwrite+0x18>)
 8009c60:	6800      	ldr	r0, [r0, #0]
 8009c62:	f7ff ff97 	bl	8009b94 <_fwrite_r>
 8009c66:	b003      	add	sp, #12
 8009c68:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c6c:	200000fc 	.word	0x200000fc

08009c70 <__libc_init_array>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4d0d      	ldr	r5, [pc, #52]	; (8009ca8 <__libc_init_array+0x38>)
 8009c74:	4c0d      	ldr	r4, [pc, #52]	; (8009cac <__libc_init_array+0x3c>)
 8009c76:	1b64      	subs	r4, r4, r5
 8009c78:	10a4      	asrs	r4, r4, #2
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	42a6      	cmp	r6, r4
 8009c7e:	d109      	bne.n	8009c94 <__libc_init_array+0x24>
 8009c80:	4d0b      	ldr	r5, [pc, #44]	; (8009cb0 <__libc_init_array+0x40>)
 8009c82:	4c0c      	ldr	r4, [pc, #48]	; (8009cb4 <__libc_init_array+0x44>)
 8009c84:	f000 fc2c 	bl	800a4e0 <_init>
 8009c88:	1b64      	subs	r4, r4, r5
 8009c8a:	10a4      	asrs	r4, r4, #2
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	42a6      	cmp	r6, r4
 8009c90:	d105      	bne.n	8009c9e <__libc_init_array+0x2e>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c98:	4798      	blx	r3
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	e7ee      	b.n	8009c7c <__libc_init_array+0xc>
 8009c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca2:	4798      	blx	r3
 8009ca4:	3601      	adds	r6, #1
 8009ca6:	e7f2      	b.n	8009c8e <__libc_init_array+0x1e>
 8009ca8:	0800a63c 	.word	0x0800a63c
 8009cac:	0800a63c 	.word	0x0800a63c
 8009cb0:	0800a63c 	.word	0x0800a63c
 8009cb4:	0800a640 	.word	0x0800a640

08009cb8 <__retarget_lock_init_recursive>:
 8009cb8:	4770      	bx	lr

08009cba <__retarget_lock_acquire_recursive>:
 8009cba:	4770      	bx	lr

08009cbc <__retarget_lock_release_recursive>:
 8009cbc:	4770      	bx	lr

08009cbe <memcpy>:
 8009cbe:	440a      	add	r2, r1
 8009cc0:	4291      	cmp	r1, r2
 8009cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cc6:	d100      	bne.n	8009cca <memcpy+0xc>
 8009cc8:	4770      	bx	lr
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd4:	4291      	cmp	r1, r2
 8009cd6:	d1f9      	bne.n	8009ccc <memcpy+0xe>
 8009cd8:	bd10      	pop	{r4, pc}

08009cda <memset>:
 8009cda:	4402      	add	r2, r0
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d100      	bne.n	8009ce4 <memset+0xa>
 8009ce2:	4770      	bx	lr
 8009ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce8:	e7f9      	b.n	8009cde <memset+0x4>
	...

08009cec <sbrk_aligned>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4e0e      	ldr	r6, [pc, #56]	; (8009d28 <sbrk_aligned+0x3c>)
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	6831      	ldr	r1, [r6, #0]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	b911      	cbnz	r1, 8009cfe <sbrk_aligned+0x12>
 8009cf8:	f000 f8f6 	bl	8009ee8 <_sbrk_r>
 8009cfc:	6030      	str	r0, [r6, #0]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4628      	mov	r0, r5
 8009d02:	f000 f8f1 	bl	8009ee8 <_sbrk_r>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d00a      	beq.n	8009d20 <sbrk_aligned+0x34>
 8009d0a:	1cc4      	adds	r4, r0, #3
 8009d0c:	f024 0403 	bic.w	r4, r4, #3
 8009d10:	42a0      	cmp	r0, r4
 8009d12:	d007      	beq.n	8009d24 <sbrk_aligned+0x38>
 8009d14:	1a21      	subs	r1, r4, r0
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f8e6 	bl	8009ee8 <_sbrk_r>
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d101      	bne.n	8009d24 <sbrk_aligned+0x38>
 8009d20:	f04f 34ff 	mov.w	r4, #4294967295
 8009d24:	4620      	mov	r0, r4
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	20004918 	.word	0x20004918

08009d2c <_malloc_r>:
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	1ccd      	adds	r5, r1, #3
 8009d32:	f025 0503 	bic.w	r5, r5, #3
 8009d36:	3508      	adds	r5, #8
 8009d38:	2d0c      	cmp	r5, #12
 8009d3a:	bf38      	it	cc
 8009d3c:	250c      	movcc	r5, #12
 8009d3e:	2d00      	cmp	r5, #0
 8009d40:	4607      	mov	r7, r0
 8009d42:	db01      	blt.n	8009d48 <_malloc_r+0x1c>
 8009d44:	42a9      	cmp	r1, r5
 8009d46:	d905      	bls.n	8009d54 <_malloc_r+0x28>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	4630      	mov	r0, r6
 8009d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d54:	4e2e      	ldr	r6, [pc, #184]	; (8009e10 <_malloc_r+0xe4>)
 8009d56:	f000 fb37 	bl	800a3c8 <__malloc_lock>
 8009d5a:	6833      	ldr	r3, [r6, #0]
 8009d5c:	461c      	mov	r4, r3
 8009d5e:	bb34      	cbnz	r4, 8009dae <_malloc_r+0x82>
 8009d60:	4629      	mov	r1, r5
 8009d62:	4638      	mov	r0, r7
 8009d64:	f7ff ffc2 	bl	8009cec <sbrk_aligned>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	d14d      	bne.n	8009e0a <_malloc_r+0xde>
 8009d6e:	6834      	ldr	r4, [r6, #0]
 8009d70:	4626      	mov	r6, r4
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	d140      	bne.n	8009df8 <_malloc_r+0xcc>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	eb04 0803 	add.w	r8, r4, r3
 8009d80:	f000 f8b2 	bl	8009ee8 <_sbrk_r>
 8009d84:	4580      	cmp	r8, r0
 8009d86:	d13a      	bne.n	8009dfe <_malloc_r+0xd2>
 8009d88:	6821      	ldr	r1, [r4, #0]
 8009d8a:	3503      	adds	r5, #3
 8009d8c:	1a6d      	subs	r5, r5, r1
 8009d8e:	f025 0503 	bic.w	r5, r5, #3
 8009d92:	3508      	adds	r5, #8
 8009d94:	2d0c      	cmp	r5, #12
 8009d96:	bf38      	it	cc
 8009d98:	250c      	movcc	r5, #12
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f7ff ffa5 	bl	8009cec <sbrk_aligned>
 8009da2:	3001      	adds	r0, #1
 8009da4:	d02b      	beq.n	8009dfe <_malloc_r+0xd2>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	442b      	add	r3, r5
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	e00e      	b.n	8009dcc <_malloc_r+0xa0>
 8009dae:	6822      	ldr	r2, [r4, #0]
 8009db0:	1b52      	subs	r2, r2, r5
 8009db2:	d41e      	bmi.n	8009df2 <_malloc_r+0xc6>
 8009db4:	2a0b      	cmp	r2, #11
 8009db6:	d916      	bls.n	8009de6 <_malloc_r+0xba>
 8009db8:	1961      	adds	r1, r4, r5
 8009dba:	42a3      	cmp	r3, r4
 8009dbc:	6025      	str	r5, [r4, #0]
 8009dbe:	bf18      	it	ne
 8009dc0:	6059      	strne	r1, [r3, #4]
 8009dc2:	6863      	ldr	r3, [r4, #4]
 8009dc4:	bf08      	it	eq
 8009dc6:	6031      	streq	r1, [r6, #0]
 8009dc8:	5162      	str	r2, [r4, r5]
 8009dca:	604b      	str	r3, [r1, #4]
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f104 060b 	add.w	r6, r4, #11
 8009dd2:	f000 faff 	bl	800a3d4 <__malloc_unlock>
 8009dd6:	f026 0607 	bic.w	r6, r6, #7
 8009dda:	1d23      	adds	r3, r4, #4
 8009ddc:	1af2      	subs	r2, r6, r3
 8009dde:	d0b6      	beq.n	8009d4e <_malloc_r+0x22>
 8009de0:	1b9b      	subs	r3, r3, r6
 8009de2:	50a3      	str	r3, [r4, r2]
 8009de4:	e7b3      	b.n	8009d4e <_malloc_r+0x22>
 8009de6:	6862      	ldr	r2, [r4, #4]
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	bf0c      	ite	eq
 8009dec:	6032      	streq	r2, [r6, #0]
 8009dee:	605a      	strne	r2, [r3, #4]
 8009df0:	e7ec      	b.n	8009dcc <_malloc_r+0xa0>
 8009df2:	4623      	mov	r3, r4
 8009df4:	6864      	ldr	r4, [r4, #4]
 8009df6:	e7b2      	b.n	8009d5e <_malloc_r+0x32>
 8009df8:	4634      	mov	r4, r6
 8009dfa:	6876      	ldr	r6, [r6, #4]
 8009dfc:	e7b9      	b.n	8009d72 <_malloc_r+0x46>
 8009dfe:	230c      	movs	r3, #12
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	4638      	mov	r0, r7
 8009e04:	f000 fae6 	bl	800a3d4 <__malloc_unlock>
 8009e08:	e7a1      	b.n	8009d4e <_malloc_r+0x22>
 8009e0a:	6025      	str	r5, [r4, #0]
 8009e0c:	e7de      	b.n	8009dcc <_malloc_r+0xa0>
 8009e0e:	bf00      	nop
 8009e10:	20004914 	.word	0x20004914

08009e14 <cleanup_glue>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	460c      	mov	r4, r1
 8009e18:	6809      	ldr	r1, [r1, #0]
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	b109      	cbz	r1, 8009e22 <cleanup_glue+0xe>
 8009e1e:	f7ff fff9 	bl	8009e14 <cleanup_glue>
 8009e22:	4621      	mov	r1, r4
 8009e24:	4628      	mov	r0, r5
 8009e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2a:	f000 bad9 	b.w	800a3e0 <_free_r>
	...

08009e30 <_reclaim_reent>:
 8009e30:	4b2c      	ldr	r3, [pc, #176]	; (8009ee4 <_reclaim_reent+0xb4>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4283      	cmp	r3, r0
 8009e36:	b570      	push	{r4, r5, r6, lr}
 8009e38:	4604      	mov	r4, r0
 8009e3a:	d051      	beq.n	8009ee0 <_reclaim_reent+0xb0>
 8009e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009e3e:	b143      	cbz	r3, 8009e52 <_reclaim_reent+0x22>
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d14a      	bne.n	8009edc <_reclaim_reent+0xac>
 8009e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	b111      	cbz	r1, 8009e52 <_reclaim_reent+0x22>
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 fac7 	bl	800a3e0 <_free_r>
 8009e52:	6961      	ldr	r1, [r4, #20]
 8009e54:	b111      	cbz	r1, 8009e5c <_reclaim_reent+0x2c>
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fac2 	bl	800a3e0 <_free_r>
 8009e5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009e5e:	b111      	cbz	r1, 8009e66 <_reclaim_reent+0x36>
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 fabd 	bl	800a3e0 <_free_r>
 8009e66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e68:	b111      	cbz	r1, 8009e70 <_reclaim_reent+0x40>
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fab8 	bl	800a3e0 <_free_r>
 8009e70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009e72:	b111      	cbz	r1, 8009e7a <_reclaim_reent+0x4a>
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fab3 	bl	800a3e0 <_free_r>
 8009e7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009e7c:	b111      	cbz	r1, 8009e84 <_reclaim_reent+0x54>
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 faae 	bl	800a3e0 <_free_r>
 8009e84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009e86:	b111      	cbz	r1, 8009e8e <_reclaim_reent+0x5e>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f000 faa9 	bl	800a3e0 <_free_r>
 8009e8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009e90:	b111      	cbz	r1, 8009e98 <_reclaim_reent+0x68>
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 faa4 	bl	800a3e0 <_free_r>
 8009e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e9a:	b111      	cbz	r1, 8009ea2 <_reclaim_reent+0x72>
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 fa9f 	bl	800a3e0 <_free_r>
 8009ea2:	69a3      	ldr	r3, [r4, #24]
 8009ea4:	b1e3      	cbz	r3, 8009ee0 <_reclaim_reent+0xb0>
 8009ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4798      	blx	r3
 8009eac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009eae:	b1b9      	cbz	r1, 8009ee0 <_reclaim_reent+0xb0>
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eb6:	f7ff bfad 	b.w	8009e14 <cleanup_glue>
 8009eba:	5949      	ldr	r1, [r1, r5]
 8009ebc:	b941      	cbnz	r1, 8009ed0 <_reclaim_reent+0xa0>
 8009ebe:	3504      	adds	r5, #4
 8009ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ec2:	2d80      	cmp	r5, #128	; 0x80
 8009ec4:	68d9      	ldr	r1, [r3, #12]
 8009ec6:	d1f8      	bne.n	8009eba <_reclaim_reent+0x8a>
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 fa89 	bl	800a3e0 <_free_r>
 8009ece:	e7ba      	b.n	8009e46 <_reclaim_reent+0x16>
 8009ed0:	680e      	ldr	r6, [r1, #0]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 fa84 	bl	800a3e0 <_free_r>
 8009ed8:	4631      	mov	r1, r6
 8009eda:	e7ef      	b.n	8009ebc <_reclaim_reent+0x8c>
 8009edc:	2500      	movs	r5, #0
 8009ede:	e7ef      	b.n	8009ec0 <_reclaim_reent+0x90>
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200000fc 	.word	0x200000fc

08009ee8 <_sbrk_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_sbrk_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f8 fa46 	bl	8002384 <_sbrk>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_sbrk_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_sbrk_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	2000491c 	.word	0x2000491c

08009f08 <__sread>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	f000 fab2 	bl	800a478 <_read_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	bfab      	itete	ge
 8009f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f1c:	181b      	addge	r3, r3, r0
 8009f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f22:	bfac      	ite	ge
 8009f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f26:	81a3      	strhlt	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__swrite>:
 8009f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	461f      	mov	r7, r3
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	05db      	lsls	r3, r3, #23
 8009f34:	4605      	mov	r5, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4616      	mov	r6, r2
 8009f3a:	d505      	bpl.n	8009f48 <__swrite+0x1e>
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2302      	movs	r3, #2
 8009f42:	2200      	movs	r2, #0
 8009f44:	f000 f9c8 	bl	800a2d8 <_lseek_r>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	f000 b869 	b.w	800a034 <_write_r>

08009f62 <__sseek>:
 8009f62:	b510      	push	{r4, lr}
 8009f64:	460c      	mov	r4, r1
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	f000 f9b5 	bl	800a2d8 <_lseek_r>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	bf15      	itete	ne
 8009f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strheq	r3, [r4, #12]
 8009f80:	bf18      	it	ne
 8009f82:	81a3      	strhne	r3, [r4, #12]
 8009f84:	bd10      	pop	{r4, pc}

08009f86 <__sclose>:
 8009f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8a:	f000 b8d3 	b.w	800a134 <_close_r>
	...

08009f90 <__swbuf_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	460e      	mov	r6, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	4605      	mov	r5, r0
 8009f98:	b118      	cbz	r0, 8009fa2 <__swbuf_r+0x12>
 8009f9a:	6983      	ldr	r3, [r0, #24]
 8009f9c:	b90b      	cbnz	r3, 8009fa2 <__swbuf_r+0x12>
 8009f9e:	f7ff fd5b 	bl	8009a58 <__sinit>
 8009fa2:	4b21      	ldr	r3, [pc, #132]	; (800a028 <__swbuf_r+0x98>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	d12b      	bne.n	800a000 <__swbuf_r+0x70>
 8009fa8:	686c      	ldr	r4, [r5, #4]
 8009faa:	69a3      	ldr	r3, [r4, #24]
 8009fac:	60a3      	str	r3, [r4, #8]
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	071a      	lsls	r2, r3, #28
 8009fb2:	d52f      	bpl.n	800a014 <__swbuf_r+0x84>
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	b36b      	cbz	r3, 800a014 <__swbuf_r+0x84>
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	6820      	ldr	r0, [r4, #0]
 8009fbc:	1ac0      	subs	r0, r0, r3
 8009fbe:	6963      	ldr	r3, [r4, #20]
 8009fc0:	b2f6      	uxtb	r6, r6
 8009fc2:	4283      	cmp	r3, r0
 8009fc4:	4637      	mov	r7, r6
 8009fc6:	dc04      	bgt.n	8009fd2 <__swbuf_r+0x42>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 f948 	bl	800a260 <_fflush_r>
 8009fd0:	bb30      	cbnz	r0, 800a020 <__swbuf_r+0x90>
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	60a3      	str	r3, [r4, #8]
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	6022      	str	r2, [r4, #0]
 8009fde:	701e      	strb	r6, [r3, #0]
 8009fe0:	6963      	ldr	r3, [r4, #20]
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	4283      	cmp	r3, r0
 8009fe6:	d004      	beq.n	8009ff2 <__swbuf_r+0x62>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	07db      	lsls	r3, r3, #31
 8009fec:	d506      	bpl.n	8009ffc <__swbuf_r+0x6c>
 8009fee:	2e0a      	cmp	r6, #10
 8009ff0:	d104      	bne.n	8009ffc <__swbuf_r+0x6c>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	f000 f933 	bl	800a260 <_fflush_r>
 8009ffa:	b988      	cbnz	r0, 800a020 <__swbuf_r+0x90>
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <__swbuf_r+0x9c>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d101      	bne.n	800a00a <__swbuf_r+0x7a>
 800a006:	68ac      	ldr	r4, [r5, #8]
 800a008:	e7cf      	b.n	8009faa <__swbuf_r+0x1a>
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <__swbuf_r+0xa0>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	bf08      	it	eq
 800a010:	68ec      	ldreq	r4, [r5, #12]
 800a012:	e7ca      	b.n	8009faa <__swbuf_r+0x1a>
 800a014:	4621      	mov	r1, r4
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f81e 	bl	800a058 <__swsetup_r>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d0cb      	beq.n	8009fb8 <__swbuf_r+0x28>
 800a020:	f04f 37ff 	mov.w	r7, #4294967295
 800a024:	e7ea      	b.n	8009ffc <__swbuf_r+0x6c>
 800a026:	bf00      	nop
 800a028:	0800a5f0 	.word	0x0800a5f0
 800a02c:	0800a610 	.word	0x0800a610
 800a030:	0800a5d0 	.word	0x0800a5d0

0800a034 <_write_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_write_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f8 f94d 	bl	80022e2 <_write>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_write_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_write_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	2000491c 	.word	0x2000491c

0800a058 <__swsetup_r>:
 800a058:	4b32      	ldr	r3, [pc, #200]	; (800a124 <__swsetup_r+0xcc>)
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	681d      	ldr	r5, [r3, #0]
 800a05e:	4606      	mov	r6, r0
 800a060:	460c      	mov	r4, r1
 800a062:	b125      	cbz	r5, 800a06e <__swsetup_r+0x16>
 800a064:	69ab      	ldr	r3, [r5, #24]
 800a066:	b913      	cbnz	r3, 800a06e <__swsetup_r+0x16>
 800a068:	4628      	mov	r0, r5
 800a06a:	f7ff fcf5 	bl	8009a58 <__sinit>
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <__swsetup_r+0xd0>)
 800a070:	429c      	cmp	r4, r3
 800a072:	d10f      	bne.n	800a094 <__swsetup_r+0x3c>
 800a074:	686c      	ldr	r4, [r5, #4]
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07c:	0719      	lsls	r1, r3, #28
 800a07e:	d42c      	bmi.n	800a0da <__swsetup_r+0x82>
 800a080:	06dd      	lsls	r5, r3, #27
 800a082:	d411      	bmi.n	800a0a8 <__swsetup_r+0x50>
 800a084:	2309      	movs	r3, #9
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	e03e      	b.n	800a112 <__swsetup_r+0xba>
 800a094:	4b25      	ldr	r3, [pc, #148]	; (800a12c <__swsetup_r+0xd4>)
 800a096:	429c      	cmp	r4, r3
 800a098:	d101      	bne.n	800a09e <__swsetup_r+0x46>
 800a09a:	68ac      	ldr	r4, [r5, #8]
 800a09c:	e7eb      	b.n	800a076 <__swsetup_r+0x1e>
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <__swsetup_r+0xd8>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	bf08      	it	eq
 800a0a4:	68ec      	ldreq	r4, [r5, #12]
 800a0a6:	e7e6      	b.n	800a076 <__swsetup_r+0x1e>
 800a0a8:	0758      	lsls	r0, r3, #29
 800a0aa:	d512      	bpl.n	800a0d2 <__swsetup_r+0x7a>
 800a0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ae:	b141      	cbz	r1, 800a0c2 <__swsetup_r+0x6a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__swsetup_r+0x66>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 f991 	bl	800a3e0 <_free_r>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <__swsetup_r+0x9a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e8:	d003      	beq.n	800a0f2 <__swsetup_r+0x9a>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f000 f92b 	bl	800a348 <__smakebuf_r>
 800a0f2:	89a0      	ldrh	r0, [r4, #12]
 800a0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0f8:	f010 0301 	ands.w	r3, r0, #1
 800a0fc:	d00a      	beq.n	800a114 <__swsetup_r+0xbc>
 800a0fe:	2300      	movs	r3, #0
 800a100:	60a3      	str	r3, [r4, #8]
 800a102:	6963      	ldr	r3, [r4, #20]
 800a104:	425b      	negs	r3, r3
 800a106:	61a3      	str	r3, [r4, #24]
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	b943      	cbnz	r3, 800a11e <__swsetup_r+0xc6>
 800a10c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a110:	d1ba      	bne.n	800a088 <__swsetup_r+0x30>
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	0781      	lsls	r1, r0, #30
 800a116:	bf58      	it	pl
 800a118:	6963      	ldrpl	r3, [r4, #20]
 800a11a:	60a3      	str	r3, [r4, #8]
 800a11c:	e7f4      	b.n	800a108 <__swsetup_r+0xb0>
 800a11e:	2000      	movs	r0, #0
 800a120:	e7f7      	b.n	800a112 <__swsetup_r+0xba>
 800a122:	bf00      	nop
 800a124:	200000fc 	.word	0x200000fc
 800a128:	0800a5f0 	.word	0x0800a5f0
 800a12c:	0800a610 	.word	0x0800a610
 800a130:	0800a5d0 	.word	0x0800a5d0

0800a134 <_close_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4d06      	ldr	r5, [pc, #24]	; (800a150 <_close_r+0x1c>)
 800a138:	2300      	movs	r3, #0
 800a13a:	4604      	mov	r4, r0
 800a13c:	4608      	mov	r0, r1
 800a13e:	602b      	str	r3, [r5, #0]
 800a140:	f7f8 f8eb 	bl	800231a <_close>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d102      	bne.n	800a14e <_close_r+0x1a>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b103      	cbz	r3, 800a14e <_close_r+0x1a>
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	2000491c 	.word	0x2000491c

0800a154 <__sflush_r>:
 800a154:	898a      	ldrh	r2, [r1, #12]
 800a156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15a:	4605      	mov	r5, r0
 800a15c:	0710      	lsls	r0, r2, #28
 800a15e:	460c      	mov	r4, r1
 800a160:	d458      	bmi.n	800a214 <__sflush_r+0xc0>
 800a162:	684b      	ldr	r3, [r1, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	dc05      	bgt.n	800a174 <__sflush_r+0x20>
 800a168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	dc02      	bgt.n	800a174 <__sflush_r+0x20>
 800a16e:	2000      	movs	r0, #0
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a176:	2e00      	cmp	r6, #0
 800a178:	d0f9      	beq.n	800a16e <__sflush_r+0x1a>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a180:	682f      	ldr	r7, [r5, #0]
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	d032      	beq.n	800a1ec <__sflush_r+0x98>
 800a186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	075a      	lsls	r2, r3, #29
 800a18c:	d505      	bpl.n	800a19a <__sflush_r+0x46>
 800a18e:	6863      	ldr	r3, [r4, #4]
 800a190:	1ac0      	subs	r0, r0, r3
 800a192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a194:	b10b      	cbz	r3, 800a19a <__sflush_r+0x46>
 800a196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a198:	1ac0      	subs	r0, r0, r3
 800a19a:	2300      	movs	r3, #0
 800a19c:	4602      	mov	r2, r0
 800a19e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a0:	6a21      	ldr	r1, [r4, #32]
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b0      	blx	r6
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	d106      	bne.n	800a1ba <__sflush_r+0x66>
 800a1ac:	6829      	ldr	r1, [r5, #0]
 800a1ae:	291d      	cmp	r1, #29
 800a1b0:	d82c      	bhi.n	800a20c <__sflush_r+0xb8>
 800a1b2:	4a2a      	ldr	r2, [pc, #168]	; (800a25c <__sflush_r+0x108>)
 800a1b4:	40ca      	lsrs	r2, r1
 800a1b6:	07d6      	lsls	r6, r2, #31
 800a1b8:	d528      	bpl.n	800a20c <__sflush_r+0xb8>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	6062      	str	r2, [r4, #4]
 800a1be:	04d9      	lsls	r1, r3, #19
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	6022      	str	r2, [r4, #0]
 800a1c4:	d504      	bpl.n	800a1d0 <__sflush_r+0x7c>
 800a1c6:	1c42      	adds	r2, r0, #1
 800a1c8:	d101      	bne.n	800a1ce <__sflush_r+0x7a>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b903      	cbnz	r3, 800a1d0 <__sflush_r+0x7c>
 800a1ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1d2:	602f      	str	r7, [r5, #0]
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	d0ca      	beq.n	800a16e <__sflush_r+0x1a>
 800a1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1dc:	4299      	cmp	r1, r3
 800a1de:	d002      	beq.n	800a1e6 <__sflush_r+0x92>
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 f8fd 	bl	800a3e0 <_free_r>
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ea:	e7c1      	b.n	800a170 <__sflush_r+0x1c>
 800a1ec:	6a21      	ldr	r1, [r4, #32]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b0      	blx	r6
 800a1f4:	1c41      	adds	r1, r0, #1
 800a1f6:	d1c7      	bne.n	800a188 <__sflush_r+0x34>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0c4      	beq.n	800a188 <__sflush_r+0x34>
 800a1fe:	2b1d      	cmp	r3, #29
 800a200:	d001      	beq.n	800a206 <__sflush_r+0xb2>
 800a202:	2b16      	cmp	r3, #22
 800a204:	d101      	bne.n	800a20a <__sflush_r+0xb6>
 800a206:	602f      	str	r7, [r5, #0]
 800a208:	e7b1      	b.n	800a16e <__sflush_r+0x1a>
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	e7ad      	b.n	800a170 <__sflush_r+0x1c>
 800a214:	690f      	ldr	r7, [r1, #16]
 800a216:	2f00      	cmp	r7, #0
 800a218:	d0a9      	beq.n	800a16e <__sflush_r+0x1a>
 800a21a:	0793      	lsls	r3, r2, #30
 800a21c:	680e      	ldr	r6, [r1, #0]
 800a21e:	bf08      	it	eq
 800a220:	694b      	ldreq	r3, [r1, #20]
 800a222:	600f      	str	r7, [r1, #0]
 800a224:	bf18      	it	ne
 800a226:	2300      	movne	r3, #0
 800a228:	eba6 0807 	sub.w	r8, r6, r7
 800a22c:	608b      	str	r3, [r1, #8]
 800a22e:	f1b8 0f00 	cmp.w	r8, #0
 800a232:	dd9c      	ble.n	800a16e <__sflush_r+0x1a>
 800a234:	6a21      	ldr	r1, [r4, #32]
 800a236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a238:	4643      	mov	r3, r8
 800a23a:	463a      	mov	r2, r7
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b0      	blx	r6
 800a240:	2800      	cmp	r0, #0
 800a242:	dc06      	bgt.n	800a252 <__sflush_r+0xfe>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	e78e      	b.n	800a170 <__sflush_r+0x1c>
 800a252:	4407      	add	r7, r0
 800a254:	eba8 0800 	sub.w	r8, r8, r0
 800a258:	e7e9      	b.n	800a22e <__sflush_r+0xda>
 800a25a:	bf00      	nop
 800a25c:	20400001 	.word	0x20400001

0800a260 <_fflush_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	690b      	ldr	r3, [r1, #16]
 800a264:	4605      	mov	r5, r0
 800a266:	460c      	mov	r4, r1
 800a268:	b913      	cbnz	r3, 800a270 <_fflush_r+0x10>
 800a26a:	2500      	movs	r5, #0
 800a26c:	4628      	mov	r0, r5
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	b118      	cbz	r0, 800a27a <_fflush_r+0x1a>
 800a272:	6983      	ldr	r3, [r0, #24]
 800a274:	b90b      	cbnz	r3, 800a27a <_fflush_r+0x1a>
 800a276:	f7ff fbef 	bl	8009a58 <__sinit>
 800a27a:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <_fflush_r+0x6c>)
 800a27c:	429c      	cmp	r4, r3
 800a27e:	d11b      	bne.n	800a2b8 <_fflush_r+0x58>
 800a280:	686c      	ldr	r4, [r5, #4]
 800a282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0ef      	beq.n	800a26a <_fflush_r+0xa>
 800a28a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a28c:	07d0      	lsls	r0, r2, #31
 800a28e:	d404      	bmi.n	800a29a <_fflush_r+0x3a>
 800a290:	0599      	lsls	r1, r3, #22
 800a292:	d402      	bmi.n	800a29a <_fflush_r+0x3a>
 800a294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a296:	f7ff fd10 	bl	8009cba <__retarget_lock_acquire_recursive>
 800a29a:	4628      	mov	r0, r5
 800a29c:	4621      	mov	r1, r4
 800a29e:	f7ff ff59 	bl	800a154 <__sflush_r>
 800a2a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a4:	07da      	lsls	r2, r3, #31
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	d4e0      	bmi.n	800a26c <_fflush_r+0xc>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	059b      	lsls	r3, r3, #22
 800a2ae:	d4dd      	bmi.n	800a26c <_fflush_r+0xc>
 800a2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b2:	f7ff fd03 	bl	8009cbc <__retarget_lock_release_recursive>
 800a2b6:	e7d9      	b.n	800a26c <_fflush_r+0xc>
 800a2b8:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <_fflush_r+0x70>)
 800a2ba:	429c      	cmp	r4, r3
 800a2bc:	d101      	bne.n	800a2c2 <_fflush_r+0x62>
 800a2be:	68ac      	ldr	r4, [r5, #8]
 800a2c0:	e7df      	b.n	800a282 <_fflush_r+0x22>
 800a2c2:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <_fflush_r+0x74>)
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	bf08      	it	eq
 800a2c8:	68ec      	ldreq	r4, [r5, #12]
 800a2ca:	e7da      	b.n	800a282 <_fflush_r+0x22>
 800a2cc:	0800a5f0 	.word	0x0800a5f0
 800a2d0:	0800a610 	.word	0x0800a610
 800a2d4:	0800a5d0 	.word	0x0800a5d0

0800a2d8 <_lseek_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_lseek_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f8 f83e 	bl	8002368 <_lseek>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_lseek_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_lseek_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	2000491c 	.word	0x2000491c

0800a2fc <__swhatbuf_r>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	460e      	mov	r6, r1
 800a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a304:	2900      	cmp	r1, #0
 800a306:	b096      	sub	sp, #88	; 0x58
 800a308:	4614      	mov	r4, r2
 800a30a:	461d      	mov	r5, r3
 800a30c:	da08      	bge.n	800a320 <__swhatbuf_r+0x24>
 800a30e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	061a      	lsls	r2, r3, #24
 800a318:	d410      	bmi.n	800a33c <__swhatbuf_r+0x40>
 800a31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a31e:	e00e      	b.n	800a33e <__swhatbuf_r+0x42>
 800a320:	466a      	mov	r2, sp
 800a322:	f000 f8bb 	bl	800a49c <_fstat_r>
 800a326:	2800      	cmp	r0, #0
 800a328:	dbf1      	blt.n	800a30e <__swhatbuf_r+0x12>
 800a32a:	9a01      	ldr	r2, [sp, #4]
 800a32c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a334:	425a      	negs	r2, r3
 800a336:	415a      	adcs	r2, r3
 800a338:	602a      	str	r2, [r5, #0]
 800a33a:	e7ee      	b.n	800a31a <__swhatbuf_r+0x1e>
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	2000      	movs	r0, #0
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	b016      	add	sp, #88	; 0x58
 800a344:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a348 <__smakebuf_r>:
 800a348:	898b      	ldrh	r3, [r1, #12]
 800a34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a34c:	079d      	lsls	r5, r3, #30
 800a34e:	4606      	mov	r6, r0
 800a350:	460c      	mov	r4, r1
 800a352:	d507      	bpl.n	800a364 <__smakebuf_r+0x1c>
 800a354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	6123      	str	r3, [r4, #16]
 800a35c:	2301      	movs	r3, #1
 800a35e:	6163      	str	r3, [r4, #20]
 800a360:	b002      	add	sp, #8
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	ab01      	add	r3, sp, #4
 800a366:	466a      	mov	r2, sp
 800a368:	f7ff ffc8 	bl	800a2fc <__swhatbuf_r>
 800a36c:	9900      	ldr	r1, [sp, #0]
 800a36e:	4605      	mov	r5, r0
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff fcdb 	bl	8009d2c <_malloc_r>
 800a376:	b948      	cbnz	r0, 800a38c <__smakebuf_r+0x44>
 800a378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a37c:	059a      	lsls	r2, r3, #22
 800a37e:	d4ef      	bmi.n	800a360 <__smakebuf_r+0x18>
 800a380:	f023 0303 	bic.w	r3, r3, #3
 800a384:	f043 0302 	orr.w	r3, r3, #2
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	e7e3      	b.n	800a354 <__smakebuf_r+0xc>
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <__smakebuf_r+0x7c>)
 800a38e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	6020      	str	r0, [r4, #0]
 800a394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	9b00      	ldr	r3, [sp, #0]
 800a39c:	6163      	str	r3, [r4, #20]
 800a39e:	9b01      	ldr	r3, [sp, #4]
 800a3a0:	6120      	str	r0, [r4, #16]
 800a3a2:	b15b      	cbz	r3, 800a3bc <__smakebuf_r+0x74>
 800a3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f889 	bl	800a4c0 <_isatty_r>
 800a3ae:	b128      	cbz	r0, 800a3bc <__smakebuf_r+0x74>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f023 0303 	bic.w	r3, r3, #3
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	89a0      	ldrh	r0, [r4, #12]
 800a3be:	4305      	orrs	r5, r0
 800a3c0:	81a5      	strh	r5, [r4, #12]
 800a3c2:	e7cd      	b.n	800a360 <__smakebuf_r+0x18>
 800a3c4:	080099f1 	.word	0x080099f1

0800a3c8 <__malloc_lock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__malloc_lock+0x8>)
 800a3ca:	f7ff bc76 	b.w	8009cba <__retarget_lock_acquire_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20004910 	.word	0x20004910

0800a3d4 <__malloc_unlock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__malloc_unlock+0x8>)
 800a3d6:	f7ff bc71 	b.w	8009cbc <__retarget_lock_release_recursive>
 800a3da:	bf00      	nop
 800a3dc:	20004910 	.word	0x20004910

0800a3e0 <_free_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d044      	beq.n	800a470 <_free_r+0x90>
 800a3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f2:	bfb8      	it	lt
 800a3f4:	18e4      	addlt	r4, r4, r3
 800a3f6:	f7ff ffe7 	bl	800a3c8 <__malloc_lock>
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <_free_r+0x94>)
 800a3fc:	9801      	ldr	r0, [sp, #4]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	b933      	cbnz	r3, 800a410 <_free_r+0x30>
 800a402:	6063      	str	r3, [r4, #4]
 800a404:	6014      	str	r4, [r2, #0]
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a40c:	f7ff bfe2 	b.w	800a3d4 <__malloc_unlock>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d908      	bls.n	800a426 <_free_r+0x46>
 800a414:	6825      	ldr	r5, [r4, #0]
 800a416:	1961      	adds	r1, r4, r5
 800a418:	428b      	cmp	r3, r1
 800a41a:	bf01      	itttt	eq
 800a41c:	6819      	ldreq	r1, [r3, #0]
 800a41e:	685b      	ldreq	r3, [r3, #4]
 800a420:	1949      	addeq	r1, r1, r5
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	e7ed      	b.n	800a402 <_free_r+0x22>
 800a426:	461a      	mov	r2, r3
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b10b      	cbz	r3, 800a430 <_free_r+0x50>
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	d9fa      	bls.n	800a426 <_free_r+0x46>
 800a430:	6811      	ldr	r1, [r2, #0]
 800a432:	1855      	adds	r5, r2, r1
 800a434:	42a5      	cmp	r5, r4
 800a436:	d10b      	bne.n	800a450 <_free_r+0x70>
 800a438:	6824      	ldr	r4, [r4, #0]
 800a43a:	4421      	add	r1, r4
 800a43c:	1854      	adds	r4, r2, r1
 800a43e:	42a3      	cmp	r3, r4
 800a440:	6011      	str	r1, [r2, #0]
 800a442:	d1e0      	bne.n	800a406 <_free_r+0x26>
 800a444:	681c      	ldr	r4, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	6053      	str	r3, [r2, #4]
 800a44a:	4421      	add	r1, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	e7da      	b.n	800a406 <_free_r+0x26>
 800a450:	d902      	bls.n	800a458 <_free_r+0x78>
 800a452:	230c      	movs	r3, #12
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	e7d6      	b.n	800a406 <_free_r+0x26>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf04      	itt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	bf04      	itt	eq
 800a468:	1949      	addeq	r1, r1, r5
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	6054      	str	r4, [r2, #4]
 800a46e:	e7ca      	b.n	800a406 <_free_r+0x26>
 800a470:	b003      	add	sp, #12
 800a472:	bd30      	pop	{r4, r5, pc}
 800a474:	20004914 	.word	0x20004914

0800a478 <_read_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	; (800a498 <_read_r+0x20>)
 800a47c:	4604      	mov	r4, r0
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	2200      	movs	r2, #0
 800a484:	602a      	str	r2, [r5, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f7f7 ff0e 	bl	80022a8 <_read>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_read_r+0x1e>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_read_r+0x1e>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	2000491c 	.word	0x2000491c

0800a49c <_fstat_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	; (800a4bc <_fstat_r+0x20>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	f7f7 ff42 	bl	8002332 <_fstat>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	d102      	bne.n	800a4b8 <_fstat_r+0x1c>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b103      	cbz	r3, 800a4b8 <_fstat_r+0x1c>
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	bf00      	nop
 800a4bc:	2000491c 	.word	0x2000491c

0800a4c0 <_isatty_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d06      	ldr	r5, [pc, #24]	; (800a4dc <_isatty_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f7 ff41 	bl	8002352 <_isatty>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_isatty_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_isatty_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	2000491c 	.word	0x2000491c

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr
